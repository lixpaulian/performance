
performance.elf:     file format elf32-littlearm
performance.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001c9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00004873 memsz 0x00004873 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08004874 align 2**16
         filesz 0x0000007c memsz 0x0000007c flags rw-
    LOAD off    0x0002007c vaddr 0x2000007c paddr 0x2000007c align 2**16
         filesz 0x00000000 memsz 0x00000a5c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000004a4  08000000  08000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .inits        00000028  080004a4  080004a4  000104a4  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data         0000007c  20000000  08004874  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  3 .data_CCMRAM  00000000  10000000  10000000  0002007c  2**2  CONTENTS
  4 .bss          0000095c  2000007c  2000007c  0002007c  2**2  ALLOC
  5 .text         000043a3  080004d0  080004d0  000104d0  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .noinit       00000000  200009d8  200009d8  0002007c  2**2  CONTENTS
  7 ._check_stack 00000100  200009d8  200009d8  0002007c  2**2  ALLOC
  8 .comment      0000006e  00000000  00000000  0002007c  2**0  CONTENTS, READONLY
  9 .ARM.attributes 00000037  00000000  00000000  000200ea  2**0  CONTENTS, READONLY
 10 .debug_aranges 00000948  00000000  00000000  00020121  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000fe7b  00000000  00000000  00020a69  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000029bd  00000000  00000000  000308e4  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000058ab  00000000  00000000  000332a1  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000024ec  00000000  00000000  00038b4c  2**2  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039c0  00000000  00000000  0003b038  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000d441  00000000  00000000  0003e9f8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000028f0  00000000  00000000  0004be39  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080004a4 l    d  .inits	00000000 .inits
20000000 l    d  .data	00000000 .data
10000000 l    d  .data_CCMRAM	00000000 .data_CCMRAM
2000007c l    d  .bss	00000000 .bss
080004d0 l    d  .text	00000000 .text
200009d8 l    d  .noinit	00000000 .noinit
200009d8 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 vectors_stm32f746xx.c
00000000 l    df *ABS*	00000000 _startup.c
00000000 l    df *ABS*	00000000 exception_handlers.c
00000000 l    df *ABS*	00000000 system_stm32f7xx.c
00000000 l    df *ABS*	00000000 main.c
20000004 l     O .data	00000004 prescaler.12140
00000000 l    df *ABS*	00000000 core_portme.c
200001b8 l     O .bss	00000004 stop_time_val
200001bc l     O .bss	00000004 start_time_val
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 stm32f7xx_hal.c
2000007c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f7xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_tim.c
00000000 l    df *ABS*	00000000 _sbrk.c
20000080 l     O .bss	00000004 current_heap_end.4428
00000000 l    df *ABS*	00000000 _syscalls.c
20000084 l     O .bss	00000004 monitor_stdout
20000088 l     O .bss	00000050 args_buf.6212
200000d8 l     O .bss	00000028 argv_buf.6213
20000100 l     O .bss	00000004 monitor_stdin
20000104 l     O .bss	00000004 monitor_stderr
20000108 l     O .bss	000000a0 openfiles
00000000 l    df *ABS*	00000000 _initialize_hardware.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_msp.c
00000000 l    df *ABS*	00000000 timing.c
00000000 l    df *ABS*	00000000 core_list_join.c
08001728 l     F .text	000000b6 core_list_mergesort.constprop.2
00000000 l    df *ABS*	00000000 core_main.c
00000000 l    df *ABS*	00000000 core_matrix.c
00000000 l    df *ABS*	00000000 core_state.c
080045e4 l     O .text	00000010 intpat
080045f4 l     O .text	00000010 floatpat
080046b4 l     O .text	00000010 scipat
080046c4 l     O .text	00000010 errpat
00000000 l    df *ABS*	00000000 core_util.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 findfp.c
08003204 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08003a90 l     F .text	00000030 __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
00000000 l       *UND*	00000000 HAL_TIMEx_CommutationCallback
080004cc l       .inits	00000000 __fini_array_end
00000000 l       *UND*	00000000 FLASH_Erase_Sector
00000000 l       *UND*	00000000 HAL_DMA_Abort
200009d8 l       .noinit	00000000 _end_noinit
080004cc l       .inits	00000000 __fini_array_start
00000000 l       *UND*	00000000 TIMEx_DMACommutationCplt
080004cc l       .inits	00000000 __init_array_end
080004cc l       .inits	00000000 __preinit_array_end
080004cc l       .inits	00000000 __init_array_start
00000000 l       *UND*	00000000 HAL_TIMEx_BreakCallback
080004cc l       .inits	00000000 __preinit_array_start
080004a0  w    F .isr_vector	00000002 RTC_Alarm_IRQHandler
08004160 g     O .text	00000010 APBAHBPrescTable
080004a0  w    F .isr_vector	00000002 EXTI2_IRQHandler
080016c0 g     F .text	00000068 MX_TIM5_Init
080004a0  w    F .isr_vector	00000002 TIM8_CC_IRQHandler
0800409c g     F .text	00000020 _isatty_r
200001ac g     O .bss	00000004 seed1_volatile
08003474 g     F .text	000000b4 _puts_r
08003920 g     F .text	00000024 _lseek_r
08000484  w    F .isr_vector	00000002 DebugMon_Handler
08000e74 g     F .text	00000020 HAL_TIM_Base_Start
080004a0  w    F .isr_vector	00000002 UART8_IRQHandler
080004a0  w    F .isr_vector	00000002 SPI4_IRQHandler
20000000 g       .data	00000000 __data_start__
2004fc00 g       *ABS*	00000000 _Heap_Limit
080004cc g       .inits	00000000 __bss_regions_array_end
08003444 g     F .text	00000030 printf
08001b88 g     F .text	000000fc core_list_init
080004a0  w    F .isr_vector	00000002 TIM1_CC_IRQHandler
08000560 g     F .text	00000074 HAL_NVIC_SetPriority
080035b2 g     F .text	00000024 __sseek
08003278 g     F .text	00000060 __sinit
080004a0  w    F .isr_vector	00000002 DMA2_Stream5_IRQHandler
08002e18 g     F .text	0000028a crcu32
080035f4 g     F .text	000000a8 __swbuf_r
080002c4  w    F .isr_vector	00000014 HardFault_Handler
08001448  w    F .text	00000024 __initialize_hardware_early
0800324c g     F .text	0000002c __sfmoreglue
08000000 g       *ABS*	00000000 __vectors_start__
080004a0  w    F .isr_vector	00000002 DMA1_Stream5_IRQHandler
080031e8 g     F .text	00000004 check_data_types
080028b8 g     F .text	00000010 stop_time
08001690 g     F .text	0000002c SysTick_Handler
080004a0  w    F .isr_vector	00000002 PVD_IRQHandler
08000ef4 g     F .text	000000a4 initialise_monitor_handles
08002cd4 g     F .text	00000142 crcu16
080004a0  w    F .isr_vector	00000002 TAMP_STAMP_IRQHandler
08004874 g       *ABS*	00000000 _sidata
08000c74 g     F .text	000000c4 HAL_RCC_GetHCLKFreq
08000488  w    F .isr_vector	00000002 PendSV_Handler
080002c0  w    F .isr_vector	00000002 NMI_Handler
08004874 g       .data	00000000 __exidx_end
080004a0  w    F .isr_vector	00000002 CAN2_RX1_IRQHandler
080004a0  w    F .isr_vector	00000002 EXTI3_IRQHandler
080031ec g     F .text	0000000c __errno
08004874 g       .data	00000000 __etext
200009d8 g       .noinit	00000000 _Heap_Begin
080004a0  w    F .isr_vector	00000002 TIM8_TRG_COM_TIM14_IRQHandler
080016bc g     F .text	00000002 HAL_MspInit
080004a0  w    F .isr_vector	00000002 TIM1_UP_TIM10_IRQHandler
08004078 g     F .text	00000024 _fstat_r
200001c8 g     O .bss	00000004 errno
08004874 g       .data	00000000 _etext
2000007c g       .bss	00000000 _sbss
080028f4 g     F .text	00000006 portable_fini
2004fc00 g       *ABS*	00000000 __Main_Stack_Limit
080004a0  w    F .isr_vector	00000002 TIM8_UP_TIM13_IRQHandler
0800061c g     F .text	0000007c HAL_PWREx_EnableOverDrive
080004a0  w    F .isr_vector	00000002 I2C3_ER_IRQHandler
08002254 g     F .text	00000558 matrix_test
080028c8 g     F .text	00000014 get_time
08002b94 g     F .text	000000f8 core_bench_state
080017e0 g     F .text	000003a6 core_bench_list
080031f8 g     F .text	0000000c _cleanup_r
080004a0  w    F .isr_vector	00000002 EXTI0_IRQHandler
080004a0  w    F .isr_vector	00000002 I2C2_EV_IRQHandler
200009d8 g       .noinit	00000000 _noinit
08003528 g     F .text	00000010 puts
080004a0  w    F .isr_vector	00000002 DMA1_Stream2_IRQHandler
080004a0  w    F .isr_vector	00000002 CAN1_RX0_IRQHandler
080004a0  w    F .isr_vector	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080004a0  w    F .isr_vector	00000002 OTG_HS_WKUP_IRQHandler
08001358  w    F .text	0000008c _fstat
08000468  w    F .isr_vector	00000014 UsageFault_Handler
2000000c g     O .data	00000004 seed3_volatile
080004a0  w    F .isr_vector	00000002 LTDC_ER_IRQHandler
080004a0  w    F .isr_vector	00000002 CAN2_SCE_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA2_Stream2_IRQHandler
2000007c g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080004a0  w    F .isr_vector	00000002 SPI1_IRQHandler
08003538 g     F .text	00000020 _sbrk_r
080004a0  w    F .isr_vector	00000002 TIM6_DAC_IRQHandler
08004054 g     F .text	00000024 _read_r
080004a0  w    F .isr_vector	00000002 TIM1_BRK_TIM9_IRQHandler
20000008 g     O .data	00000004 seed4_volatile
080004a0  w    F .isr_vector	00000002 DCMI_IRQHandler
080004a0  w    F .isr_vector	00000002 CAN2_RX0_IRQHandler
080005d4 g     F .text	00000030 HAL_SYSTICK_Config
08004874 g       .data	00000000 __exidx_start
080004a0  w    F .isr_vector	00000002 DMA2_Stream3_IRQHandler
080013e4 g     F .text	00000064 _isatty
0800483c g     O .text	00000004 _global_impure_ptr
00000400 g       *ABS*	00000000 __Main_Stack_Size
200001cc g     O .bss	0000003c htim5
080004a0  w    F .isr_vector	00000002 SAI2_IRQHandler
080002d8  w    F .isr_vector	00000174 HardFault_Handler_C
08000e94 g     F .text	00000040 _sbrk
080004a0  w    F .isr_vector	00000002 USART6_IRQHandler
08000f98 g     F .text	000000e0 __initialize_args
08000464  w    F .isr_vector	00000002 BusFault_Handler_C
080004a0  w    F .isr_vector	00000002 USART3_IRQHandler
200009d8 g       .bss	00000000 _ebss
080029b8 g     F .text	000001da core_state_transition
080002bc g     F .isr_vector	00000004 Reset_Handler
080004a0  w    F .isr_vector	00000002 CAN1_RX1_IRQHandler
080004a0  w    F .isr_vector	00000002 UART5_IRQHandler
0800146c  w    F .text	00000004 __initialize_hardware
080004a0  w    F .isr_vector	00000002 DMA2_Stream0_IRQHandler
080004f8 g     F .text	00000024 HAL_Init
080004a0  w    F .isr_vector	00000002 TIM4_IRQHandler
080027ac g     F .text	00000020 core_bench_matrix
08004818 g     O .text	00000020 __sf_fake_stderr
080004a0  w    F .isr_vector	00000002 QUADSPI_IRQHandler
080004a0  w    F .isr_vector	00000002 I2C1_EV_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA1_Stream6_IRQHandler
080004a4 g       .inits	00000000 __data_regions_array_start
2000007c g       .data	00000000 __data_end__
080028a8 g     F .text	00000010 start_time
080004a0  w    F .isr_vector	00000002 DMA1_Stream1_IRQHandler
08003ac0 g     F .text	00000024 __sfputs_r
080004a0  w    F .isr_vector	00000002 UART4_IRQHandler
080040c0 g     F .text	00000000 memchr
00000000  w      *UND*	00000000 _printf_float
200009d8 g       .bss	00000000 __bss_end__
08003a04 g     F .text	0000008c _free_r
080004a0  w    F .isr_vector	00000002 TIM3_IRQHandler
080004a0  w    F .isr_vector	00000002 RCC_IRQHandler
200001b0 g     O .bss	00000004 seed5_volatile
080004a0  w    F .isr_vector	00000002 TIM8_BRK_TIM12_IRQHandler
080004a0  w    F .isr_vector	00000002 Default_Handler
080001c8  w    F .isr_vector	000000f4 _start
0800417c g     O .text	00000010 AHBPrescTable
0800110c g     F .text	000000f4 _lseek
080004a0  w    F .isr_vector	00000002 CEC_IRQHandler
080004a0  w    F .isr_vector	00000002 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
080004a0  w    F .isr_vector	00000002 ADC_IRQHandler
080030a4 g     F .text	00000144 crc16
08000ab8 g     F .text	000001bc HAL_RCC_ClockConfig
08000538 g     F .text	00000028 HAL_NVIC_SetPriorityGrouping
080004a0  w    F .isr_vector	00000002 DMA1_Stream7_IRQHandler
080004a0  w    F .isr_vector	00000002 SPI5_IRQHandler
080004a0  w    F .isr_vector	00000002 TIM7_IRQHandler
080004a0  w    F .isr_vector	00000002 SDMMC1_IRQHandler
0800379c g     F .text	00000020 _close_r
080004a0  w    F .isr_vector	00000002 CAN2_TX_IRQHandler
080004a0  w    F .isr_vector	00000002 TIM5_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA2_Stream7_IRQHandler
08000d3c g     F .text	00000138 HAL_TIM_Base_Init
080004a0  w    F .isr_vector	00000002 I2C3_EV_IRQHandler
0800047c  w    F .isr_vector	00000002 UsageFault_Handler_C
080036c0 g     F .text	000000dc __swsetup_r
080004a0  w    F .isr_vector	00000002 EXTI9_5_IRQHandler
08000000 g       *ABS*	00000000 __vectors_start
080032d8 g     F .text	00000078 __sfp
080004a0  w    F .isr_vector	00000002 RTC_WKUP_IRQHandler
080004a0  w    F .isr_vector	00000002 LTDC_IRQHandler
08003558 g     F .text	00000022 __sread
080004a0  w    F .isr_vector	00000002 ETH_WKUP_IRQHandler
0800052c  w    F .text	0000000c HAL_GetTick
080004a0  w    F .isr_vector	00000002 SPDIF_RX_IRQHandler
080038cc g     F .text	00000054 _fflush_r
20000208 g     O .bss	000007d0 static_memblk
080004a0  w    F .isr_vector	00000002 SPI2_IRQHandler
080047d8 g     O .text	00000020 __sf_fake_stdin
080004a0  w    F .isr_vector	00000002 OTG_HS_EP1_IN_IRQHandler
0800338c g     F .text	00000010 memset
0800044c  w    F .isr_vector	00000002 MemManage_Handler
08001544 g     F .text	0000014c main
080004a0  w    F .isr_vector	00000002 DMA1_Stream0_IRQHandler
080004a0  w    F .isr_vector	00000002 CAN1_TX_IRQHandler
08000480  w    F .isr_vector	00000002 SVC_Handler
080035d6 g     F .text	00000008 __sclose
08002c8c g     F .text	00000048 get_seed_32
0800339c g     F .text	000000a8 _malloc_r
200001a8 g     O .bss	00000004 seconds
080004a0  w    F .isr_vector	00000002 EXTI4_IRQHandler
080035de g     F .text	00000014 strcmp
08001470 g     F .text	00000050 SystemInit
080004a0  w    F .isr_vector	00000002 RNG_IRQHandler
08003444 g     F .text	00000030 iprintf
08001c84 g     F .text	000005d0 core_main
0800369c g     F .text	00000024 _write_r
080004d0  w    F .text	00000028 HAL_InitTick
080004a0  w    F .isr_vector	00000002 ETH_IRQHandler
08003d1c g     F .text	000000ec _printf_common
20000078 g     O .data	00000004 _impure_ptr
080037bc g     F .text	00000110 __sflush_r
0800051c  w    F .text	00000010 HAL_IncTick
080004a0  w    F .isr_vector	00000002 OTG_HS_EP1_OUT_IRQHandler
080004a0  w    F .isr_vector	00000002 WWDG_IRQHandler
080004a0  w    F .isr_vector	00000002 SPI6_IRQHandler
080004bc g       .inits	00000000 __data_regions_array_end
080004a0  w    F .isr_vector	00000002 I2C4_EV_IRQHandler
080004a0  w    F .isr_vector	00000002 TIM2_IRQHandler
080028ec g     F .text	00000006 portable_init
08000000 g     O .isr_vector	000001c8 __isr_vectors
080004a0  w    F .isr_vector	00000002 OTG_FS_WKUP_IRQHandler
080027cc g     F .text	000000dc core_init_matrix
080004a0  w    F .isr_vector	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080004a0  w    F .isr_vector	00000002 OTG_HS_IRQHandler
08000604 g     F .text	00000018 HAL_SYSTICK_CLKSourceConfig
080004a0  w    F .isr_vector	00000002 DMA2D_IRQHandler
08003944 g     F .text	00000046 __swhatbuf_r
20050000 g       *ABS*	00000000 _estack
20050000 g       .isr_vector	00000000 __stack
080004a0  w    F .isr_vector	00000002 EXTI1_IRQHandler
08001200 g     F .text	000000c0 _write
2000007c g       .data	00000000 _edata
08000d38  w    F .text	00000002 HAL_TIM_Base_MspInit
080004a0  w    F .isr_vector	00000002 UART7_IRQHandler
080004a0  w    F .isr_vector	00000002 USART2_IRQHandler
0800357a g     F .text	00000038 __swrite
08000698 g     F .text	00000420 HAL_RCC_OscConfig
08003ae4 g     F .text	00000238 _vfiprintf_r
08003350 g     F .text	0000003c _fwalk_reent
080014c0 g     F .text	00000084 SystemCoreClockUpdate
080028fc g     F .text	000000bc core_init_state
20000014 g     O .data	00000004 __ctype_ptr__
080004a0  w    F .isr_vector	00000002 I2C2_ER_IRQHandler
080047f8 g     O .text	00000020 __sf_fake_stdout
080004a0  w    F .isr_vector	00000002 DMA2_Stream1_IRQHandler
080028dc g     F .text	00000010 time_in_secs
080046d4 g     O .text	00000101 _ctype_
080004bc g       .inits	00000000 __bss_regions_array_start
08001078 g     F .text	00000094 _read
080004a0  w    F .isr_vector	00000002 CAN1_SCE_IRQHandler
080004a0  w    F .isr_vector	00000002 FLASH_IRQHandler
08000ed4 g     F .text	00000020 _exit
080004a0  w    F .isr_vector	00000002 DMA2_Stream4_IRQHandler
08000450  w    F .isr_vector	00000014 BusFault_Handler
080004a0  w    F .isr_vector	00000002 USART1_IRQHandler
0800398c g     F .text	00000078 __smakebuf_r
080004a0  w    F .isr_vector	00000002 OTG_FS_IRQHandler
08003e08 g     F .text	0000024c _printf_i
080004a0  w    F .isr_vector	00000002 SPI3_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA1_Stream4_IRQHandler
200001c0 g     O .bss	00000004 __malloc_sbrk_start
080004a0  w    F .isr_vector	00000002 I2C1_ER_IRQHandler
080004a0  w    F .isr_vector	00000002 FMC_IRQHandler
200001c4 g     O .bss	00000004 __malloc_free_list
200001b4 g     O .bss	00000004 seed2_volatile
080004a0  w    F .isr_vector	00000002 LPTIM1_IRQHandler
08003ae4 g     F .text	00000238 _vfprintf_r
080004a0  w    F .isr_vector	00000002 I2C4_ER_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA2_Stream6_IRQHandler
20000010 g     O .data	00000004 default_num_contexts
080004a0  w    F .isr_vector	00000002 SAI1_IRQHandler
080004a0  w    F .isr_vector	00000002 DMA1_Stream3_IRQHandler
080012c0 g     F .text	00000098 _close



Disassembly of section .isr_vector:

08000000 <__isr_vectors>:
 8000000:	00 00 05 20 bd 02 00 08 c1 02 00 08 c5 02 00 08     ... ............
 8000010:	4d 04 00 08 51 04 00 08 69 04 00 08 00 00 00 00     M...Q...i.......
	...
 800002c:	81 04 00 08 85 04 00 08 00 00 00 00 89 04 00 08     ................
 800003c:	91 16 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800004c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800005c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800006c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800007c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800008c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800009c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000ac:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000bc:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000cc:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000dc:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000ec:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80000fc:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800010c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800011c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800012c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800013c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800014c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800015c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800016c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800017c:	00 00 00 00 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800018c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 800019c:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80001ac:	a1 04 00 08 a1 04 00 08 a1 04 00 08 a1 04 00 08     ................
 80001bc:	a1 04 00 08 a1 04 00 08 a1 04 00 08                 ............

080001c8 <_start>:
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:251
  // Copy the DATA segment from Flash to RAM (inlined).
  __initialize_data(&_sidata, &_sdata, &_edata);
#else

  // Copy the data sections from flash to SRAM.
  for (unsigned int* p = &__data_regions_array_start;
 80001c8:	4c32      	ldr	r4, [pc, #200]	; (8000294 <_start+0xcc>)
 80001ca:	4d33      	ldr	r5, [pc, #204]	; (8000298 <_start+0xd0>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:224
// For the call to work, and for the call to __initialize_hardware_early()
// to work, the reset stack must point to a valid internal RAM area.

void __attribute__ ((section(".after_vectors"),noreturn,weak))
_start (void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:235
  // enabled and require an early sequence to disable it.
  //
  // Also useful on platform with external RAM, that need to be
  // initialised before filling the BSS section.

  __initialize_hardware_early ();
 80001d0:	f001 f93a 	bl	8001448 <__initialize_hardware_early>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:251
  // Copy the DATA segment from Flash to RAM (inlined).
  __initialize_data(&_sidata, &_sdata, &_edata);
#else

  // Copy the data sections from flash to SRAM.
  for (unsigned int* p = &__data_regions_array_start;
 80001d4:	42ac      	cmp	r4, r5
 80001d6:	d20e      	bcs.n	80001f6 <_start+0x2e>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:255
      p < &__data_regions_array_end;)
    {
      unsigned int* from = (unsigned int *) (*p++);
      unsigned int* region_begin = (unsigned int *) (*p++);
 80001d8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80001dc:	340c      	adds	r4, #12
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:256
      unsigned int* region_end = (unsigned int *) (*p++);
 80001de:	f854 0c04 	ldr.w	r0, [r4, #-4]
__initialize_data():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:123
		   unsigned int* region_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
 80001e2:	4298      	cmp	r0, r3
 80001e4:	d9f6      	bls.n	80001d4 <_start+0xc>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:124
    *p++ = *from++;
 80001e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80001ea:	f843 1b04 	str.w	r1, [r3], #4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:123
		   unsigned int* region_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
 80001ee:	4298      	cmp	r0, r3
 80001f0:	d8f9      	bhi.n	80001e6 <_start+0x1e>
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:251
  // Copy the DATA segment from Flash to RAM (inlined).
  __initialize_data(&_sidata, &_sdata, &_edata);
#else

  // Copy the data sections from flash to SRAM.
  for (unsigned int* p = &__data_regions_array_start;
 80001f2:	42ac      	cmp	r4, r5
 80001f4:	d3f0      	bcc.n	80001d8 <_start+0x10>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:283
  // Zero fill the BSS section (inlined).
  __initialize_bss(&__bss_start__, &__bss_end__);
#else

  // Zero fill all bss segments
  for (unsigned int *p = &__bss_regions_array_start;
 80001f6:	4d29      	ldr	r5, [pc, #164]	; (800029c <_start+0xd4>)
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <_start+0xd8>)
 80001fa:	429d      	cmp	r5, r3
 80001fc:	d21e      	bcs.n	800023c <_start+0x74>
 80001fe:	3508      	adds	r5, #8
 8000200:	1dde      	adds	r6, r3, #7
 8000202:	2700      	movs	r7, #0
 8000204:	1b76      	subs	r6, r6, r5
 8000206:	08f6      	lsrs	r6, r6, #3
 8000208:	3601      	adds	r6, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:286
      p < &__bss_regions_array_end;)
    {
      unsigned int* region_begin = (unsigned int*) (*p++);
 800020a:	f855 4c08 	ldr.w	r4, [r5, #-8]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:287
      unsigned int* region_end = (unsigned int*) (*p++);
 800020e:	f855 2c04 	ldr.w	r2, [r5, #-4]
__initialize_bss():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:134
__initialize_bss (unsigned int* region_begin, unsigned int* region_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = region_begin;
  while (p < region_end)
 8000212:	4294      	cmp	r4, r2
 8000214:	d20e      	bcs.n	8000234 <_start+0x6c>
 8000216:	1e53      	subs	r3, r2, #1
 8000218:	f104 0e01 	add.w	lr, r4, #1
 800021c:	4620      	mov	r0, r4
 800021e:	2100      	movs	r1, #0
 8000220:	1b1b      	subs	r3, r3, r4
 8000222:	f023 0303 	bic.w	r3, r3, #3
 8000226:	3304      	adds	r3, #4
 8000228:	4572      	cmp	r2, lr
 800022a:	bf2c      	ite	cs
 800022c:	461a      	movcs	r2, r3
 800022e:	2204      	movcc	r2, #4
 8000230:	f003 f8ac 	bl	800338c <memset>
 8000234:	3701      	adds	r7, #1
 8000236:	3508      	adds	r5, #8
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:283
  // Zero fill the BSS section (inlined).
  __initialize_bss(&__bss_start__, &__bss_end__);
#else

  // Zero fill all bss segments
  for (unsigned int *p = &__bss_regions_array_start;
 8000238:	42b7      	cmp	r7, r6
 800023a:	d1e6      	bne.n	800020a <_start+0x42>
__run_init_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:160
__run_init_array (void)
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
 800023c:	4d19      	ldr	r5, [pc, #100]	; (80002a4 <_start+0xdc>)
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:302
    }
#endif

  // Hook to continue the initialisations. Usually compute and store the
  // clock frequency in the global CMSIS variable, cleared above.
  __initialize_hardware ();
 800023e:	f001 f915 	bl	800146c <__initialize_hardware>
__run_init_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:160
__run_init_array (void)
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
 8000242:	4c19      	ldr	r4, [pc, #100]	; (80002a8 <_start+0xe0>)
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:307
  __initialize_hardware ();

  // Get the argc/argv (useful in semihosting configurations).
  int argc;
  char** argv;
  __initialize_args (&argc, &argv);
 8000244:	a901      	add	r1, sp, #4
 8000246:	4668      	mov	r0, sp
 8000248:	f000 fea6 	bl	8000f98 <__initialize_args>
__run_init_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:160
__run_init_array (void)
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
 800024c:	1b2b      	subs	r3, r5, r4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:161
  for (i = 0; i < count; i++)
 800024e:	2b03      	cmp	r3, #3
 8000250:	dd04      	ble.n	800025c <_start+0x94>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:162
    __preinit_array_start[i] ();
 8000252:	f854 3b04 	ldr.w	r3, [r4], #4
 8000256:	4798      	blx	r3
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:161
{
  int count;
  int i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000258:	42a5      	cmp	r5, r4
 800025a:	d1fa      	bne.n	8000252 <_start+0x8a>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:169
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init(); // DO NOT ENABE THIS!

  count = __init_array_end - __init_array_start;
 800025c:	4d13      	ldr	r5, [pc, #76]	; (80002ac <_start+0xe4>)
 800025e:	4c14      	ldr	r4, [pc, #80]	; (80002b0 <_start+0xe8>)
 8000260:	1b2b      	subs	r3, r5, r4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:170
  for (i = 0; i < count; i++)
 8000262:	2b03      	cmp	r3, #3
 8000264:	dd04      	ble.n	8000270 <_start+0xa8>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:171
    __init_array_start[i] ();
 8000266:	f854 3b04 	ldr.w	r3, [r4], #4
 800026a:	4798      	blx	r3
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:170
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init(); // DO NOT ENABE THIS!

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 800026c:	42a5      	cmp	r5, r4
 800026e:	d1fa      	bne.n	8000266 <_start+0x9e>
__run_fini_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:182
__run_fini_array (void)
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
 8000270:	4c10      	ldr	r4, [pc, #64]	; (80002b4 <_start+0xec>)
 8000272:	4d11      	ldr	r5, [pc, #68]	; (80002b8 <_start+0xf0>)
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:314
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 8000274:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8000278:	f001 f964 	bl	8001544 <main>
__run_fini_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:182
__run_fini_array (void)
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
 800027c:	1b63      	subs	r3, r4, r5
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:314
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 800027e:	4606      	mov	r6, r0
__run_fini_array():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:183
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 8000280:	2b03      	cmp	r3, #3
 8000282:	dd04      	ble.n	800028e <_start+0xc6>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:184
    __fini_array_start[i - 1] ();
 8000284:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8000288:	4798      	blx	r3
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:183
{
  int count;
  int i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 800028a:	42a5      	cmp	r5, r4
 800028c:	d1fa      	bne.n	8000284 <_start+0xbc>
_start():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_startup.c:319
  int code = main (argc, argv);

  // Run the C++ static destructors.
  __run_fini_array ();

  _exit (code);
 800028e:	4630      	mov	r0, r6
 8000290:	f000 fe20 	bl	8000ed4 <_exit>
 8000294:	080004a4 	.word	0x080004a4
 8000298:	080004bc 	.word	0x080004bc
 800029c:	080004bc 	.word	0x080004bc
 80002a0:	080004cc 	.word	0x080004cc
 80002a4:	080004cc 	.word	0x080004cc
 80002a8:	080004cc 	.word	0x080004cc
 80002ac:	080004cc 	.word	0x080004cc
 80002b0:	080004cc 	.word	0x080004cc
 80002b4:	080004cc 	.word	0x080004cc
 80002b8:	080004cc 	.word	0x080004cc

080002bc <Reset_Handler>:
Reset_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:41

// The Release version is optimised to a quick branch to _start.
void __attribute__ ((section(".after_vectors"),naked))
Reset_Handler(void)
  {
    asm volatile
 80002bc:	4874      	ldr	r0, [pc, #464]	; (8000490 <PendSV_Handler+0x8>)
 80002be:	4700      	bx	r0

080002c0 <NMI_Handler>:
NMI_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:55

#endif

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
 80002c0:	e7fe      	b.n	80002c0 <NMI_Handler>
 80002c2:	bf00      	nop

080002c4 <HardFault_Handler>:
HardFault_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:328
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 80002c4:	f01e 0f04 	tst.w	lr, #4
 80002c8:	bf0c      	ite	eq
 80002ca:	f3ef 8008 	mrseq	r0, MSP
 80002ce:	f3ef 8009 	mrsne	r0, PSP
 80002d2:	4671      	mov	r1, lr
 80002d4:	4a6f      	ldr	r2, [pc, #444]	; (8000494 <PendSV_Handler+0xc>)
 80002d6:	4710      	bx	r2

080002d8 <HardFault_Handler_C>:
HardFault_Handler_C():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:360
  // If the BKPT instruction is executed with C_DEBUGEN == 0 and MON_EN == 0,
  // it will cause the processor to enter a HardFault exception, with DEBUGEVT
  // in the Hard Fault Status register (HFSR) set to 1, and BKPT in the
  // Debug Fault Status register (DFSR) also set to 1.

  if (((SCB->DFSR & SCB_DFSR_BKPT_Msk) != 0)
 80002d8:	4b59      	ldr	r3, [pc, #356]	; (8000440 <HardFault_Handler_C+0x168>)
 80002da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002dc:	0792      	lsls	r2, r2, #30
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:346
}

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 80002de:	b570      	push	{r4, r5, r6, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:360
  // If the BKPT instruction is executed with C_DEBUGEN == 0 and MON_EN == 0,
  // it will cause the processor to enter a HardFault exception, with DEBUGEVT
  // in the Hard Fault Status register (HFSR) set to 1, and BKPT in the
  // Debug Fault Status register (DFSR) also set to 1.

  if (((SCB->DFSR & SCB_DFSR_BKPT_Msk) != 0)
 80002e0:	d502      	bpl.n	80002e8 <HardFault_Handler_C+0x10>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:361
      && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
 80002e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	db00      	blt.n	80002ea <HardFault_Handler_C+0x12>
 80002e8:	e7fe      	b.n	80002e8 <HardFault_Handler_C+0x10>
isSemihosting():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:155
 * @return 1 if the instruction was a valid semihosting call; 0 otherwise.
 */
int
isSemihosting (ExceptionStackFrame* frame, uint16_t opCode)
{
  uint16_t* pw = (uint16_t*) frame->pc;
 80002ea:	6986      	ldr	r6, [r0, #24]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:156
  if (*pw == opCode)
 80002ec:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80002f0:	8832      	ldrh	r2, [r6, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d1f8      	bne.n	80002e8 <HardFault_Handler_C+0x10>
 80002f6:	4604      	mov	r4, r0
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:163
      uint32_t r0 = frame->r0;
#if defined(OS_DEBUG_SEMIHOSTING_FAULTS) || defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
      uint32_t r1 = frame->r1;
#endif
#if defined(OS_USE_SEMIHOSTING) || defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
      uint32_t* blk = (uint32_t*) r1;
 80002f8:	e890 0028 	ldmia.w	r0, {r3, r5}
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:170

#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
      // trace_printf ("sh r0=%d\n", r0);
#endif

      switch (r0)
 80002fc:	3b01      	subs	r3, #1
 80002fe:	2b30      	cmp	r3, #48	; 0x30
 8000300:	d8f2      	bhi.n	80002e8 <HardFault_Handler_C+0x10>
 8000302:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <HardFault_Handler_C+0x30>)
 8000304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000308:	080003cd 	.word	0x080003cd
 800030c:	080003f7 	.word	0x080003f7
 8000310:	080003e9 	.word	0x080003e9
 8000314:	080003e9 	.word	0x080003e9
 8000318:	08000409 	.word	0x08000409
 800031c:	08000411 	.word	0x08000411
 8000320:	080003f7 	.word	0x080003f7
 8000324:	080003f7 	.word	0x080003f7
 8000328:	080003e3 	.word	0x080003e3
 800032c:	080003e3 	.word	0x080003e3
 8000330:	080002e9 	.word	0x080002e9
 8000334:	080003e3 	.word	0x080003e3
 8000338:	080003e3 	.word	0x080003e3
 800033c:	080003e3 	.word	0x080003e3
 8000340:	080003e3 	.word	0x080003e3
 8000344:	080003e3 	.word	0x080003e3
 8000348:	080003f7 	.word	0x080003f7
 800034c:	080003e3 	.word	0x080003e3
 8000350:	080003f7 	.word	0x080003f7
 8000354:	080002e9 	.word	0x080002e9
 8000358:	080003e3 	.word	0x080003e3
 800035c:	08000417 	.word	0x08000417
 8000360:	080002e9 	.word	0x080002e9
 8000364:	08000425 	.word	0x08000425
 8000368:	080002e9 	.word	0x080002e9
 800036c:	080002e9 	.word	0x080002e9
 8000370:	080002e9 	.word	0x080002e9
 8000374:	080002e9 	.word	0x080002e9
 8000378:	080002e9 	.word	0x080002e9
 800037c:	080002e9 	.word	0x080002e9
 8000380:	080002e9 	.word	0x080002e9
 8000384:	080002e9 	.word	0x080002e9
 8000388:	080002e9 	.word	0x080002e9
 800038c:	080002e9 	.word	0x080002e9
 8000390:	080002e9 	.word	0x080002e9
 8000394:	080002e9 	.word	0x080002e9
 8000398:	080002e9 	.word	0x080002e9
 800039c:	080002e9 	.word	0x080002e9
 80003a0:	080002e9 	.word	0x080002e9
 80003a4:	080002e9 	.word	0x080002e9
 80003a8:	080002e9 	.word	0x080002e9
 80003ac:	080002e9 	.word	0x080002e9
 80003b0:	080002e9 	.word	0x080002e9
 80003b4:	080002e9 	.word	0x080002e9
 80003b8:	080002e9 	.word	0x080002e9
 80003bc:	080002e9 	.word	0x080002e9
 80003c0:	080002e9 	.word	0x080002e9
 80003c4:	080003e3 	.word	0x080003e3
 80003c8:	080003e3 	.word	0x080003e3
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:238
#define HANDLER_STDOUT  (2)
#define HANDLER_STDERR  (3)

        case SEMIHOSTING_SYS_OPEN:
          // Process only standard io/out/err and return 1/2/3
          if (strcmp ((char*) blk[0], ":tt") == 0)
 80003cc:	491d      	ldr	r1, [pc, #116]	; (8000444 <HardFault_Handler_C+0x16c>)
 80003ce:	6828      	ldr	r0, [r5, #0]
 80003d0:	f003 f905 	bl	80035de <strcmp>
 80003d4:	b928      	cbnz	r0, 80003e2 <HardFault_Handler_C+0x10a>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:240
            {
              if ((blk[1] == 0))
 80003d6:	686b      	ldr	r3, [r5, #4]
 80003d8:	b133      	cbz	r3, 80003e8 <HardFault_Handler_C+0x110>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:245
                {
                  frame->r0 = HANDLER_STDIN;
                  break;
                }
              else if (blk[1] == 4)
 80003da:	2b04      	cmp	r3, #4
 80003dc:	d011      	beq.n	8000402 <HardFault_Handler_C+0x12a>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:250
                {
                  frame->r0 = HANDLER_STDOUT;
                  break;
                }
              else if (blk[1] == 8)
 80003de:	2b08      	cmp	r3, #8
 80003e0:	d00c      	beq.n	80003fc <HardFault_Handler_C+0x124>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:256
                {
                  frame->r0 = HANDLER_STDERR;
                  break;
                }
            }
          frame->r0 = (uint32_t)-1; // the call is not successful or not supported
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e6:	6023      	str	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:310
          return 0;
        }

      // Alter the PC to make the exception returns to
      // the instruction after the faulty BKPT.
      frame->pc += 2;
 80003e8:	3602      	adds	r6, #2
HardFault_Handler_C():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:366
      && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
    {
      if (isSemihosting (frame, 0xBE00 + (AngelSWI & 0xFF)))
        {
          // Clear the exception cause in exception status.
          SCB->HFSR = SCB_HFSR_DEBUGEVT_Msk;
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <HardFault_Handler_C+0x168>)
 80003ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
isSemihosting():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:310
          return 0;
        }

      // Alter the PC to make the exception returns to
      // the instruction after the faulty BKPT.
      frame->pc += 2;
 80003f0:	61a6      	str	r6, [r4, #24]
HardFault_Handler_C():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:366
      && ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0))
    {
      if (isSemihosting (frame, 0xBE00 + (AngelSWI & 0xFF)))
        {
          // Clear the exception cause in exception status.
          SCB->HFSR = SCB_HFSR_DEBUGEVT_Msk;
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:369

          // Continue after the BKPT
          return;
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
isSemihosting():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:267
            {
#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
              frame->r0 = (uint32_t) blk[2]
                  - trace_write ((char*) blk[1], blk[2]);
#else
              frame->r0 = 0; // all sent, no more.
 80003f6:	2300      	movs	r3, #0
 80003f8:	6023      	str	r3, [r4, #0]
 80003fa:	e7f5      	b.n	80003e8 <HardFault_Handler_C+0x110>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:252
                  frame->r0 = HANDLER_STDOUT;
                  break;
                }
              else if (blk[1] == 8)
                {
                  frame->r0 = HANDLER_STDERR;
 80003fc:	2303      	movs	r3, #3
 80003fe:	6023      	str	r3, [r4, #0]
 8000400:	e7f2      	b.n	80003e8 <HardFault_Handler_C+0x110>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:247
                  frame->r0 = HANDLER_STDIN;
                  break;
                }
              else if (blk[1] == 4)
                {
                  frame->r0 = HANDLER_STDOUT;
 8000402:	2302      	movs	r3, #2
 8000404:	6023      	str	r3, [r4, #0]
 8000406:	e7ef      	b.n	80003e8 <HardFault_Handler_C+0x110>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:261
          frame->r0 = (uint32_t)-1; // the call is not successful or not supported
          break;

        case SEMIHOSTING_SYS_WRITE:
          // Silently ignore writes to stdout/stderr, fail on all other handler.
          if ((blk[0] == HANDLER_STDOUT) || (blk[0] == HANDLER_STDERR))
 8000408:	682b      	ldr	r3, [r5, #0]
 800040a:	3b02      	subs	r3, #2
 800040c:	2b01      	cmp	r3, #1
 800040e:	d9f2      	bls.n	80003f6 <HardFault_Handler_C+0x11e>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:274
            }
          else
            {
              // If other handler, return the total number of bytes
              // as the number of bytes that are not written.
              frame->r0 = blk[2];
 8000410:	68ab      	ldr	r3, [r5, #8]
 8000412:	6023      	str	r3, [r4, #0]
 8000414:	e7e8      	b.n	80003e8 <HardFault_Handler_C+0x110>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:198
        case SEMIHOSTING_SYS_ERRNO:
          frame->r0 = 0; // the value of the C library errno variable.
          break;

        case SEMIHOSTING_SYS_HEAPINFO:
          blk[0] = 0; // heap_base
 8000416:	2300      	movs	r3, #0
 8000418:	602b      	str	r3, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:199
          blk[1] = 0; // heap_limit
 800041a:	606b      	str	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:200
          blk[2] = 0; // stack_base
 800041c:	60ab      	str	r3, [r5, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:201
          blk[3] = 0; // stack_limit
 800041e:	60eb      	str	r3, [r5, #12]
 8000420:	6986      	ldr	r6, [r0, #24]
 8000422:	e7e1      	b.n	80003e8 <HardFault_Handler_C+0x110>
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000424:	f3bf 8f4f 	dsb	sy
NVIC_SystemReset():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2011
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000428:	4905      	ldr	r1, [pc, #20]	; (8000440 <HardFault_Handler_C+0x168>)
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2010
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HardFault_Handler_C+0x170>)
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2011
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800042c:	68ca      	ldr	r2, [r1, #12]
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2010
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800042e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000432:	4313      	orrs	r3, r2
 8000434:	60cb      	str	r3, [r1, #12]
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
 8000436:	f3bf 8f4f 	dsb	sy
__NOP():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:375
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800043a:	bf00      	nop
 800043c:	e7fd      	b.n	800043a <HardFault_Handler_C+0x162>
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	08004170 	.word	0x08004170
 8000448:	05fa0004 	.word	0x05fa0004

0800044c <MemManage_Handler>:
MemManage_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:450

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
 800044c:	e7fe      	b.n	800044c <MemManage_Handler>
 800044e:	bf00      	nop

08000450 <BusFault_Handler>:
BusFault_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:462
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 8000450:	f01e 0f04 	tst.w	lr, #4
 8000454:	bf0c      	ite	eq
 8000456:	f3ef 8008 	mrseq	r0, MSP
 800045a:	f3ef 8009 	mrsne	r0, PSP
 800045e:	4671      	mov	r1, lr
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <PendSV_Handler+0x10>)
 8000462:	4710      	bx	r2

08000464 <BusFault_Handler_C>:
BusFault_Handler_C():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:480
}

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 8000464:	e7fe      	b.n	8000464 <BusFault_Handler_C>
 8000466:	bf00      	nop

08000468 <UsageFault_Handler>:
UsageFault_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:501
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 8000468:	f01e 0f04 	tst.w	lr, #4
 800046c:	bf0c      	ite	eq
 800046e:	f3ef 8008 	mrseq	r0, MSP
 8000472:	f3ef 8009 	mrsne	r0, PSP
 8000476:	4671      	mov	r1, lr
 8000478:	4a08      	ldr	r2, [pc, #32]	; (800049c <PendSV_Handler+0x14>)
 800047a:	4710      	bx	r2

0800047c <UsageFault_Handler_C>:
UsageFault_Handler_C():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:519
}

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler_C>
 800047e:	bf00      	nop

08000480 <SVC_Handler>:
SVC_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:556

#endif

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
 8000480:	e7fe      	b.n	8000480 <SVC_Handler>
 8000482:	bf00      	nop

08000484 <DebugMon_Handler>:
DebugMon_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:569

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
 8000484:	e7fe      	b.n	8000484 <DebugMon_Handler>
 8000486:	bf00      	nop

08000488 <PendSV_Handler>:
PendSV_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:582

#endif

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
 8000488:	e7fe      	b.n	8000488 <PendSV_Handler>
 800048a:	bf00      	nop
SysTick_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/exception_handlers.c:593
    }
}

void __attribute__ ((section(".after_vectors"),weak))
SysTick_Handler (void)
{
 800048c:	4770      	bx	lr
PendSV_Handler():
 800048e:	0000      	.short	0x0000
 8000490:	080001c9 	.word	0x080001c9
 8000494:	080002d9 	.word	0x080002d9
 8000498:	08000465 	.word	0x08000465
 800049c:	0800047d 	.word	0x0800047d

080004a0 <ADC_IRQHandler>:
Default_Handler():
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/vectors_stm32f746xx.c:374
// When in DEBUG, trigger a debug exception to clearly notify
// the user of the exception and help identify the cause.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 80004a0:	e7fe      	b.n	80004a0 <ADC_IRQHandler>
DMA1_Stream3_IRQHandler():
 80004a2:	bf00      	nop

Disassembly of section .text:

080004d0 <HAL_InitTick>:
HAL_InitTick():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:249
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	4604      	mov	r4, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:251
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004d4:	f000 fbce 	bl	8000c74 <HAL_RCC_GetHCLKFreq>
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_InitTick+0x24>)
 80004da:	fba3 3000 	umull	r3, r0, r3, r0
 80004de:	0980      	lsrs	r0, r0, #6
 80004e0:	f000 f878 	bl	80005d4 <HAL_SYSTICK_Config>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:254

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004e4:	4621      	mov	r1, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ec:	f000 f838 	bl	8000560 <HAL_NVIC_SetPriority>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:258

  /* Return function status */
  return HAL_OK;
}
 80004f0:	2000      	movs	r0, #0
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	10624dd3 	.word	0x10624dd3

080004f8 <HAL_Init>:
HAL_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:158
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x20>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:162
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fa:	2003      	movs	r0, #3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:155
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b508      	push	{r3, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:158
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80004fe:	6813      	ldr	r3, [r2, #0]
 8000500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000504:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:162
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	f000 f817 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:165

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	200f      	movs	r0, #15
 800050c:	f7ff ffe0 	bl	80004d0 <HAL_InitTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:168
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f001 f8d4 	bl	80016bc <HAL_MspInit>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:172
  
  /* Return function status */
  return HAL_OK;
}
 8000514:	2000      	movs	r0, #0
 8000516:	bd08      	pop	{r3, pc}
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_IncTick>:
HAL_IncTick():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:298
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800051c:	4a02      	ldr	r2, [pc, #8]	; (8000528 <HAL_IncTick+0xc>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000007c 	.word	0x2000007c

0800052c <HAL_GetTick>:
HAL_GetTick():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:309
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal.c:310
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000007c 	.word	0x2000007c

08000538 <HAL_NVIC_SetPriorityGrouping>:
NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1817
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4907      	ldr	r1, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1819
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800053e:	0200      	lsls	r0, r0, #8
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_NVIC_SetPriorityGrouping+0x24>)
HAL_NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:162
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000542:	b410      	push	{r4}
NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1817
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000544:	68cc      	ldr	r4, [r1, #12]
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1819
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000546:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800054a:	4022      	ands	r2, r4
HAL_NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:168
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800054c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000550:	4313      	orrs	r3, r2
NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1819
 8000552:	4303      	orrs	r3, r0
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1822
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000554:	60cb      	str	r3, [r1, #12]
HAL_NVIC_SetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:168
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	05fa0000 	.word	0x05fa0000

08000560 <HAL_NVIC_SetPriority>:
NVIC_GetPriorityGrouping():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1833
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <HAL_NVIC_SetPriority+0x68>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	f3c3 2302 	ubfx	r3, r3, #8, #3
HAL_NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:184
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000568:	b430      	push	{r4, r5}
NVIC_EncodePriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1967
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056a:	f1c3 0507 	rsb	r5, r3, #7
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1968
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056e:	1d1c      	adds	r4, r3, #4
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1967
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000570:	2d04      	cmp	r5, #4
 8000572:	bf28      	it	cs
 8000574:	2504      	movcs	r5, #4
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1968
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000576:	2c06      	cmp	r4, #6
 8000578:	d919      	bls.n	80005ae <HAL_NVIC_SetPriority+0x4e>
 800057a:	3b03      	subs	r3, #3
 800057c:	2401      	movs	r4, #1
 800057e:	409c      	lsls	r4, r3
 8000580:	3c01      	subs	r4, #1
 8000582:	4022      	ands	r2, r4
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1970

  return (
 8000584:	2401      	movs	r4, #1
NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1916
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000586:	2800      	cmp	r0, #0
NVIC_EncodePriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1970
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000588:	fa04 f405 	lsl.w	r4, r4, r5
 800058c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000590:	ea01 0104 	and.w	r1, r1, r4
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	ea42 0203 	orr.w	r2, r2, r3
NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1916
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800059c:	db0a      	blt.n	80005b4 <HAL_NVIC_SetPriority+0x54>
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1922
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_NVIC_SetPriority+0x6c>)
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	4403      	add	r3, r0
 80005a6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
HAL_NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:194
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005aa:	bc30      	pop	{r4, r5}
 80005ac:	4770      	bx	lr
NVIC_EncodePriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1968
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	2200      	movs	r2, #0
 80005b0:	4613      	mov	r3, r2
 80005b2:	e7e7      	b.n	8000584 <HAL_NVIC_SetPriority+0x24>
NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1918
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f000 000f 	and.w	r0, r0, #15
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_NVIC_SetPriority+0x70>)
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	4403      	add	r3, r0
 80005c0:	761a      	strb	r2, [r3, #24]
HAL_NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:194
 80005c2:	bc30      	pop	{r4, r5}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ecfc 	.word	0xe000ecfc

080005d4 <HAL_SYSTICK_Config>:
SysTick_Config():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2415
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005d4:	3801      	subs	r0, #1
 80005d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005da:	d20d      	bcs.n	80005f8 <HAL_SYSTICK_Config+0x24>
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2420
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <HAL_SYSTICK_Config+0x28>)
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2422
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005de:	2200      	movs	r2, #0
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2423
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e0:	2107      	movs	r1, #7
HAL_SYSTICK_Config():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:248
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005e2:	b430      	push	{r4, r5}
NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1918
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	25f0      	movs	r5, #240	; 0xf0
 80005e6:	4c06      	ldr	r4, [pc, #24]	; (8000600 <HAL_SYSTICK_Config+0x2c>)
SysTick_Config():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2420
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	6058      	str	r0, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2426
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ea:	4610      	mov	r0, r2
NVIC_SetPriority():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:1918
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
SysTick_Config():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2422
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	609a      	str	r2, [r3, #8]
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2423
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	6019      	str	r1, [r3, #0]
HAL_SYSTICK_Config():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:250
   return SysTick_Config(TicksNumb);
}
 80005f4:	bc30      	pop	{r4, r5}
 80005f6:	4770      	bx	lr
SysTick_Config():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2417
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80005f8:	2001      	movs	r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	e000e010 	.word	0xe000e010
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <HAL_SYSTICK_CLKSourceConfig>:
HAL_SYSTICK_CLKSourceConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:438
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_SYSTICK_CLKSourceConfig+0x14>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:436
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000606:	2804      	cmp	r0, #4
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:438
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	bf0c      	ite	eq
 800060c:	f043 0304 	orreq.w	r3, r3, #4
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_cortex.c:442
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000610:	f023 0304 	bicne.w	r3, r3, #4
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4770      	bx	lr
 8000618:	e000e010 	.word	0xe000e010

0800061c <HAL_PWREx_EnableOverDrive>:
HAL_PWREx_EnableOverDrive():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:270
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800061c:	b530      	push	{r4, r5, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:273
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <HAL_PWREx_EnableOverDrive+0x74>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:270
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000620:	b083      	sub	sp, #12
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:273
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	2100      	movs	r1, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:276
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_PWREx_EnableOverDrive+0x78>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:273
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	9101      	str	r1, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:281
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000628:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:273
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800062c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000630:	6411      	str	r1, [r2, #64]	; 0x40
 8000632:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000634:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	9a01      	ldr	r2, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:276
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000642:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:279

  /* Get tick */
  tickstart = HAL_GetTick();
 8000644:	f7ff ff72 	bl	800052c <HAL_GetTick>
 8000648:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:281

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800064a:	e005      	b.n	8000658 <HAL_PWREx_EnableOverDrive+0x3c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:283
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800064c:	f7ff ff6e 	bl	800052c <HAL_GetTick>
 8000650:	1b40      	subs	r0, r0, r5
 8000652:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000656:	d818      	bhi.n	800068a <HAL_PWREx_EnableOverDrive+0x6e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:281
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000658:	6863      	ldr	r3, [r4, #4]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_PWREx_EnableOverDrive+0x78>)
 800065c:	03d9      	lsls	r1, r3, #15
 800065e:	d5f5      	bpl.n	800064c <HAL_PWREx_EnableOverDrive+0x30>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:290
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000660:	6813      	ldr	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:295

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000662:	4614      	mov	r4, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:290
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:293

  /* Get tick */
  tickstart = HAL_GetTick();
 800066a:	f7ff ff5f 	bl	800052c <HAL_GetTick>
 800066e:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:295

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000670:	e005      	b.n	800067e <HAL_PWREx_EnableOverDrive+0x62>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:297
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000672:	f7ff ff5b 	bl	800052c <HAL_GetTick>
 8000676:	1b40      	subs	r0, r0, r5
 8000678:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800067c:	d805      	bhi.n	800068a <HAL_PWREx_EnableOverDrive+0x6e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:295
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800067e:	6863      	ldr	r3, [r4, #4]
 8000680:	039b      	lsls	r3, r3, #14
 8000682:	d5f6      	bpl.n	8000672 <HAL_PWREx_EnableOverDrive+0x56>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:302
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000684:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:303
}
 8000686:	b003      	add	sp, #12
 8000688:	bd30      	pop	{r4, r5, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:285

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 800068a:	2003      	movs	r0, #3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_pwr_ex.c:303
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800068c:	b003      	add	sp, #12
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <HAL_RCC_OscConfig>:
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:259
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000698:	6803      	ldr	r3, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:252
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:259
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800069c:	07de      	lsls	r6, r3, #31
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:252
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800069e:	b083      	sub	sp, #12
 80006a0:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:259
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006a2:	d551      	bpl.n	8000748 <HAL_RCC_OscConfig+0xb0>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:264
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006a4:	49aa      	ldr	r1, [pc, #680]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 80006a6:	688a      	ldr	r2, [r1, #8]
 80006a8:	f002 020c 	and.w	r2, r2, #12
 80006ac:	2a04      	cmp	r2, #4
 80006ae:	f000 8131 	beq.w	8000914 <HAL_RCC_OscConfig+0x27c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:265
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006b2:	688a      	ldr	r2, [r1, #8]
 80006b4:	f002 020c 	and.w	r2, r2, #12
 80006b8:	2a08      	cmp	r2, #8
 80006ba:	f000 8127 	beq.w	800090c <HAL_RCC_OscConfig+0x274>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:275
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80006be:	4ba4      	ldr	r3, [pc, #656]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 80006c0:	681a      	ldr	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:281
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006c2:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:275
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80006c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006d8:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:278
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006da:	f7ff ff27 	bl	800052c <HAL_GetTick>
 80006de:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:281
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e0:	e006      	b.n	80006f0 <HAL_RCC_OscConfig+0x58>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:283
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006e2:	f7ff ff23 	bl	800052c <HAL_GetTick>
 80006e6:	1b80      	subs	r0, r0, r6
 80006e8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80006ec:	f200 80fd 	bhi.w	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:281
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	4a97      	ldr	r2, [pc, #604]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 80006f4:	0399      	lsls	r1, r3, #14
 80006f6:	d4f4      	bmi.n	80006e2 <HAL_RCC_OscConfig+0x4a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:290
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f8:	6813      	ldr	r3, [r2, #0]
 80006fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	686b      	ldr	r3, [r5, #4]
 8000702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000706:	f000 81aa 	beq.w	8000a5e <HAL_RCC_OscConfig+0x3c6>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:290 (discriminator 2)
 800070a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800070e:	f000 8149 	beq.w	80009a4 <HAL_RCC_OscConfig+0x30c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:290 (discriminator 4)
 8000712:	6811      	ldr	r1, [r2, #0]
 8000714:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000718:	6011      	str	r1, [r2, #0]
 800071a:	6811      	ldr	r1, [r2, #0]
 800071c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000720:	6011      	str	r1, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:293 (discriminator 4)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 8146 	bne.w	80009b4 <HAL_RCC_OscConfig+0x31c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:313
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000728:	4614      	mov	r4, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:310
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800072a:	f7ff feff 	bl	800052c <HAL_GetTick>
 800072e:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:313
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000730:	e006      	b.n	8000740 <HAL_RCC_OscConfig+0xa8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:315
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000732:	f7ff fefb 	bl	800052c <HAL_GetTick>
 8000736:	1b80      	subs	r0, r0, r6
 8000738:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800073c:	f200 80d5 	bhi.w	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:313
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	039b      	lsls	r3, r3, #14
 8000744:	d4f5      	bmi.n	8000732 <HAL_RCC_OscConfig+0x9a>
 8000746:	682b      	ldr	r3, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:324
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000748:	079f      	lsls	r7, r3, #30
 800074a:	d531      	bpl.n	80007b0 <HAL_RCC_OscConfig+0x118>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:331
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800074c:	4a80      	ldr	r2, [pc, #512]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 800074e:	6891      	ldr	r1, [r2, #8]
 8000750:	f011 0f0c 	tst.w	r1, #12
 8000754:	f000 80d0 	beq.w	80008f8 <HAL_RCC_OscConfig+0x260>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:332
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000758:	6891      	ldr	r1, [r2, #8]
 800075a:	f001 010c 	and.w	r1, r1, #12
 800075e:	2908      	cmp	r1, #8
 8000760:	f000 80c6 	beq.w	80008f0 <HAL_RCC_OscConfig+0x258>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:349
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000764:	68eb      	ldr	r3, [r5, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 8108 	beq.w	800097c <HAL_RCC_OscConfig+0x2e4>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:352
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800076c:	4b78      	ldr	r3, [pc, #480]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 800076e:	681a      	ldr	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:358

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000770:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:352
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000772:	f042 0201 	orr.w	r2, r2, #1
 8000776:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:355

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000778:	f7ff fed8 	bl	800052c <HAL_GetTick>
 800077c:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:358

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800077e:	e005      	b.n	800078c <HAL_RCC_OscConfig+0xf4>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:360
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000780:	f7ff fed4 	bl	800052c <HAL_GetTick>
 8000784:	1b80      	subs	r0, r0, r6
 8000786:	2864      	cmp	r0, #100	; 0x64
 8000788:	f200 80af 	bhi.w	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:358

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	4a70      	ldr	r2, [pc, #448]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 8000790:	0798      	lsls	r0, r3, #30
 8000792:	d5f5      	bpl.n	8000780 <HAL_RCC_OscConfig+0xe8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:367
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000794:	6813      	ldr	r3, [r2, #0]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000796:	21f8      	movs	r1, #248	; 0xf8
 8000798:	fa91 f1a1 	rbit	r1, r1
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:367
 800079c:	6928      	ldr	r0, [r5, #16]
 800079e:	fab1 f181 	clz	r1, r1
 80007a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007a6:	fa00 f101 	lsl.w	r1, r0, r1
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	682b      	ldr	r3, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:389
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007b0:	071a      	lsls	r2, r3, #28
 80007b2:	d421      	bmi.n	80007f8 <HAL_RCC_OscConfig+0x160>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:431
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007b4:	075c      	lsls	r4, r3, #29
 80007b6:	d438      	bmi.n	800082a <HAL_RCC_OscConfig+0x192>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:503
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007b8:	69aa      	ldr	r2, [r5, #24]
 80007ba:	b1d2      	cbz	r2, 80007f2 <HAL_RCC_OscConfig+0x15a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:506
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007bc:	4b64      	ldr	r3, [pc, #400]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 80007be:	6899      	ldr	r1, [r3, #8]
 80007c0:	f001 010c 	and.w	r1, r1, #12
 80007c4:	2908      	cmp	r1, #8
 80007c6:	f000 809e 	beq.w	8000906 <HAL_RCC_OscConfig+0x26e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:508
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ca:	2a02      	cmp	r2, #2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:518
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007cc:	681a      	ldr	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:524
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007ce:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:518
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80007d4:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:508
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007d6:	f000 80fc 	beq.w	80009d2 <HAL_RCC_OscConfig+0x33a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:559
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007da:	f7ff fea7 	bl	800052c <HAL_GetTick>
 80007de:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:562
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007e0:	e004      	b.n	80007ec <HAL_RCC_OscConfig+0x154>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:564
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e2:	f7ff fea3 	bl	800052c <HAL_GetTick>
 80007e6:	1b40      	subs	r0, r0, r5
 80007e8:	2864      	cmp	r0, #100	; 0x64
 80007ea:	d87e      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:562
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	019b      	lsls	r3, r3, #6
 80007f0:	d4f7      	bmi.n	80007e2 <HAL_RCC_OscConfig+0x14a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:576
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80007f2:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:577
}
 80007f4:	b003      	add	sp, #12
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:395
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80007f8:	696b      	ldr	r3, [r5, #20]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8094 	beq.w	8000928 <HAL_RCC_OscConfig+0x290>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:398
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000800:	4b53      	ldr	r3, [pc, #332]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 8000802:	6f5a      	ldr	r2, [r3, #116]	; 0x74
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:404
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000804:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:398

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000806:	f042 0201 	orr.w	r2, r2, #1
 800080a:	675a      	str	r2, [r3, #116]	; 0x74
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:401
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800080c:	f7ff fe8e 	bl	800052c <HAL_GetTick>
 8000810:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:404
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000812:	e004      	b.n	800081e <HAL_RCC_OscConfig+0x186>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:406
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000814:	f7ff fe8a 	bl	800052c <HAL_GetTick>
 8000818:	1b80      	subs	r0, r0, r6
 800081a:	2864      	cmp	r0, #100	; 0x64
 800081c:	d865      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:404
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800081e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000820:	079b      	lsls	r3, r3, #30
 8000822:	d5f7      	bpl.n	8000814 <HAL_RCC_OscConfig+0x17c>
 8000824:	682b      	ldr	r3, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:431
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000826:	075c      	lsls	r4, r3, #29
 8000828:	d5c6      	bpl.n	80007b8 <HAL_RCC_OscConfig+0x120>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:437
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4a49      	ldr	r2, [pc, #292]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 800082c:	2100      	movs	r1, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:440
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800082e:	4b49      	ldr	r3, [pc, #292]	; (8000954 <HAL_RCC_OscConfig+0x2bc>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:437
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	9101      	str	r1, [sp, #4]
 8000832:	6c11      	ldr	r1, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:445
    PWR->CR1 |= PWR_CR1_DBP;
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000834:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:437
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800083a:	6411      	str	r1, [r2, #64]	; 0x40
 800083c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800083e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000842:	9201      	str	r2, [sp, #4]
 8000844:	9a01      	ldr	r2, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:440
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800084c:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:443
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800084e:	f7ff fe6d 	bl	800052c <HAL_GetTick>
 8000852:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:445
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000854:	e004      	b.n	8000860 <HAL_RCC_OscConfig+0x1c8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:447
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000856:	f7ff fe69 	bl	800052c <HAL_GetTick>
 800085a:	1b80      	subs	r0, r0, r6
 800085c:	2864      	cmp	r0, #100	; 0x64
 800085e:	d844      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:445
    PWR->CR1 |= PWR_CR1_DBP;
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	05d8      	lsls	r0, r3, #23
 8000864:	d5f7      	bpl.n	8000856 <HAL_RCC_OscConfig+0x1be>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:454
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:462
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000868:	f241 3788 	movw	r7, #5000	; 0x1388
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:454
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800086c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:460
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800086e:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:454
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000870:	f022 0201 	bic.w	r2, r2, #1
 8000874:	671a      	str	r2, [r3, #112]	; 0x70
 8000876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000878:	f022 0204 	bic.w	r2, r2, #4
 800087c:	671a      	str	r2, [r3, #112]	; 0x70
 800087e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000880:	f022 0201 	bic.w	r2, r2, #1
 8000884:	671a      	str	r2, [r3, #112]	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:457
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000886:	f7ff fe51 	bl	800052c <HAL_GetTick>
 800088a:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:460
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800088c:	e004      	b.n	8000898 <HAL_RCC_OscConfig+0x200>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:462
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088e:	f7ff fe4d 	bl	800052c <HAL_GetTick>
 8000892:	1b80      	subs	r0, r0, r6
 8000894:	42b8      	cmp	r0, r7
 8000896:	d828      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:460
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000898:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 800089c:	0799      	lsls	r1, r3, #30
 800089e:	d4f6      	bmi.n	800088e <HAL_RCC_OscConfig+0x1f6>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:469
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80008a2:	f023 0301 	bic.w	r3, r3, #1
 80008a6:	6713      	str	r3, [r2, #112]	; 0x70
 80008a8:	68ab      	ldr	r3, [r5, #8]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	f000 80f8 	beq.w	8000aa0 <HAL_RCC_OscConfig+0x408>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:469 (discriminator 2)
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	f000 80dd 	beq.w	8000a70 <HAL_RCC_OscConfig+0x3d8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:469 (discriminator 4)
 80008b6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80008b8:	f021 0104 	bic.w	r1, r1, #4
 80008bc:	6711      	str	r1, [r2, #112]	; 0x70
 80008be:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80008c0:	f021 0101 	bic.w	r1, r1, #1
 80008c4:	6711      	str	r1, [r2, #112]	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:471 (discriminator 4)
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 80da 	bne.w	8000a80 <HAL_RCC_OscConfig+0x3e8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:491
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008cc:	4614      	mov	r4, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:493
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ce:	f241 3688 	movw	r6, #5000	; 0x1388
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:488
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008d2:	f7ff fe2b 	bl	800052c <HAL_GetTick>
 80008d6:	4607      	mov	r7, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:491
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80008da:	0798      	lsls	r0, r3, #30
 80008dc:	f57f af6c 	bpl.w	80007b8 <HAL_RCC_OscConfig+0x120>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:493
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e0:	f7ff fe24 	bl	800052c <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	42b0      	cmp	r0, r6
 80008e8:	d9f6      	bls.n	80008d8 <HAL_RCC_OscConfig+0x240>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:285
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80008ea:	2003      	movs	r0, #3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:577
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008ec:	b003      	add	sp, #12
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:332 (discriminator 1)
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f0:	6852      	ldr	r2, [r2, #4]
 80008f2:	0256      	lsls	r6, r2, #9
 80008f4:	f53f af36 	bmi.w	8000764 <HAL_RCC_OscConfig+0xcc>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:335
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	0794      	lsls	r4, r2, #30
 80008fe:	d52b      	bpl.n	8000958 <HAL_RCC_OscConfig+0x2c0>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:335 (discriminator 1)
 8000900:	68ea      	ldr	r2, [r5, #12]
 8000902:	2a01      	cmp	r2, #1
 8000904:	d028      	beq.n	8000958 <HAL_RCC_OscConfig+0x2c0>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:269
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8000906:	2001      	movs	r0, #1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:577
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000908:	b003      	add	sp, #12
 800090a:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:265 (discriminator 1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800090c:	684a      	ldr	r2, [r1, #4]
 800090e:	0254      	lsls	r4, r2, #9
 8000910:	f57f aed5 	bpl.w	80006be <HAL_RCC_OscConfig+0x26>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:267
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	0390      	lsls	r0, r2, #14
 800091a:	f57f af15 	bpl.w	8000748 <HAL_RCC_OscConfig+0xb0>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:267 (discriminator 1)
 800091e:	686a      	ldr	r2, [r5, #4]
 8000920:	2a00      	cmp	r2, #0
 8000922:	f47f af11 	bne.w	8000748 <HAL_RCC_OscConfig+0xb0>
 8000926:	e7ee      	b.n	8000906 <HAL_RCC_OscConfig+0x26e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:415
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_RCC_OscConfig+0x2b8>)
 800092a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:421
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800092c:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:415
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800092e:	f022 0201 	bic.w	r2, r2, #1
 8000932:	675a      	str	r2, [r3, #116]	; 0x74
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:418
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000934:	f7ff fdfa 	bl	800052c <HAL_GetTick>
 8000938:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:421
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800093a:	e004      	b.n	8000946 <HAL_RCC_OscConfig+0x2ae>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:423
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800093c:	f7ff fdf6 	bl	800052c <HAL_GetTick>
 8000940:	1b80      	subs	r0, r0, r6
 8000942:	2864      	cmp	r0, #100	; 0x64
 8000944:	d8d1      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:421
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000946:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000948:	079f      	lsls	r7, r3, #30
 800094a:	d4f7      	bmi.n	800093c <HAL_RCC_OscConfig+0x2a4>
 800094c:	e76a      	b.n	8000824 <HAL_RCC_OscConfig+0x18c>
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:343
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000958:	4c56      	ldr	r4, [pc, #344]	; (8000ab4 <HAL_RCC_OscConfig+0x41c>)
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 800095a:	22f8      	movs	r2, #248	; 0xf8
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:343
 800095c:	6821      	ldr	r1, [r4, #0]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 800095e:	fa92 f2a2 	rbit	r2, r2
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:343
 8000962:	6928      	ldr	r0, [r5, #16]
 8000964:	fab2 f282 	clz	r2, r2
 8000968:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800096c:	fa00 f202 	lsl.w	r2, r0, r2
 8000970:	430a      	orrs	r2, r1
 8000972:	6022      	str	r2, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:389
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000974:	071a      	lsls	r2, r3, #28
 8000976:	f57f af1d 	bpl.w	80007b4 <HAL_RCC_OscConfig+0x11c>
 800097a:	e73d      	b.n	80007f8 <HAL_RCC_OscConfig+0x160>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:372
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <HAL_RCC_OscConfig+0x41c>)
 800097e:	681a      	ldr	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:378

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000980:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:372
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000982:	f022 0201 	bic.w	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:375

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000988:	f7ff fdd0 	bl	800052c <HAL_GetTick>
 800098c:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:378
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	e004      	b.n	800099a <HAL_RCC_OscConfig+0x302>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:380
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fdcc 	bl	800052c <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2864      	cmp	r0, #100	; 0x64
 8000998:	d8a7      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:378

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	0799      	lsls	r1, r3, #30
 800099e:	d4f7      	bmi.n	8000990 <HAL_RCC_OscConfig+0x2f8>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	e705      	b.n	80007b0 <HAL_RCC_OscConfig+0x118>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:290 (discriminator 3)
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b2:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:296
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009b4:	f7ff fdba 	bl	800052c <HAL_GetTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:299
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b8:	4c3e      	ldr	r4, [pc, #248]	; (8000ab4 <HAL_RCC_OscConfig+0x41c>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:296
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009ba:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:299
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009bc:	e005      	b.n	80009ca <HAL_RCC_OscConfig+0x332>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:301
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009be:	f7ff fdb5 	bl	800052c <HAL_GetTick>
 80009c2:	1b80      	subs	r0, r0, r6
 80009c4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009c8:	d88f      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:299
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	039a      	lsls	r2, r3, #14
 80009ce:	d5f6      	bpl.n	80009be <HAL_RCC_OscConfig+0x326>
 80009d0:	e6b9      	b.n	8000746 <HAL_RCC_OscConfig+0xae>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:521
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009d2:	f7ff fdab 	bl	800052c <HAL_GetTick>
 80009d6:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:524
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80009d8:	e004      	b.n	80009e4 <HAL_RCC_OscConfig+0x34c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:526
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009da:	f7ff fda7 	bl	800052c <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2864      	cmp	r0, #100	; 0x64
 80009e2:	d882      	bhi.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:524
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	4a33      	ldr	r2, [pc, #204]	; (8000ab4 <HAL_RCC_OscConfig+0x41c>)
 80009e8:	0199      	lsls	r1, r3, #6
 80009ea:	d4f6      	bmi.n	80009da <HAL_RCC_OscConfig+0x342>
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 80009ec:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 80009f0:	fa94 f4a4 	rbit	r4, r4
 80009f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:533
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009f8:	fab4 fc84 	clz	ip, r4
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 80009fc:	fa93 f3a3 	rbit	r3, r3
 8000a00:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:533
 8000a04:	fab3 f683 	clz	r6, r3
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000a08:	fa90 f0a0 	rbit	r0, r0
HAL_RCC_OscConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:533
 8000a0c:	69e9      	ldr	r1, [r5, #28]
 8000a0e:	fab0 fe80 	clz	lr, r0
 8000a12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a14:	6a2f      	ldr	r7, [r5, #32]
 8000a16:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8000a18:	430f      	orrs	r7, r1
 8000a1a:	0859      	lsrs	r1, r3, #1
 8000a1c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000a1e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000a22:	3901      	subs	r1, #1
 8000a24:	f047 5500 	orr.w	r5, r7, #536870912	; 0x20000000
 8000a28:	fa00 f00e 	lsl.w	r0, r0, lr
 8000a2c:	4325      	orrs	r5, r4
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:545

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a32:	4614      	mov	r4, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:533
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a34:	432b      	orrs	r3, r5
 8000a36:	4303      	orrs	r3, r0
 8000a38:	6053      	str	r3, [r2, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:539
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a40:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:542

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a42:	f7ff fd73 	bl	800052c <HAL_GetTick>
 8000a46:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:545
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a48:	e005      	b.n	8000a56 <HAL_RCC_OscConfig+0x3be>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:547
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4a:	f7ff fd6f 	bl	800052c <HAL_GetTick>
 8000a4e:	1b40      	subs	r0, r0, r5
 8000a50:	2864      	cmp	r0, #100	; 0x64
 8000a52:	f63f af4a 	bhi.w	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:545

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	019a      	lsls	r2, r3, #6
 8000a5a:	d5f6      	bpl.n	8000a4a <HAL_RCC_OscConfig+0x3b2>
 8000a5c:	e6c9      	b.n	80007f2 <HAL_RCC_OscConfig+0x15a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:290 (discriminator 1)
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e7a1      	b.n	80009b4 <HAL_RCC_OscConfig+0x31c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:469 (discriminator 3)
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6713      	str	r3, [r2, #112]	; 0x70
 8000a78:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6713      	str	r3, [r2, #112]	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:474
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a80:	f7ff fd54 	bl	800052c <HAL_GetTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:477
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <HAL_RCC_OscConfig+0x41c>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:474
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a86:	4607      	mov	r7, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:479
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a88:	f241 3688 	movw	r6, #5000	; 0x1388
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:477
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a8e:	079b      	lsls	r3, r3, #30
 8000a90:	f53f ae92 	bmi.w	80007b8 <HAL_RCC_OscConfig+0x120>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:479
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a94:	f7ff fd4a 	bl	800052c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	42b0      	cmp	r0, r6
 8000a9c:	d9f6      	bls.n	8000a8c <HAL_RCC_OscConfig+0x3f4>
 8000a9e:	e724      	b.n	80008ea <HAL_RCC_OscConfig+0x252>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:469 (discriminator 1)
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000aa2:	f023 0304 	bic.w	r3, r3, #4
 8000aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8000aa8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6713      	str	r3, [r2, #112]	; 0x70
 8000ab0:	e7e6      	b.n	8000a80 <HAL_RCC_OscConfig+0x3e8>
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_RCC_ClockConfig>:
HAL_RCC_ClockConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:618
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ab8:	4a6c      	ldr	r2, [pc, #432]	; (8000c6c <HAL_RCC_ClockConfig+0x1b4>)
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	428b      	cmp	r3, r1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:606
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac6:	460c      	mov	r4, r1
 8000ac8:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:618
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aca:	d20c      	bcs.n	8000ae6 <HAL_RCC_ClockConfig+0x2e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:621
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000acc:	6813      	ldr	r3, [r2, #0]
 8000ace:	f023 030f 	bic.w	r3, r3, #15
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:625
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d058      	beq.n	8000b92 <HAL_RCC_ClockConfig+0xda>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:627
    {
      return HAL_ERROR;
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:710
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ae6:	6803      	ldr	r3, [r0, #0]
 8000ae8:	079a      	lsls	r2, r3, #30
 8000aea:	d506      	bpl.n	8000afa <HAL_RCC_ClockConfig+0x42>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:713
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aec:	4860      	ldr	r0, [pc, #384]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
 8000aee:	68aa      	ldr	r2, [r5, #8]
 8000af0:	6881      	ldr	r1, [r0, #8]
 8000af2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000af6:	430a      	orrs	r2, r1
 8000af8:	6082      	str	r2, [r0, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:717
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000afa:	07df      	lsls	r7, r3, #31
 8000afc:	d524      	bpl.n	8000b48 <HAL_RCC_ClockConfig+0x90>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:722
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000afe:	686b      	ldr	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:725
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b00:	4a5b      	ldr	r2, [pc, #364]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:722
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b02:	2b01      	cmp	r3, #1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:725
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b04:	6812      	ldr	r2, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:722
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b06:	f000 808a 	beq.w	8000c1e <HAL_RCC_ClockConfig+0x166>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:731
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	f000 808e 	beq.w	8000c2c <HAL_RCC_ClockConfig+0x174>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:743
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b10:	0791      	lsls	r1, r2, #30
 8000b12:	d5e5      	bpl.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:748
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b14:	4e56      	ldr	r6, [pc, #344]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:756
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b16:	f241 3888 	movw	r8, #5000	; 0x1388
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:748
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b1a:	68b2      	ldr	r2, [r6, #8]
 8000b1c:	f022 0203 	bic.w	r2, r2, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60b3      	str	r3, [r6, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:750
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b24:	f7ff fd02 	bl	800052c <HAL_GetTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:752
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b28:	686b      	ldr	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:750
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b2a:	4607      	mov	r7, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:752
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d065      	beq.n	8000bfc <HAL_RCC_ClockConfig+0x144>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:762
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d105      	bne.n	8000b40 <HAL_RCC_ClockConfig+0x88>
 8000b34:	e06d      	b.n	8000c12 <HAL_RCC_ClockConfig+0x15a>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:776
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b36:	f7ff fcf9 	bl	800052c <HAL_GetTick>
 8000b3a:	1bc0      	subs	r0, r0, r7
 8000b3c:	4540      	cmp	r0, r8
 8000b3e:	d872      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:774
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b40:	68b3      	ldr	r3, [r6, #8]
 8000b42:	f013 0f0c 	tst.w	r3, #12
 8000b46:	d1f6      	bne.n	8000b36 <HAL_RCC_ClockConfig+0x7e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:785
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b48:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <HAL_RCC_ClockConfig+0x1b4>)
 8000b4a:	6813      	ldr	r3, [r2, #0]
 8000b4c:	f023 030f 	bic.w	r3, r3, #15
 8000b50:	4323      	orrs	r3, r4
 8000b52:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:789
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b54:	6813      	ldr	r3, [r2, #0]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	429c      	cmp	r4, r3
 8000b5c:	d1c0      	bne.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
 8000b5e:	682b      	ldr	r3, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:796
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b60:	075a      	lsls	r2, r3, #29
 8000b62:	d506      	bpl.n	8000b72 <HAL_RCC_ClockConfig+0xba>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:799
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b64:	4842      	ldr	r0, [pc, #264]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
 8000b66:	68ea      	ldr	r2, [r5, #12]
 8000b68:	6881      	ldr	r1, [r0, #8]
 8000b6a:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	6082      	str	r2, [r0, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:803
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b72:	071b      	lsls	r3, r3, #28
 8000b74:	d507      	bpl.n	8000b86 <HAL_RCC_ClockConfig+0xce>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:806
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b76:	4a3e      	ldr	r2, [pc, #248]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
 8000b78:	6929      	ldr	r1, [r5, #16]
 8000b7a:	6893      	ldr	r3, [r2, #8]
 8000b7c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b84:	6093      	str	r3, [r2, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:810
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff fca2 	bl	80004d0 <HAL_InitTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:812
  
  return HAL_OK;
 8000b8c:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:813
}
 8000b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:631
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	079f      	lsls	r7, r3, #30
 8000b96:	d506      	bpl.n	8000ba6 <HAL_RCC_ClockConfig+0xee>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:634
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b98:	4835      	ldr	r0, [pc, #212]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
 8000b9a:	68aa      	ldr	r2, [r5, #8]
 8000b9c:	6881      	ldr	r1, [r0, #8]
 8000b9e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	6082      	str	r2, [r0, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:638
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	07de      	lsls	r6, r3, #31
 8000ba8:	d5da      	bpl.n	8000b60 <HAL_RCC_ClockConfig+0xa8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:643
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000baa:	686b      	ldr	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:646
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bac:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:643
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	2b01      	cmp	r3, #1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:646
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb0:	6812      	ldr	r2, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:643
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb2:	d058      	beq.n	8000c66 <HAL_RCC_ClockConfig+0x1ae>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:652
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d053      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x1a8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:664
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	0791      	lsls	r1, r2, #30
 8000bba:	d591      	bpl.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:670
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bbc:	4c2c      	ldr	r4, [pc, #176]	; (8000c70 <HAL_RCC_ClockConfig+0x1b8>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:678
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bbe:	f241 3788 	movw	r7, #5000	; 0x1388
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:670
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc2:	68a2      	ldr	r2, [r4, #8]
 8000bc4:	f022 0203 	bic.w	r2, r2, #3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60a3      	str	r3, [r4, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:672
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bcc:	f7ff fcae 	bl	800052c <HAL_GetTick>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:674
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd0:	686b      	ldr	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:672
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bd2:	4606      	mov	r6, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:674
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d032      	beq.n	8000c3e <HAL_RCC_ClockConfig+0x186>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:684
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d105      	bne.n	8000be8 <HAL_RCC_ClockConfig+0x130>
 8000bdc:	e03a      	b.n	8000c54 <HAL_RCC_ClockConfig+0x19c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:698
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bde:	f7ff fca5 	bl	800052c <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	42b8      	cmp	r0, r7
 8000be6:	d81e      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:696
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	f013 0f0c 	tst.w	r3, #12
 8000bee:	d1f6      	bne.n	8000bde <HAL_RCC_ClockConfig+0x126>
 8000bf0:	e7b5      	b.n	8000b5e <HAL_RCC_ClockConfig+0xa6>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:756
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf2:	f7ff fc9b 	bl	800052c <HAL_GetTick>
 8000bf6:	1bc0      	subs	r0, r0, r7
 8000bf8:	4540      	cmp	r0, r8
 8000bfa:	d814      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:754
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bfc:	68b3      	ldr	r3, [r6, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d1f5      	bne.n	8000bf2 <HAL_RCC_ClockConfig+0x13a>
 8000c06:	e79f      	b.n	8000b48 <HAL_RCC_ClockConfig+0x90>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:766
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c08:	f7ff fc90 	bl	800052c <HAL_GetTick>
 8000c0c:	1bc0      	subs	r0, r0, r7
 8000c0e:	4540      	cmp	r0, r8
 8000c10:	d809      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:764
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c12:	68b3      	ldr	r3, [r6, #8]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d1f5      	bne.n	8000c08 <HAL_RCC_ClockConfig+0x150>
 8000c1c:	e794      	b.n	8000b48 <HAL_RCC_ClockConfig+0x90>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:725
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	0396      	lsls	r6, r2, #14
 8000c20:	f53f af78 	bmi.w	8000b14 <HAL_RCC_ClockConfig+0x5c>
 8000c24:	e75c      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:680
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
 8000c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:734
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c2c:	0190      	lsls	r0, r2, #6
 8000c2e:	f53f af71 	bmi.w	8000b14 <HAL_RCC_ClockConfig+0x5c>
 8000c32:	e755      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:678
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c34:	f7ff fc7a 	bl	800052c <HAL_GetTick>
 8000c38:	1b80      	subs	r0, r0, r6
 8000c3a:	42b8      	cmp	r0, r7
 8000c3c:	d8f3      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:676
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c3e:	68a3      	ldr	r3, [r4, #8]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d1f5      	bne.n	8000c34 <HAL_RCC_ClockConfig+0x17c>
 8000c48:	e789      	b.n	8000b5e <HAL_RCC_ClockConfig+0xa6>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:688
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4a:	f7ff fc6f 	bl	800052c <HAL_GetTick>
 8000c4e:	1b80      	subs	r0, r0, r6
 8000c50:	42b8      	cmp	r0, r7
 8000c52:	d8e8      	bhi.n	8000c26 <HAL_RCC_ClockConfig+0x16e>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:686
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c54:	68a3      	ldr	r3, [r4, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d1f5      	bne.n	8000c4a <HAL_RCC_ClockConfig+0x192>
 8000c5e:	e77e      	b.n	8000b5e <HAL_RCC_ClockConfig+0xa6>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:655
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c60:	0190      	lsls	r0, r2, #6
 8000c62:	d4ab      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x104>
 8000c64:	e73c      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:646
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c66:	0394      	lsls	r4, r2, #14
 8000c68:	d4a8      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x104>
 8000c6a:	e739      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x28>
 8000c6c:	40023c00 	.word	0x40023c00
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_RCC_GetHCLKFreq>:
HAL_RCC_GetHCLKFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:1015
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c74:	b430      	push	{r4, r5}
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:964
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c76:	4c2b      	ldr	r4, [pc, #172]	; (8000d24 <HAL_RCC_GetHCLKFreq+0xb0>)
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d03c      	beq.n	8000cfc <HAL_RCC_GetHCLKFreq+0x88>
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d012      	beq.n	8000cac <HAL_RCC_GetHCLKFreq+0x38>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:968
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_RCC_GetHCLKFreq+0xb4>)
HAL_RCC_GetHCLKFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:1016
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000c88:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <HAL_RCC_GetHCLKFreq+0xb0>)
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000c8a:	21f0      	movs	r1, #240	; 0xf0
HAL_RCC_GetHCLKFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:1016
 8000c8c:	6892      	ldr	r2, [r2, #8]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000c8e:	fa91 f1a1 	rbit	r1, r1
HAL_RCC_GetHCLKFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:1016
 8000c92:	fab1 f181 	clz	r1, r1
 8000c96:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <HAL_RCC_GetHCLKFreq+0xb8>)
 8000c9c:	40ca      	lsrs	r2, r1
 8000c9e:	4924      	ldr	r1, [pc, #144]	; (8000d30 <HAL_RCC_GetHCLKFreq+0xbc>)
 8000ca0:	5c80      	ldrb	r0, [r0, r2]
 8000ca2:	fa23 f000 	lsr.w	r0, r3, r0
 8000ca6:	6008      	str	r0, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:1018
  return SystemCoreClock;
}
 8000ca8:	bc30      	pop	{r4, r5}
 8000caa:	4770      	bx	lr
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:980
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cac:	6861      	ldr	r1, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:981
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000cae:	6865      	ldr	r5, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:980
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cb0:	f001 023f 	and.w	r2, r1, #63	; 0x3f
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:981
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000cb4:	026b      	lsls	r3, r5, #9
 8000cb6:	d423      	bmi.n	8000d00 <HAL_RCC_GetHCLKFreq+0x8c>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:989
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000cb8:	6860      	ldr	r0, [r4, #4]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000cbe:	fa93 f3a3 	rbit	r3, r3
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:989
 8000cc2:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 8000cc6:	4918      	ldr	r1, [pc, #96]	; (8000d28 <HAL_RCC_GetHCLKFreq+0xb4>)
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	4004      	ands	r4, r0
 8000cce:	fbb1 f1f2 	udiv	r1, r1, r2
 8000cd2:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd6:	fb01 f203 	mul.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:991
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_RCC_GetHCLKFreq+0xb0>)
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000cdc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:991
 8000ce0:	685b      	ldr	r3, [r3, #4]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000ce2:	fa90 f0a0 	rbit	r0, r0
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:993
      
      sysclockfreq = pllvco/pllp;
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:991
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000cea:	fab0 f080 	clz	r0, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:993
      
      sysclockfreq = pllvco/pllp;
 8000cee:	fa23 f000 	lsr.w	r0, r3, r0
 8000cf2:	3001      	adds	r0, #1
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	fbb2 f3f0 	udiv	r3, r2, r0
 8000cfa:	e7c5      	b.n	8000c88 <HAL_RCC_GetHCLKFreq+0x14>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:973
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_RCC_GetHCLKFreq+0xc0>)
 8000cfe:	e7c3      	b.n	8000c88 <HAL_RCC_GetHCLKFreq+0x14>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:984
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000d00:	6861      	ldr	r1, [r4, #4]
__RBIT():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:531
 8000d02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d06:	fa93 f3a3 	rbit	r3, r3
HAL_RCC_GetSysClockFreq():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_rcc.c:984
 8000d0a:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8000d0e:	4c09      	ldr	r4, [pc, #36]	; (8000d34 <HAL_RCC_GetHCLKFreq+0xc0>)
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	400d      	ands	r5, r1
 8000d16:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d1a:	fa25 f303 	lsr.w	r3, r5, r3
 8000d1e:	fb01 f203 	mul.w	r2, r1, r3
 8000d22:	e7da      	b.n	8000cda <HAL_RCC_GetHCLKFreq+0x66>
 8000d24:	40023800 	.word	0x40023800
 8000d28:	00f42400 	.word	0x00f42400
 8000d2c:	08004160 	.word	0x08004160
 8000d30:	20000000 	.word	0x20000000
 8000d34:	017d7840 	.word	0x017d7840

08000d38 <HAL_TIM_Base_MspInit>:
HAL_TIM_Base_MspInit():
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <HAL_TIM_Base_Init>:
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:204
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	f000 8087 	beq.w	8000e50 <HAL_TIM_Base_Init+0x114>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:202
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:214
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d44:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d48:	4604      	mov	r4, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d076      	beq.n	8000e3c <HAL_TIM_Base_Init+0x100>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:224
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000d4e:	6823      	ldr	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:221
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000d50:	2102      	movs	r1, #2
TIM_Base_SetConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4726
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000d52:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <HAL_TIM_Base_Init+0x118>)
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:221
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000d58:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
TIM_Base_SetConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4726
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000d5c:	eba3 0602 	sub.w	r6, r3, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4723
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000d60:	681a      	ldr	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4726
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000d62:	fab6 f686 	clz	r6, r6
 8000d66:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8000d6a:	d04a      	beq.n	8000e02 <HAL_TIM_Base_Init+0xc6>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d148      	bne.n	8000e02 <HAL_TIM_Base_Init+0xc6>
 8000d70:	4939      	ldr	r1, [pc, #228]	; (8000e58 <HAL_TIM_Base_Init+0x11c>)
 8000d72:	483a      	ldr	r0, [pc, #232]	; (8000e5c <HAL_TIM_Base_Init+0x120>)
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d064      	beq.n	8000e42 <HAL_TIM_Base_Init+0x106>
 8000d78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d060      	beq.n	8000e42 <HAL_TIM_Base_Init+0x106>
 8000d80:	1a1f      	subs	r7, r3, r0
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_TIM_Base_Init+0x124>)
 8000d84:	fab7 f787 	clz	r7, r7
 8000d88:	097f      	lsrs	r7, r7, #5
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	bf14      	ite	ne
 8000d8e:	4639      	movne	r1, r7
 8000d90:	f047 0101 	orreq.w	r1, r7, #1
 8000d94:	b161      	cbz	r1, 8000db0 <HAL_TIM_Base_Init+0x74>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4733
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d96:	4930      	ldr	r1, [pc, #192]	; (8000e58 <HAL_TIM_Base_Init+0x11c>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4729
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4730
    tmpcr1 |= Structure->CounterMode;
 8000d9c:	68a0      	ldr	r0, [r4, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4733
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000d9e:	428b      	cmp	r3, r1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4730
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000da0:	ea42 0200 	orr.w	r2, r2, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4733
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000da4:	d036      	beq.n	8000e14 <HAL_TIM_Base_Init+0xd8>
 8000da6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d032      	beq.n	8000e14 <HAL_TIM_Base_Init+0xd8>
 8000dae:	4639      	mov	r1, r7
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <HAL_TIM_Base_Init+0x124>)
 8000db2:	4283      	cmp	r3, r0
 8000db4:	bf14      	ite	ne
 8000db6:	4608      	movne	r0, r1
 8000db8:	f041 0001 	orreq.w	r0, r1, #1
 8000dbc:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 8000dc0:	d144      	bne.n	8000e4c <HAL_TIM_Base_Init+0x110>
 8000dc2:	4928      	ldr	r1, [pc, #160]	; (8000e64 <HAL_TIM_Base_Init+0x128>)
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <HAL_TIM_Base_Init+0x12c>)
 8000dc6:	4283      	cmp	r3, r0
 8000dc8:	bf18      	it	ne
 8000dca:	428b      	cmpne	r3, r1
 8000dcc:	bf0c      	ite	eq
 8000dce:	2101      	moveq	r1, #1
 8000dd0:	2100      	movne	r1, #0
 8000dd2:	d01f      	beq.n	8000e14 <HAL_TIM_Base_Init+0xd8>
 8000dd4:	4f25      	ldr	r7, [pc, #148]	; (8000e6c <HAL_TIM_Base_Init+0x130>)
 8000dd6:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8000dda:	4283      	cmp	r3, r0
 8000ddc:	bf18      	it	ne
 8000dde:	42bb      	cmpne	r3, r7
 8000de0:	bf0c      	ite	eq
 8000de2:	2701      	moveq	r7, #1
 8000de4:	2700      	movne	r7, #0
 8000de6:	d031      	beq.n	8000e4c <HAL_TIM_Base_Init+0x110>
 8000de8:	4921      	ldr	r1, [pc, #132]	; (8000e70 <HAL_TIM_Base_Init+0x134>)
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d012      	beq.n	8000e14 <HAL_TIM_Base_Init+0xd8>
 8000dee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d00e      	beq.n	8000e14 <HAL_TIM_Base_Init+0xd8>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4743
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000df6:	68e0      	ldr	r0, [r4, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4746
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000df8:	6861      	ldr	r1, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4740
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000dfa:	601a      	str	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4743

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dfc:	62d8      	str	r0, [r3, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4746
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000dfe:	6299      	str	r1, [r3, #40]	; 0x28
 8000e00:	e013      	b.n	8000e2a <HAL_TIM_Base_Init+0xee>
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <HAL_TIM_Base_Init+0x120>)
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4729
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4730
    tmpcr1 |= Structure->CounterMode;
 8000e08:	68a1      	ldr	r1, [r4, #8]
 8000e0a:	1a1f      	subs	r7, r3, r0
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	fab7 f787 	clz	r7, r7
 8000e12:	097f      	lsrs	r7, r7, #5
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4737
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e14:	6921      	ldr	r1, [r4, #16]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4736
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4743
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e1a:	68e5      	ldr	r5, [r4, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4746
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e1c:	6860      	ldr	r0, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4737
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e1e:	4311      	orrs	r1, r2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4740
  }

  TIMx->CR1 = tmpcr1;
 8000e20:	6019      	str	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4743

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e22:	62dd      	str	r5, [r3, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4746
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e24:	6298      	str	r0, [r3, #40]	; 0x28
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4748
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000e26:	b936      	cbnz	r6, 8000e36 <HAL_TIM_Base_Init+0xfa>
 8000e28:	b92f      	cbnz	r7, 8000e36 <HAL_TIM_Base_Init+0xfa>
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4756
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e2a:	2201      	movs	r2, #1
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:229
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
 8000e2c:	2000      	movs	r0, #0
TIM_Base_SetConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4756
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e2e:	615a      	str	r2, [r3, #20]
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:227
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e30:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:229
  
  return HAL_OK;
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
TIM_Base_SetConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4751
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e36:	6962      	ldr	r2, [r4, #20]
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3a:	e7f6      	b.n	8000e2a <HAL_TIM_Base_Init+0xee>
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:217
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e3c:	f7ff ff7c 	bl	8000d38 <HAL_TIM_Base_MspInit>
 8000e40:	e785      	b.n	8000d4e <HAL_TIM_Base_Init+0x12>
 8000e42:	1a1f      	subs	r7, r3, r0
 8000e44:	fab7 f787 	clz	r7, r7
 8000e48:	097f      	lsrs	r7, r7, #5
 8000e4a:	e7a4      	b.n	8000d96 <HAL_TIM_Base_Init+0x5a>
TIM_Base_SetConfig():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:4733
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e4c:	460f      	mov	r7, r1
 8000e4e:	e7e1      	b.n	8000e14 <HAL_TIM_Base_Init+0xd8>
HAL_TIM_Base_Init():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:206
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:230
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000e52:	4770      	bx	lr
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40000400 	.word	0x40000400
 8000e5c:	40010400 	.word	0x40010400
 8000e60:	40000c00 	.word	0x40000c00
 8000e64:	40014000 	.word	0x40014000
 8000e68:	40014400 	.word	0x40014400
 8000e6c:	40014800 	.word	0x40014800
 8000e70:	40001c00 	.word	0x40001c00

08000e74 <HAL_TIM_Base_Start>:
HAL_TIM_Base_Start():
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:299
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000e74:	4603      	mov	r3, r0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:304
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e76:	2202      	movs	r2, #2
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:314
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8000e78:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:307
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000e7a:	6819      	ldr	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:299
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000e7c:	b410      	push	{r4}
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:310
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e7e:	2401      	movs	r4, #1
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:304
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:307
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000e84:	680a      	ldr	r2, [r1, #0]
 8000e86:	4322      	orrs	r2, r4
 8000e88:	600a      	str	r2, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:310
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e8a:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
/Users/lix/Projects/luna/performance/Release/../system/src/stm32f7-hal/stm32f7xx_hal_tim.c:314
  
  /* Return function status */
  return HAL_OK;
}
 8000e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_sbrk>:
_sbrk():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:30
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <_sbrk+0x34>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:23
// The definitions used here should be kept in sync with the
// stack definitions in the linker script.

caddr_t
_sbrk(int incr)
{
 8000e96:	b508      	push	{r3, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:30
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 8000e98:	6813      	ldr	r3, [r2, #0]
 8000e9a:	b18b      	cbz	r3, 8000ec0 <_sbrk+0x2c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:41

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 8000e9c:	3003      	adds	r0, #3
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:42
  if (current_heap_end + incr > &_Heap_Limit)
 8000e9e:	490b      	ldr	r1, [pc, #44]	; (8000ecc <_sbrk+0x38>)
 8000ea0:	f020 0003 	bic.w	r0, r0, #3
 8000ea4:	4418      	add	r0, r3
 8000ea6:	4288      	cmp	r0, r1
 8000ea8:	d802      	bhi.n	8000eb0 <_sbrk+0x1c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:59
      errno = ENOMEM;
      return (caddr_t) - 1;
#endif
    }

  current_heap_end += incr;
 8000eaa:	6010      	str	r0, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:62

  return (caddr_t) current_block_address;
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd08      	pop	{r3, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:54
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 8000eb0:	f002 f99c 	bl	80031ec <__errno>
 8000eb4:	220c      	movs	r2, #12
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:55
      return (caddr_t) - 1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:54
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
      // Heap has overflowed
      errno = ENOMEM;
 8000eba:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:62
    }

  current_heap_end += incr;

  return (caddr_t) current_block_address;
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	bd08      	pop	{r3, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_sbrk.c:32
  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
    {
      current_heap_end = &_Heap_Begin;
 8000ec0:	4903      	ldr	r1, [pc, #12]	; (8000ed0 <_sbrk+0x3c>)
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	6011      	str	r1, [r2, #0]
 8000ec6:	e7e9      	b.n	8000e9c <_sbrk+0x8>
 8000ec8:	20000080 	.word	0x20000080
 8000ecc:	2004fc00 	.word	0x2004fc00
 8000ed0:	200009d8 	.word	0x200009d8

08000ed4 <_exit>:
_exit():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:523
  /* There is only one SWI for both _exit and _kill. For _exit, call
   the SWI with the second argument set to -1, an invalid value for
   signum, so that the SWI handler can distinguish the two calls.
   Note: The RDI implementation of _kill throws away both its
   arguments.  */
  report_exception (
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <_exit+0x18>)
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
static inline int
__attribute__ ((always_inline))
call_host (int reason, void* arg)
{
  int value;
  asm volatile (
 8000ed6:	2518      	movs	r5, #24
_exit():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:523
 8000ed8:	4c05      	ldr	r4, [pc, #20]	; (8000ef0 <_exit+0x1c>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:517

// ----------------------------------------------------------------------------

void
_exit (int status)
{
 8000eda:	b500      	push	{lr}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:523
  /* There is only one SWI for both _exit and _kill. For _exit, call
   the SWI with the second argument set to -1, an invalid value for
   signum, so that the SWI handler can distinguish the two calls.
   Note: The RDI implementation of _kill throws away both its
   arguments.  */
  report_exception (
 8000edc:	2800      	cmp	r0, #0
 8000ede:	bf18      	it	ne
 8000ee0:	461c      	movne	r4, r3
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	beab      	bkpt	0x00ab
 8000ee8:	4604      	mov	r4, r0
 8000eea:	e7fe      	b.n	8000eea <_exit+0x16>
 8000eec:	00020023 	.word	0x00020023
 8000ef0:	00020026 	.word	0x00020026

08000ef4 <initialise_monitor_handles>:
initialise_monitor_handles():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:635
  return i;
}

void
initialise_monitor_handles (void)
{
 8000ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:652

  int volatile block[3];

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 0; /* mode "r" */
 8000ef8:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:635
  return i;
}

void
initialise_monitor_handles (void)
{
 8000efa:	b084      	sub	sp, #16
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:650
   * different descriptor for standard error.
   */

  int volatile block[3];

  block[0] = (int) ":tt";
 8000efc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000f90 <initialise_monitor_handles+0x9c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:651
  block[2] = 3; /* length of filename */
 8000f00:	2703      	movs	r7, #3
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000f02:	2401      	movs	r4, #1
 8000f04:	ae01      	add	r6, sp, #4
initialise_monitor_handles():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:650
   * different descriptor for standard error.
   */

  int volatile block[3];

  block[0] = (int) ":tt";
 8000f06:	f8cd 8004 	str.w	r8, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:651
  block[2] = 3; /* length of filename */
 8000f0a:	9703      	str	r7, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:652
  block[1] = 0; /* mode "r" */
 8000f0c:	9302      	str	r3, [sp, #8]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4631      	mov	r1, r6
 8000f12:	beab      	bkpt	0x00ab
 8000f14:	4681      	mov	r9, r0
initialise_monitor_handles():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:653
  monitor_stdin = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f16:	4d1b      	ldr	r5, [pc, #108]	; (8000f84 <initialise_monitor_handles+0x90>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:657

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 4; /* mode "w" */
 8000f18:	2304      	movs	r3, #4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:655
  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 0; /* mode "r" */
  monitor_stdin = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);

  block[0] = (int) ":tt";
 8000f1a:	f8cd 8004 	str.w	r8, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:653
  int volatile block[3];

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 0; /* mode "r" */
  monitor_stdin = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f1e:	f8c5 9000 	str.w	r9, [r5]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:656

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
 8000f22:	9703      	str	r7, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:657
  block[1] = 4; /* mode "w" */
 8000f24:	9302      	str	r3, [sp, #8]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000f26:	4620      	mov	r0, r4
 8000f28:	4631      	mov	r1, r6
 8000f2a:	beab      	bkpt	0x00ab
 8000f2c:	4682      	mov	sl, r0
initialise_monitor_handles():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:658
  monitor_stdout = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f2e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8000f94 <initialise_monitor_handles+0xa0>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:662

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 8; /* mode "a" */
 8000f32:	2308      	movs	r3, #8
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:660
  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 4; /* mode "w" */
  monitor_stdout = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);

  block[0] = (int) ":tt";
 8000f34:	f8cd 8004 	str.w	r8, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:658
  monitor_stdin = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 4; /* mode "w" */
  monitor_stdout = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f38:	f8c9 a000 	str.w	sl, [r9]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:661

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
 8000f3c:	9703      	str	r7, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:662
  block[1] = 8; /* mode "a" */
 8000f3e:	9302      	str	r3, [sp, #8]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000f40:	4620      	mov	r0, r4
 8000f42:	4631      	mov	r1, r6
 8000f44:	beab      	bkpt	0x00ab
 8000f46:	4604      	mov	r4, r0
initialise_monitor_handles():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:663
  monitor_stderr = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <initialise_monitor_handles+0x94>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:666

  /* If we failed to open stderr, redirect to stdout. */
  if (monitor_stderr == -1)
 8000f4a:	1c62      	adds	r2, r4, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:668
    {
      monitor_stderr = monitor_stdout;
 8000f4c:	f8d9 6000 	ldr.w	r6, [r9]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:663
  monitor_stdout = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);

  block[0] = (int) ":tt";
  block[2] = 3; /* length of filename */
  block[1] = 8; /* mode "a" */
  monitor_stderr = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
 8000f50:	601c      	str	r4, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:666

  /* If we failed to open stderr, redirect to stdout. */
  if (monitor_stderr == -1)
 8000f52:	d014      	beq.n	8000f7e <initialise_monitor_handles+0x8a>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:668 (discriminator 1)
    {
      monitor_stderr = monitor_stdout;
 8000f54:	2300      	movs	r3, #0
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <initialise_monitor_handles+0x98>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:673 (discriminator 1)
    }

  for (i = 0; i < MAX_OPEN_FILES; i++)
    {
      openfiles[i].handle = -1;
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:673 (discriminator 3)
 8000f5c:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:671 (discriminator 3)
  if (monitor_stderr == -1)
    {
      monitor_stderr = monitor_stdout;
    }

  for (i = 0; i < MAX_OPEN_FILES; i++)
 8000f60:	3301      	adds	r3, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:673 (discriminator 3)
    {
      openfiles[i].handle = -1;
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <initialise_monitor_handles+0x98>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:671 (discriminator 3)
  if (monitor_stderr == -1)
    {
      monitor_stderr = monitor_stdout;
    }

  for (i = 0; i < MAX_OPEN_FILES; i++)
 8000f64:	2b14      	cmp	r3, #20
 8000f66:	d1f9      	bne.n	8000f5c <initialise_monitor_handles+0x68>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:677
    {
      openfiles[i].handle = -1;
    }

  openfiles[0].handle = monitor_stdin;
  openfiles[0].pos = 0;
 8000f68:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:676
  for (i = 0; i < MAX_OPEN_FILES; i++)
    {
      openfiles[i].handle = -1;
    }

  openfiles[0].handle = monitor_stdin;
 8000f6a:	6829      	ldr	r1, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:678
  openfiles[0].pos = 0;
  openfiles[1].handle = monitor_stdout;
 8000f6c:	6096      	str	r6, [r2, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:676
  for (i = 0; i < MAX_OPEN_FILES; i++)
    {
      openfiles[i].handle = -1;
    }

  openfiles[0].handle = monitor_stdin;
 8000f6e:	6011      	str	r1, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:680
  openfiles[0].pos = 0;
  openfiles[1].handle = monitor_stdout;
  openfiles[1].pos = 0;
  openfiles[2].handle = monitor_stderr;
 8000f70:	6114      	str	r4, [r2, #16]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:677
    {
      openfiles[i].handle = -1;
    }

  openfiles[0].handle = monitor_stdin;
  openfiles[0].pos = 0;
 8000f72:	6053      	str	r3, [r2, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:679
  openfiles[1].handle = monitor_stdout;
  openfiles[1].pos = 0;
 8000f74:	60d3      	str	r3, [r2, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:681
  openfiles[2].handle = monitor_stderr;
  openfiles[2].pos = 0;
 8000f76:	6153      	str	r3, [r2, #20]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:682
}
 8000f78:	b004      	add	sp, #16
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:668
  monitor_stderr = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);

  /* If we failed to open stderr, redirect to stdout. */
  if (monitor_stderr == -1)
    {
      monitor_stderr = monitor_stdout;
 8000f7e:	4634      	mov	r4, r6
 8000f80:	601e      	str	r6, [r3, #0]
 8000f82:	e7e7      	b.n	8000f54 <initialise_monitor_handles+0x60>
 8000f84:	20000100 	.word	0x20000100
 8000f88:	20000104 	.word	0x20000104
 8000f8c:	20000108 	.word	0x20000108
 8000f90:	08004170 	.word	0x08004170
 8000f94:	20000084 	.word	0x20000084

08000f98 <__initialize_args>:
__initialize_args():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:421
  int size;
} CommandLineBlock;

void
__initialize_args (int* p_argc, char*** p_argv)
{
 8000f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:435
  int argc = 0;
  int isInArgument = 0;

  CommandLineBlock cmdBlock;
  cmdBlock.pCommandLine = args_buf;
  cmdBlock.size = sizeof(args_buf) - 1;
 8000f9c:	234f      	movs	r3, #79	; 0x4f
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:421
  int size;
} CommandLineBlock;

void
__initialize_args (int* p_argc, char*** p_argv)
{
 8000f9e:	b083      	sub	sp, #12
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:434

  int argc = 0;
  int isInArgument = 0;

  CommandLineBlock cmdBlock;
  cmdBlock.pCommandLine = args_buf;
 8000fa0:	4c32      	ldr	r4, [pc, #200]	; (800106c <__initialize_args+0xd4>)
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:421
  int size;
} CommandLineBlock;

void
__initialize_args (int* p_argc, char*** p_argv)
{
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	460e      	mov	r6, r1
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000fa6:	2715      	movs	r7, #21
__initialize_args():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:434

  int argc = 0;
  int isInArgument = 0;

  CommandLineBlock cmdBlock;
  cmdBlock.pCommandLine = args_buf;
 8000fa8:	9400      	str	r4, [sp, #0]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000faa:	46e8      	mov	r8, sp
__initialize_args():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:435
  cmdBlock.size = sizeof(args_buf) - 1;
 8000fac:	9301      	str	r3, [sp, #4]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8000fae:	4638      	mov	r0, r7
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	beab      	bkpt	0x00ab
 8000fb4:	4607      	mov	r7, r0
__initialize_args():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:438

  int ret = call_host (SEMIHOSTING_SYS_GET_CMDLINE, &cmdBlock);
  if (ret == 0)
 8000fb6:	b18f      	cbz	r7, 8000fdc <__initialize_args+0x44>
 8000fb8:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8001070 <__initialize_args+0xd8>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:496
    }

  if (argc == 0)
    {
      // No args found in string, return a single empty name.
      args_buf[0] = '\0';
 8000fbc:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:498
      argv_buf[0] = &args_buf[0];
      ++argc;
 8000fbe:	2701      	movs	r7, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:497

  if (argc == 0)
    {
      // No args found in string, return a single empty name.
      args_buf[0] = '\0';
      argv_buf[0] = &args_buf[0];
 8000fc0:	f8cc 4000 	str.w	r4, [ip]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:496
    }

  if (argc == 0)
    {
      // No args found in string, return a single empty name.
      args_buf[0] = '\0';
 8000fc4:	7023      	strb	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:502
      argv_buf[0] = &args_buf[0];
      ++argc;
    }

  // Must end the array with a null pointer.
  argv_buf[argc] = NULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f84c 3027 	str.w	r3, [ip, r7, lsl #2]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:504

  *p_argc = argc;
 8000fcc:	602f      	str	r7, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:505
  *p_argv = &argv_buf[0];
 8000fce:	f8c6 c000 	str.w	ip, [r6]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:508

  // temporary here
  initialise_monitor_handles ();
 8000fd2:	f7ff ff8f 	bl	8000ef4 <initialise_monitor_handles>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:511

  return;
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:446
      // In case the host send more than we can chew, limit the
      // string to our buffer.
      args_buf[ARGS_BUF_ARRAY_SIZE - 1] = '\0';

      // The command line is a null terminated string
      char* p = cmdBlock.pCommandLine;
 8000fdc:	9b00      	ldr	r3, [sp, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:443
  if (ret == 0)
    {

      // In case the host send more than we can chew, limit the
      // string to our buffer.
      args_buf[ARGS_BUF_ARRAY_SIZE - 1] = '\0';
 8000fde:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:451
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 8000fe2:	f993 2000 	ldrsb.w	r2, [r3]
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d0e6      	beq.n	8000fb8 <__initialize_args+0x20>
 8000fea:	4638      	mov	r0, r7
 8000fec:	f8df c080 	ldr.w	ip, [pc, #128]	; 8001070 <__initialize_args+0xd8>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:483
		  delim = '\0';
		  *p = '\0';
		  isInArgument = 0;
		}
	    }
	  else if (isblank(ch))
 8000ff0:	f8df e080 	ldr.w	lr, [pc, #128]	; 8001074 <__initialize_args+0xdc>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:451
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 8000ff4:	46b9      	mov	r9, r7
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:486
		}
	    }
	  else if (isblank(ch))
	    {
	      delim = '\0';
	      *p = '\0';
 8000ff6:	46b8      	mov	r8, r7
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:453
      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
	{
	  if (isInArgument == 0)
 8000ff8:	f1b9 0f00 	cmp.w	r9, #0
 8000ffc:	d11a      	bne.n	8001034 <__initialize_args+0x9c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:455
	    {
	      if (!isblank(ch))
 8000ffe:	f8de 1000 	ldr.w	r1, [lr]
 8001002:	4411      	add	r1, r2
 8001004:	7849      	ldrb	r1, [r1, #1]
 8001006:	09c9      	lsrs	r1, r1, #7
 8001008:	d10c      	bne.n	8001024 <__initialize_args+0x8c>
 800100a:	2a09      	cmp	r2, #9
 800100c:	d00a      	beq.n	8001024 <__initialize_args+0x8c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:457
		{
		  if (argc
 800100e:	2f08      	cmp	r7, #8
 8001010:	dcd9      	bgt.n	8000fc6 <__initialize_args+0x2e>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:461
		      >= (int) ((sizeof(argv_buf) / sizeof(argv_buf[0])) - 1))
		    break;

		  if (ch == '"' || ch == '\'')
 8001012:	2a22      	cmp	r2, #34	; 0x22
 8001014:	d021      	beq.n	800105a <__initialize_args+0xc2>
 8001016:	2a27      	cmp	r2, #39	; 0x27
 8001018:	d01f      	beq.n	800105a <__initialize_args+0xc2>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:471
		      ++p;                        // skip the delimiter
		      ch = *p;
		    }
		  // Remember the arg beginning address
		  argv_buf[argc++] = p;
		  isInArgument = 1;
 800101a:	f04f 0901 	mov.w	r9, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:470
		      delim = ch;
		      ++p;                        // skip the delimiter
		      ch = *p;
		    }
		  // Remember the arg beginning address
		  argv_buf[argc++] = p;
 800101e:	f84c 3027 	str.w	r3, [ip, r7, lsl #2]
 8001022:	444f      	add	r7, r9
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:451
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 8001024:	f993 2001 	ldrsb.w	r2, [r3, #1]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:489
	    {
	      delim = '\0';
	      *p = '\0';
	      isInArgument = 0;
	    }
	  ++p;
 8001028:	3301      	adds	r3, #1
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:451
      char* p = cmdBlock.pCommandLine;

      int delim = '\0';
      int ch;

      while ((ch = *p) != '\0')
 800102a:	2a00      	cmp	r2, #0
 800102c:	d1e4      	bne.n	8000ff8 <__initialize_args+0x60>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:493
	    }
	  ++p;
	}
    }

  if (argc == 0)
 800102e:	2f00      	cmp	r7, #0
 8001030:	d1c9      	bne.n	8000fc6 <__initialize_args+0x2e>
 8001032:	e7c3      	b.n	8000fbc <__initialize_args+0x24>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:474
		  // Remember the arg beginning address
		  argv_buf[argc++] = p;
		  isInArgument = 1;
		}
	    }
	  else if (delim != '\0')
 8001034:	b120      	cbz	r0, 8001040 <__initialize_args+0xa8>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:476
	    {
	      if ((ch == delim))
 8001036:	4290      	cmp	r0, r2
 8001038:	d012      	beq.n	8001060 <__initialize_args+0xc8>
 800103a:	f04f 0901 	mov.w	r9, #1
 800103e:	e7f1      	b.n	8001024 <__initialize_args+0x8c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:483
		  delim = '\0';
		  *p = '\0';
		  isInArgument = 0;
		}
	    }
	  else if (isblank(ch))
 8001040:	f8de 1000 	ldr.w	r1, [lr]
 8001044:	4411      	add	r1, r2
 8001046:	7849      	ldrb	r1, [r1, #1]
 8001048:	09c9      	lsrs	r1, r1, #7
 800104a:	d101      	bne.n	8001050 <__initialize_args+0xb8>
 800104c:	2a09      	cmp	r2, #9
 800104e:	d1f4      	bne.n	800103a <__initialize_args+0xa2>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:486
	    {
	      delim = '\0';
	      *p = '\0';
 8001050:	f883 8000 	strb.w	r8, [r3]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:487
	      isInArgument = 0;
 8001054:	f04f 0900 	mov.w	r9, #0
 8001058:	e7e4      	b.n	8001024 <__initialize_args+0x8c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:466
		  if (ch == '"' || ch == '\'')
		    {
		      // Remember the delimiter to search for the
		      // corresponding terminator
		      delim = ch;
		      ++p;                        // skip the delimiter
 800105a:	3301      	adds	r3, #1
 800105c:	4610      	mov	r0, r2
 800105e:	e7dc      	b.n	800101a <__initialize_args+0x82>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:478
	    }
	  else if (delim != '\0')
	    {
	      if ((ch == delim))
		{
		  delim = '\0';
 8001060:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:479
		  *p = '\0';
 8001062:	f883 8000 	strb.w	r8, [r3]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:480
		  isInArgument = 0;
 8001066:	4681      	mov	r9, r0
 8001068:	e7dc      	b.n	8001024 <__initialize_args+0x8c>
 800106a:	bf00      	nop
 800106c:	20000088 	.word	0x20000088
 8001070:	200000d8 	.word	0x200000d8
 8001074:	20000014 	.word	0x20000014

08001078 <_read>:
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <_read+0x8c>)
_read():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:731
/* fd, is a valid user file handle.
 Translates the return of _swiread into
 bytes read. */
int
_read (int fd, char* ptr, int len)
{
 800107a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800107e:	4606      	mov	r6, r0
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001080:	6818      	ldr	r0, [r3, #0]
_read():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:731
/* fd, is a valid user file handle.
 Translates the return of _swiread into
 bytes read. */
int
_read (int fd, char* ptr, int len)
{
 8001082:	b084      	sub	sp, #16
 8001084:	460c      	mov	r4, r1
 8001086:	4617      	mov	r7, r2
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001088:	b108      	cbz	r0, 800108e <_read+0x16>
 800108a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800108c:	b1e3      	cbz	r3, 80010c8 <_read+0x50>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 800108e:	2e13      	cmp	r6, #19
 8001090:	d81e      	bhi.n	80010d0 <_read+0x58>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 8001092:	4d1d      	ldr	r5, [pc, #116]	; (8001108 <_read+0x90>)
 8001094:	f855 3036 	ldr.w	r3, [r5, r6, lsl #3]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	d019      	beq.n	80010d0 <_read+0x58>
_swiread():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:720
_swiread (int fh, char* ptr, int len)
{
  int block[3];

  block[0] = fh;
  block[1] = (int) ptr;
 800109c:	9402      	str	r4, [sp, #8]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800109e:	f04f 0806 	mov.w	r8, #6
_swiread():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:719
int
_swiread (int fh, char* ptr, int len)
{
  int block[3];

  block[0] = fh;
 80010a2:	9301      	str	r3, [sp, #4]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80010a4:	ac01      	add	r4, sp, #4
_swiread():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:721
  block[1] = (int) ptr;
  block[2] = len;
 80010a6:	9703      	str	r7, [sp, #12]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80010a8:	4640      	mov	r0, r8
 80010aa:	4621      	mov	r1, r4
 80010ac:	beab      	bkpt	0x00ab
 80010ae:	4604      	mov	r4, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 80010b0:	1c63      	adds	r3, r4, #1
 80010b2:	d017      	beq.n	80010e4 <_read+0x6c>
_read():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:749
  if (res == -1)
    {
      return res;
    }

  pfd->pos += len - res;
 80010b4:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 80010b8:	1b3a      	subs	r2, r7, r4
 80010ba:	686b      	ldr	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:754

  /* res == len is not an error,
   at least if we want feof() to work.  */
  return len - res;
}
 80010bc:	4610      	mov	r0, r2
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:749
  if (res == -1)
    {
      return res;
    }

  pfd->pos += len - res;
 80010be:	4413      	add	r3, r2
 80010c0:	606b      	str	r3, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:754

  /* res == len is not an error,
   at least if we want feof() to work.  */
  return len - res;
}
 80010c2:	b004      	add	sp, #16
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80010c8:	f002 f8d6 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 80010cc:	2e13      	cmp	r6, #19
 80010ce:	d9e0      	bls.n	8001092 <_read+0x1a>
_read():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:738
  struct fdent *pfd;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 80010d0:	f002 f88c 	bl	80031ec <__errno>
 80010d4:	2309      	movs	r3, #9
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:739
      return -1;
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:738
  struct fdent *pfd;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 80010da:	6003      	str	r3, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:754
  pfd->pos += len - res;

  /* res == len is not an error,
   at least if we want feof() to work.  */
  return len - res;
}
 80010dc:	4610      	mov	r0, r2
 80010de:	b004      	add	sp, #16
 80010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80010e4:	f002 f882 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80010e8:	2513      	movs	r5, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80010ea:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80010ec:	2700      	movs	r7, #0
 80010ee:	4628      	mov	r0, r5
 80010f0:	4639      	mov	r1, r7
 80010f2:	beab      	bkpt	0x00ab
 80010f4:	4605      	mov	r5, r0
_swiread():
 80010f6:	4622      	mov	r2, r4
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80010f8:	6035      	str	r5, [r6, #0]
_read():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:754
  pfd->pos += len - res;

  /* res == len is not an error,
   at least if we want feof() to work.  */
  return len - res;
}
 80010fa:	4610      	mov	r0, r2
 80010fc:	b004      	add	sp, #16
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001102:	bf00      	nop
 8001104:	20000078 	.word	0x20000078
 8001108:	20000108 	.word	0x20000108

0800110c <_lseek>:
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <_lseek+0xec>)
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:826
    }
}

int
_lseek (int fd, int ptr, int dir)
{
 800110e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001112:	4680      	mov	r8, r0
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001114:	6818      	ldr	r0, [r3, #0]
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:826
    }
}

int
_lseek (int fd, int ptr, int dir)
{
 8001116:	b083      	sub	sp, #12
 8001118:	460e      	mov	r6, r1
 800111a:	4614      	mov	r4, r2
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 800111c:	b110      	cbz	r0, 8001124 <_lseek+0x18>
 800111e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001120:	2b00      	cmp	r3, #0
 8001122:	d03c      	beq.n	800119e <_lseek+0x92>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 8001124:	f1b8 0f13 	cmp.w	r8, #19
 8001128:	d83e      	bhi.n	80011a8 <_lseek+0x9c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 800112a:	4f34      	ldr	r7, [pc, #208]	; (80011fc <_lseek+0xf0>)
 800112c:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	d039      	beq.n	80011a8 <_lseek+0x9c>
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:772
      errno = EBADF;
      return -1;
    }

  /* Valid whence? */
  if ((dir != SEEK_CUR) && (dir != SEEK_SET) && (dir != SEEK_END))
 8001134:	2c02      	cmp	r4, #2
 8001136:	d82b      	bhi.n	8001190 <_lseek+0x84>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:779
      errno = EINVAL;
      return -1;
    }

  /* Convert SEEK_CUR to SEEK_SET */
  if (dir == SEEK_CUR)
 8001138:	2c01      	cmp	r4, #1
 800113a:	d024      	beq.n	8001186 <_lseek+0x7a>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:796
        }
      dir = SEEK_SET;
    }

  int block[2];
  if (dir == SEEK_END)
 800113c:	2c02      	cmp	r4, #2
 800113e:	d013      	beq.n	8001168 <_lseek+0x5c>
 8001140:	46e9      	mov	r9, sp
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:808
        }
      ptr += res;
    }

  /* This code only does absolute seeks.  */
  block[0] = pfd->handle;
 8001142:	9300      	str	r3, [sp, #0]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001144:	240a      	movs	r4, #10
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:809
  block[1] = ptr;
 8001146:	9601      	str	r6, [sp, #4]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001148:	4620      	mov	r0, r4
 800114a:	4649      	mov	r1, r9
 800114c:	beab      	bkpt	0x00ab
 800114e:	4604      	mov	r4, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 8001150:	1c63      	adds	r3, r4, #1
 8001152:	d033      	beq.n	80011bc <_lseek+0xb0>
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:813
  block[0] = pfd->handle;
  block[1] = ptr;
  res = checkerror (call_host (SEMIHOSTING_SYS_SEEK, block));

  /* At this point ptr is the current file position. */
  if (res >= 0)
 8001154:	2c00      	cmp	r4, #0
 8001156:	db4b      	blt.n	80011f0 <_lseek+0xe4>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:815
    {
      pfd->pos = ptr;
 8001158:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:816
      return ptr;
 800115c:	4634      	mov	r4, r6
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:815
  res = checkerror (call_host (SEMIHOSTING_SYS_SEEK, block));

  /* At this point ptr is the current file position. */
  if (res >= 0)
    {
      pfd->pos = ptr;
 800115e:	607e      	str	r6, [r7, #4]
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:828

int
_lseek (int fd, int ptr, int dir)
{
  return _swilseek (fd, ptr, dir);
}
 8001160:	4620      	mov	r0, r4
 8001162:	b003      	add	sp, #12
 8001164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:798
    }

  int block[2];
  if (dir == SEEK_END)
    {
      block[0] = pfd->handle;
 8001168:	f10d 0908 	add.w	r9, sp, #8
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800116c:	240c      	movs	r4, #12
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:798
 800116e:	f849 3d08 	str.w	r3, [r9, #-8]!
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001172:	4620      	mov	r0, r4
 8001174:	4649      	mov	r1, r9
 8001176:	beab      	bkpt	0x00ab
 8001178:	4605      	mov	r5, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 800117a:	1c6a      	adds	r2, r5, #1
 800117c:	d02c      	beq.n	80011d8 <_lseek+0xcc>
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:804
      res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, block));
      if (res == -1)
        {
          return -1;
        }
      ptr += res;
 800117e:	442e      	add	r6, r5
 8001180:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
 8001184:	e7dd      	b.n	8001142 <_lseek+0x36>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:781
    }

  /* Convert SEEK_CUR to SEEK_SET */
  if (dir == SEEK_CUR)
    {
      ptr = pfd->pos + ptr;
 8001186:	eb07 02c8 	add.w	r2, r7, r8, lsl #3
 800118a:	6852      	ldr	r2, [r2, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:783
      /* The resulting file offset would be negative. */
      if (ptr < 0)
 800118c:	18b6      	adds	r6, r6, r2
 800118e:	d5d7      	bpl.n	8001140 <_lseek+0x34>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:785
        {
          errno = EINVAL;
 8001190:	f002 f82c 	bl	80031ec <__errno>
 8001194:	2316      	movs	r3, #22
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:790
          if ((pfd->pos > 0) && (ptr > 0))
            {
              errno = EOVERFLOW;
            }
          return -1;
 8001196:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:785
    {
      ptr = pfd->pos + ptr;
      /* The resulting file offset would be negative. */
      if (ptr < 0)
        {
          errno = EINVAL;
 800119a:	6003      	str	r3, [r0, #0]
 800119c:	e7e0      	b.n	8001160 <_lseek+0x54>
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 800119e:	f002 f86b 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 80011a2:	f1b8 0f13 	cmp.w	r8, #19
 80011a6:	d9c0      	bls.n	800112a <_lseek+0x1e>
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:767

  /* Valid file descriptor? */
  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 80011a8:	f002 f820 	bl	80031ec <__errno>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:768
      return -1;
 80011ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:767

  /* Valid file descriptor? */
  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 80011b0:	2309      	movs	r3, #9
 80011b2:	6003      	str	r3, [r0, #0]
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:828

int
_lseek (int fd, int ptr, int dir)
{
  return _swilseek (fd, ptr, dir);
}
 80011b4:	4620      	mov	r0, r4
 80011b6:	b003      	add	sp, #12
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80011bc:	f002 f816 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80011c0:	2513      	movs	r5, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80011c2:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80011c4:	2700      	movs	r7, #0
 80011c6:	4628      	mov	r0, r5
 80011c8:	4639      	mov	r1, r7
 80011ca:	beab      	bkpt	0x00ab
 80011cc:	4605      	mov	r5, r0
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:828

int
_lseek (int fd, int ptr, int dir)
{
  return _swilseek (fd, ptr, dir);
}
 80011ce:	4620      	mov	r0, r4
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80011d0:	6035      	str	r5, [r6, #0]
_lseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:828

int
_lseek (int fd, int ptr, int dir)
{
  return _swilseek (fd, ptr, dir);
}
 80011d2:	b003      	add	sp, #12
 80011d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80011d8:	f002 f808 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80011dc:	2413      	movs	r4, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80011de:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80011e0:	2700      	movs	r7, #0
 80011e2:	4620      	mov	r0, r4
 80011e4:	4639      	mov	r1, r7
 80011e6:	beab      	bkpt	0x00ab
 80011e8:	4604      	mov	r4, r0
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80011ea:	6034      	str	r4, [r6, #0]
_swilseek():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:802
    {
      block[0] = pfd->handle;
      res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, block));
      if (res == -1)
        {
          return -1;
 80011ec:	462c      	mov	r4, r5
 80011ee:	e7b7      	b.n	8001160 <_lseek+0x54>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:820
      pfd->pos = ptr;
      return ptr;
    }
  else
    {
      return -1;
 80011f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80011f4:	e7b4      	b.n	8001160 <_lseek+0x54>
 80011f6:	bf00      	nop
 80011f8:	20000078 	.word	0x20000078
 80011fc:	20000108 	.word	0x20000108

08001200 <_write>:
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <_write+0xb8>)
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:847
}

/* fd, is a user file descriptor. */
int
_write (int fd, char* ptr, int len)
{
 8001202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	4607      	mov	r7, r0
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001208:	6818      	ldr	r0, [r3, #0]
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:847
}

/* fd, is a user file descriptor. */
int
_write (int fd, char* ptr, int len)
{
 800120a:	b084      	sub	sp, #16
 800120c:	460c      	mov	r4, r1
 800120e:	4616      	mov	r6, r2
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001210:	b108      	cbz	r0, 8001216 <_write+0x16>
 8001212:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001214:	b303      	cbz	r3, 8001258 <_write+0x58>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 8001216:	2f13      	cmp	r7, #19
 8001218:	d822      	bhi.n	8001260 <_write+0x60>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 800121a:	4d28      	ldr	r5, [pc, #160]	; (80012bc <_write+0xbc>)
 800121c:	f855 3037 	ldr.w	r3, [r5, r7, lsl #3]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	d01d      	beq.n	8001260 <_write+0x60>
_swiwrite():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:838
_swiwrite (int fh, char* ptr, int len)
{
  int block[3];

  block[0] = fh;
  block[1] = (int) ptr;
 8001224:	9402      	str	r4, [sp, #8]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001226:	f04f 0805 	mov.w	r8, #5
_swiwrite():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:837
int
_swiwrite (int fh, char* ptr, int len)
{
  int block[3];

  block[0] = fh;
 800122a:	9301      	str	r3, [sp, #4]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800122c:	ac01      	add	r4, sp, #4
_swiwrite():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:839
  block[1] = (int) ptr;
  block[2] = len;
 800122e:	9603      	str	r6, [sp, #12]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001230:	4640      	mov	r0, r8
 8001232:	4621      	mov	r1, r4
 8001234:	beab      	bkpt	0x00ab
 8001236:	4604      	mov	r4, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	d02a      	beq.n	8001292 <_write+0x92>
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:861
    }

  res = _swiwrite (pfd->handle, ptr, len);

  /* Clearly an error. */
  if (res < 0)
 800123c:	2c00      	cmp	r4, #0
 800123e:	db37      	blt.n	80012b0 <_write+0xb0>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:866
    {
      return -1;
    }

  pfd->pos += len - res;
 8001240:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8001244:	1b33      	subs	r3, r6, r4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:870

  /* We wrote 0 bytes?
   Retrieve errno just in case. */
  if ((len - res) == 0)
 8001246:	42a6      	cmp	r6, r4
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:866
  if (res < 0)
    {
      return -1;
    }

  pfd->pos += len - res;
 8001248:	6842      	ldr	r2, [r0, #4]
 800124a:	441a      	add	r2, r3
 800124c:	6042      	str	r2, [r0, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:870

  /* We wrote 0 bytes?
   Retrieve errno just in case. */
  if ((len - res) == 0)
 800124e:	d011      	beq.n	8001274 <_write+0x74>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:876
    {
      return error (0);
    }

  return (len - res);
}
 8001250:	4618      	mov	r0, r3
 8001252:	b004      	add	sp, #16
 8001254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001258:	f002 f80e 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 800125c:	2f13      	cmp	r7, #19
 800125e:	d9dc      	bls.n	800121a <_write+0x1a>
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:854
  struct fdent *pfd;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 8001260:	f001 ffc4 	bl	80031ec <__errno>
 8001264:	2209      	movs	r2, #9
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:855
      return -1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:854
  struct fdent *pfd;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 800126a:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:876
    {
      return error (0);
    }

  return (len - res);
}
 800126c:	4618      	mov	r0, r3
 800126e:	b004      	add	sp, #16
 8001270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 8001274:	f001 ffba 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001278:	2513      	movs	r5, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 800127a:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800127c:	2400      	movs	r4, #0
 800127e:	4628      	mov	r0, r5
 8001280:	4621      	mov	r1, r4
 8001282:	beab      	bkpt	0x00ab
 8001284:	4605      	mov	r5, r0
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:872

  /* We wrote 0 bytes?
   Retrieve errno just in case. */
  if ((len - res) == 0)
    {
      return error (0);
 8001286:	4623      	mov	r3, r4
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 8001288:	6035      	str	r5, [r6, #0]
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:876
    {
      return error (0);
    }

  return (len - res);
}
 800128a:	4618      	mov	r0, r3
 800128c:	b004      	add	sp, #16
 800128e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 8001292:	f001 ffab 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001296:	2513      	movs	r5, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 8001298:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800129a:	2700      	movs	r7, #0
 800129c:	4628      	mov	r0, r5
 800129e:	4639      	mov	r1, r7
 80012a0:	beab      	bkpt	0x00ab
 80012a2:	4605      	mov	r5, r0
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:863
  res = _swiwrite (pfd->handle, ptr, len);

  /* Clearly an error. */
  if (res < 0)
    {
      return -1;
 80012a4:	4623      	mov	r3, r4
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80012a6:	6035      	str	r5, [r6, #0]
_write():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:876
    {
      return error (0);
    }

  return (len - res);
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	b004      	add	sp, #16
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:863
  res = _swiwrite (pfd->handle, ptr, len);

  /* Clearly an error. */
  if (res < 0)
    {
      return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b4:	e7cc      	b.n	8001250 <_write+0x50>
 80012b6:	bf00      	nop
 80012b8:	20000078 	.word	0x20000078
 80012bc:	20000108 	.word	0x20000108

080012c0 <_close>:
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <_close+0x90>)
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:967
}

/* fd, is a user file descriptor. */
int
_close (int fd)
{
 80012c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c4:	4605      	mov	r5, r0
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80012c6:	6818      	ldr	r0, [r3, #0]
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:967
}

/* fd, is a user file descriptor. */
int
_close (int fd)
{
 80012c8:	b083      	sub	sp, #12
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80012ca:	b108      	cbz	r0, 80012d0 <_close+0x10>
 80012cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80012ce:	b32b      	cbz	r3, 800131c <_close+0x5c>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 80012d0:	2d13      	cmp	r5, #19
 80012d2:	d827      	bhi.n	8001324 <_close+0x64>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 80012d4:	4f1f      	ldr	r7, [pc, #124]	; (8001354 <_close+0x94>)
 80012d6:	f857 3035 	ldr.w	r3, [r7, r5, lsl #3]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	d022      	beq.n	8001324 <_close+0x64>
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:979
      errno = EBADF;
      return -1;
    }

  /* Handle stderr == stdout. */
  if ((fd == 1 || fd == 2) && (openfiles[1].handle == openfiles[2].handle))
 80012de:	1e6a      	subs	r2, r5, #1
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d911      	bls.n	8001308 <_close+0x48>
 80012e4:	ae02      	add	r6, sp, #8
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80012e6:	2402      	movs	r4, #2
 80012e8:	f846 3d04 	str.w	r3, [r6, #-4]!
 80012ec:	4620      	mov	r0, r4
 80012ee:	4631      	mov	r1, r6
 80012f0:	beab      	bkpt	0x00ab
 80012f2:	4604      	mov	r4, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 80012f4:	1c63      	adds	r3, r4, #1
 80012f6:	d01e      	beq.n	8001336 <_close+0x76>
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:989

  /* Attempt to close the handle. */
  res = _swiclose (pfd->handle);

  /* Reclaim handle? */
  if (res == 0)
 80012f8:	b91c      	cbnz	r4, 8001302 <_close+0x42>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:991
    {
      pfd->handle = -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fe:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:995
    }

  return res;
}
 8001302:	4620      	mov	r0, r4
 8001304:	b003      	add	sp, #12
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:979 (discriminator 1)
      errno = EBADF;
      return -1;
    }

  /* Handle stderr == stdout. */
  if ((fd == 1 || fd == 2) && (openfiles[1].handle == openfiles[2].handle))
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4291      	cmp	r1, r2
 800130e:	d1e9      	bne.n	80012e4 <_close+0x24>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:981
    {
      pfd->handle = -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:982
      return 0;
 8001314:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:981
    }

  /* Handle stderr == stdout. */
  if ((fd == 1 || fd == 2) && (openfiles[1].handle == openfiles[2].handle))
    {
      pfd->handle = -1;
 8001316:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:982
      return 0;
 800131a:	e7f2      	b.n	8001302 <_close+0x42>
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 800131c:	f001 ffac 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 8001320:	2d13      	cmp	r5, #19
 8001322:	d9d7      	bls.n	80012d4 <_close+0x14>
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1012
  int res;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 8001324:	f001 ff62 	bl	80031ec <__errno>
 8001328:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800132c:	2309      	movs	r3, #9
 800132e:	6003      	str	r3, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:995
    {
      pfd->handle = -1;
    }

  return res;
}
 8001330:	4620      	mov	r0, r4
 8001332:	b003      	add	sp, #12
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 8001336:	f001 ff59 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800133a:	2513      	movs	r5, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 800133c:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800133e:	2700      	movs	r7, #0
 8001340:	4628      	mov	r0, r5
 8001342:	4639      	mov	r1, r7
 8001344:	beab      	bkpt	0x00ab
 8001346:	4605      	mov	r5, r0
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:995
    {
      pfd->handle = -1;
    }

  return res;
}
 8001348:	4620      	mov	r0, r4
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 800134a:	6035      	str	r5, [r6, #0]
_close():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:995
    {
      pfd->handle = -1;
    }

  return res;
}
 800134c:	b003      	add	sp, #12
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001350:	20000078 	.word	0x20000078
 8001354:	20000108 	.word	0x20000108

08001358 <_fstat>:
_fstat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1033
  return 0;
}

int __attribute__((weak))
_fstat (int fd, struct stat* st)
{
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	460c      	mov	r4, r1
 800135c:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1034
  memset (st, 0, sizeof(*st));
 800135e:	223c      	movs	r2, #60	; 0x3c
 8001360:	2100      	movs	r1, #0
 8001362:	4620      	mov	r0, r4
 8001364:	f002 f812 	bl	800338c <memset>
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <_fstat+0x84>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	b108      	cbz	r0, 8001372 <_fstat+0x1a>
 800136e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001370:	b1d3      	cbz	r3, 80013a8 <_fstat+0x50>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 8001372:	2d13      	cmp	r5, #19
 8001374:	d81c      	bhi.n	80013b0 <_fstat+0x58>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <_fstat+0x88>)
 8001378:	f850 3035 	ldr.w	r3, [r0, r5, lsl #3]
 800137c:	3301      	adds	r3, #1
 800137e:	d017      	beq.n	80013b0 <_fstat+0x58>
_swistat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1018
      return -1;
    }

  /* Always assume a character device,
   with 1024 byte blocks. */
  st->st_mode |= S_IFCHR;
 8001380:	6863      	ldr	r3, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1019
  st->st_blksize = 1024;
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1020
  res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, &pfd->handle));
 8001386:	eb00 06c5 	add.w	r6, r0, r5, lsl #3
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800138a:	250c      	movs	r5, #12
_swistat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1018
      return -1;
    }

  /* Always assume a character device,
   with 1024 byte blocks. */
  st->st_mode |= S_IFCHR;
 800138c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1019
  st->st_blksize = 1024;
 8001390:	62e2      	str	r2, [r4, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1018
      return -1;
    }

  /* Always assume a character device,
   with 1024 byte blocks. */
  st->st_mode |= S_IFCHR;
 8001392:	6063      	str	r3, [r4, #4]
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001394:	4628      	mov	r0, r5
 8001396:	4631      	mov	r1, r6
 8001398:	beab      	bkpt	0x00ab
 800139a:	4605      	mov	r5, r0
checkerror():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:702

/* Check the return and set errno appropriately. */
static int
checkerror (int result)
{
  if (result == -1)
 800139c:	1c6b      	adds	r3, r5, #1
 800139e:	d00f      	beq.n	80013c0 <_fstat+0x68>
_swistat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1028
      return -1;
    }

  /* Return the file size. */
  st->st_size = res;
  return 0;
 80013a0:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1027
    {
      return -1;
    }

  /* Return the file size. */
  st->st_size = res;
 80013a2:	6125      	str	r5, [r4, #16]
_fstat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1036
int __attribute__((weak))
_fstat (int fd, struct stat* st)
{
  memset (st, 0, sizeof(*st));
  return _swistat (fd, st);
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80013a8:	f001 ff66 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 80013ac:	2d13      	cmp	r5, #19
 80013ae:	d9e2      	bls.n	8001376 <_fstat+0x1e>
_swistat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1012
  int res;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 80013b0:	f001 ff1c 	bl	80031ec <__errno>
 80013b4:	2209      	movs	r2, #9
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ba:	6002      	str	r2, [r0, #0]
_fstat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1036
int __attribute__((weak))
_fstat (int fd, struct stat* st)
{
  memset (st, 0, sizeof(*st));
  return _swistat (fd, st);
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80013c0:	f001 ff14 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80013c4:	2413      	movs	r4, #19
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694
 80013c6:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 80013c8:	2700      	movs	r7, #0
 80013ca:	4620      	mov	r0, r4
 80013cc:	4639      	mov	r1, r7
 80013ce:	beab      	bkpt	0x00ab
 80013d0:	4604      	mov	r4, r0
_swistat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1023
  st->st_mode |= S_IFCHR;
  st->st_blksize = 1024;
  res = checkerror (call_host (SEMIHOSTING_SYS_FLEN, &pfd->handle));
  if (res == -1)
    {
      return -1;
 80013d2:	462b      	mov	r3, r5
error():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:694

/* Set errno and return result. */
static int
error (int result)
{
  errno = get_errno ();
 80013d4:	6034      	str	r4, [r6, #0]
_fstat():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1036
int __attribute__((weak))
_fstat (int fd, struct stat* st)
{
  memset (st, 0, sizeof(*st));
  return _swistat (fd, st);
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000078 	.word	0x20000078
 80013e0:	20000108 	.word	0x20000108

080013e4 <_isatty>:
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <_isatty+0x5c>)
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1129
  return timeval;
}

int
_isatty (int fd)
{
 80013e6:	b570      	push	{r4, r5, r6, lr}
 80013e8:	4604      	mov	r4, r0
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	b108      	cbz	r0, 80013f2 <_isatty+0xe>
 80013ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80013f0:	b1db      	cbz	r3, 800142a <_isatty+0x46>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 80013f2:	2c13      	cmp	r4, #19
 80013f4:	d81d      	bhi.n	8001432 <_isatty+0x4e>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:601
    {
      return NULL;
    }

  /* User file descriptor is open? */
  if (openfiles[fd].handle == -1)
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <_isatty+0x60>)
 80013f8:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80013fc:	3301      	adds	r3, #1
 80013fe:	d018      	beq.n	8001432 <_isatty+0x4e>
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1140
    {
      errno = EBADF;
      return 0;
    }

  tty = call_host (SEMIHOSTING_SYS_ISTTY, &pfd->handle);
 8001400:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001404:	2409      	movs	r4, #9
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	beab      	bkpt	0x00ab
 800140c:	4604      	mov	r4, r0
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1142

  if (tty == 1)
 800140e:	2c01      	cmp	r4, #1
 8001410:	d009      	beq.n	8001426 <_isatty+0x42>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1147
    {
      return 1;
    }

  errno = get_errno ();
 8001412:	f001 feeb 	bl	80031ec <__errno>
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 8001416:	2513      	movs	r5, #19
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1147
 8001418:	4606      	mov	r6, r0
call_host():
/Users/lix/Projects/luna/performance/Release/../system/include/arm/semihosting.h:80
 800141a:	2400      	movs	r4, #0
 800141c:	4628      	mov	r0, r5
 800141e:	4621      	mov	r1, r4
 8001420:	beab      	bkpt	0x00ab
 8001422:	4605      	mov	r5, r0
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1147
 8001424:	6035      	str	r5, [r6, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1149
  return 0;
}
 8001426:	4620      	mov	r0, r4
 8001428:	bd70      	pop	{r4, r5, r6, pc}
findslot():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:592
/* Return a pointer to the structure associated with
 the user file descriptor fd. */
static struct fdent*
findslot (int fd)
{
  CHECK_INIT(_REENT);
 800142a:	f001 ff25 	bl	8003278 <__sinit>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:595

  /* User file descriptor is out of range. */
  if ((unsigned int) fd >= MAX_OPEN_FILES)
 800142e:	2c13      	cmp	r4, #19
 8001430:	d9e1      	bls.n	80013f6 <_isatty+0x12>
_isatty():
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1136
  int tty;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 8001432:	f001 fedb 	bl	80031ec <__errno>
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1137
      return 0;
 8001436:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1136
  int tty;

  pfd = findslot (fd);
  if (pfd == NULL)
    {
      errno = EBADF;
 8001438:	2309      	movs	r3, #9
 800143a:	6003      	str	r3, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/newlib/_syscalls.c:1149
      return 1;
    }

  errno = get_errno ();
  return 0;
}
 800143c:	4620      	mov	r0, r4
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	20000078 	.word	0x20000078
 8001444:	20000108 	.word	0x20000108

08001448 <__initialize_hardware_early>:
__initialize_hardware_early():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/_initialize_hardware.c:36
// priority is Privileged, and the Stack is set to Main.

void
__attribute__((weak))
__initialize_hardware_early(void)
{
 8001448:	b508      	push	{r3, lr}
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/_initialize_hardware.c:38
  // Call the CSMSIS system initialisation routine.
  SystemInit();
 800144a:	f000 f811 	bl	8001470 <SystemInit>
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/_initialize_hardware.c:43

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  // Set VTOR to the actual address, provided by the linker script.
  // Override the manual, possibly wrong, SystemInit() setting.
  SCB->VTOR = (uint32_t)(&__vectors_start);
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <__initialize_hardware_early+0x1c>)
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <__initialize_hardware_early+0x20>)
 8001452:	609a      	str	r2, [r3, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/_initialize_hardware.c:61

  // Enable the Cortex-M4 FPU only when -mfloat-abi=hard.
  // Code taken from Section 7.1, Cortex-M4 TRM (DDI0439C)

  // Set bits 20-23 to enable CP10 and CP11 coprocessor
  SCB->CPACR |= (0xF << 20);
 8001454:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001458:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	08000000 	.word	0x08000000

0800146c <__initialize_hardware>:
__initialize_hardware():
/Users/lix/Projects/luna/performance/Release/../system/src/cortexm/_initialize_hardware.c:84
__attribute__((weak))
__initialize_hardware(void)
{
  // Call the CSMSIS system clock routine to store the clock frequency
  // in the SystemCoreClock global RAM location.
  SystemCoreClockUpdate();
 800146c:	f000 b828 	b.w	80014c0 <SystemCoreClockUpdate>

08001470 <SystemInit>:
SystemInit():
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:165
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <SystemInit+0x40>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:169
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <SystemInit+0x44>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:165
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:175

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001478:	490f      	ldr	r1, [pc, #60]	; (80014b8 <SystemInit+0x48>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:165
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:162
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147e:	b470      	push	{r4, r5, r6}
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:165
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:172
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001484:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:169
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001486:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:194

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001488:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:178

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800148c:	4e0b      	ldr	r6, [pc, #44]	; (80014bc <SystemInit+0x4c>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:169
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800148e:	f040 0001 	orr.w	r0, r0, #1
 8001492:	6018      	str	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:172

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001494:	609c      	str	r4, [r3, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:175

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	4001      	ands	r1, r0
 800149a:	6019      	str	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:178

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800149c:	605e      	str	r6, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:181

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80014a4:	6019      	str	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:184

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014a6:	60dc      	str	r4, [r3, #12]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:194

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a8:	6095      	str	r5, [r2, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:196
#endif
}
 80014aa:	bc70      	pop	{r4, r5, r6}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	fef6ffff 	.word	0xfef6ffff
 80014bc:	24003010 	.word	0x24003010

080014c0 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:235
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014c0:	b410      	push	{r4}
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:239
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014c2:	4c1b      	ldr	r4, [pc, #108]	; (8001530 <SystemCoreClockUpdate+0x70>)
 80014c4:	68a3      	ldr	r3, [r4, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:241

  switch (tmp)
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d025      	beq.n	800151a <SystemCoreClockUpdate+0x5a>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d00c      	beq.n	80014ec <SystemCoreClockUpdate+0x2c>
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <SystemCoreClockUpdate+0x74>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:277
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <SystemCoreClockUpdate+0x70>)
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <SystemCoreClockUpdate+0x78>)
 80014d8:	6892      	ldr	r2, [r2, #8]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:279
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80014da:	4918      	ldr	r1, [pc, #96]	; (800153c <SystemCoreClockUpdate+0x7c>)
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:277
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80014dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:280
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
}
 80014e0:	f85d 4b04 	ldr.w	r4, [sp], #4
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:279
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80014e4:	5c82      	ldrb	r2, [r0, r2]
 80014e6:	40d3      	lsrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:280
}
 80014ea:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:254
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014ec:	6863      	ldr	r3, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:255
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ee:	6861      	ldr	r1, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:257
      
      if (pllsource != 0)
 80014f0:	025b      	lsls	r3, r3, #9
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:255

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f2:	f001 023f 	and.w	r2, r1, #63	; 0x3f
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:257
      
      if (pllsource != 0)
 80014f6:	d412      	bmi.n	800151e <SystemCoreClockUpdate+0x5e>
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:265
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <SystemCoreClockUpdate+0x74>)
 80014fa:	6863      	ldr	r3, [r4, #4]
 80014fc:	fbb1 f1f2 	udiv	r1, r1, r2
 8001500:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001504:	fb01 f203 	mul.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:268
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <SystemCoreClockUpdate+0x70>)
 800150a:	685b      	ldr	r3, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:269
      SystemCoreClock = pllvco/pllp;
 800150c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001510:	3301      	adds	r3, #1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:270
      break;
 8001518:	e7dc      	b.n	80014d4 <SystemCoreClockUpdate+0x14>
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:248
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <SystemCoreClockUpdate+0x80>)
 800151c:	e7da      	b.n	80014d4 <SystemCoreClockUpdate+0x14>
/Users/lix/Projects/luna/performance/Release/../system/src/cmsis/system_stm32f7xx.c:260
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <SystemCoreClockUpdate+0x80>)
 8001520:	6863      	ldr	r3, [r4, #4]
 8001522:	fbb0 f1f2 	udiv	r1, r0, r2
 8001526:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800152a:	fb01 f203 	mul.w	r2, r1, r3
 800152e:	e7eb      	b.n	8001508 <SystemCoreClockUpdate+0x48>
 8001530:	40023800 	.word	0x40023800
 8001534:	00f42400 	.word	0x00f42400
 8001538:	0800417c 	.word	0x0800417c
 800153c:	20000000 	.word	0x20000000
 8001540:	017d7840 	.word	0x017d7840

08001544 <main>:
main():
/Users/lix/Projects/luna/performance/Release/../src/main.c:36
static void SystemClock_Config(void);

// ----- main() ---------------------------------------------------------------

int main(int argc, char* argv[])
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001548:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:418
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800154c:	f3bf 8f6f 	isb	sy
SCB_EnableICache():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2086
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001550:	4947      	ldr	r1, [pc, #284]	; (8001670 <main+0x12c>)
 8001552:	2200      	movs	r2, #0
 8001554:	f8c1 2250 	str.w	r2, [r1, #592]	; 0x250
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2087
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001558:	694b      	ldr	r3, [r1, #20]
 800155a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155e:	614b      	str	r3, [r1, #20]
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001560:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:418
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001564:	f3bf 8f6f 	isb	sy
SCB_EnableDCache():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2138
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8001568:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800156c:	f3bf 8f4f 	dsb	sy
SCB_EnableDCache():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2141
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001570:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2144

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001574:	f3c3 364e 	ubfx	r6, r3, #13, #15
 8001578:	f3c3 05c9 	ubfx	r5, r3, #3, #10
 800157c:	0172      	lsls	r2, r6, #5
 800157e:	f643 70e0 	movw	r0, #16352	; 0x3fe0
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2146
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001582:	462b      	mov	r3, r5
 8001584:	4010      	ands	r0, r2
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2148
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001586:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2153
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 800158a:	3b01      	subs	r3, #1
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2148
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800158c:	4c38      	ldr	r4, [pc, #224]	; (8001670 <main+0x12c>)
 800158e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2153
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	d1f7      	bne.n	8001586 <main+0x42>
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2154
    } while(sets--);
 8001596:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 800159a:	d2ef      	bcs.n	800157c <main+0x38>
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
 800159c:	f3bf 8f4f 	dsb	sy
SCB_EnableDCache():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/core_cm7.h:2157
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015a0:	6963      	ldr	r3, [r4, #20]
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6163      	str	r3, [r4, #20]
__DSB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:429
 80015a8:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/lix/Projects/luna/performance/Release/../system/include/cmsis/cmsis_gcc.h:418
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80015ac:	f3bf 8f6f 	isb	sy
initialize_hardware():
/Users/lix/Projects/luna/performance/Release/../src/main.c:88
	SCB_EnableDCache();

	// Initialise the HAL Library; it must be the first function
	// to be executed before the call of any HAL function.
	// More HAL initialisations can be defined in stm32f7xx_hal_msp.c
	HAL_Init();
 80015b0:	f7fe ffa2 	bl	80004f8 <HAL_Init>
SystemClock_Config():
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015b4:	2400      	movs	r4, #0
 80015b6:	4a2f      	ldr	r2, [pc, #188]	; (8001674 <main+0x130>)
/Users/lix/Projects/luna/performance/Release/../src/main.c:122
	RCC_OscInitTypeDef RCC_OscInitStruct;

	// Enable HSE Oscillator and activate PLL with HSE as source.
	// This is tuned for STM32F7-DISCOVERY; update it for your board.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015bc:	9401      	str	r4, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../src/main.c:121

	RCC_OscInitTypeDef RCC_OscInitStruct;

	// Enable HSE Oscillator and activate PLL with HSE as source.
	// This is tuned for STM32F7-DISCOVERY; update it for your board.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015be:	f04f 0c01 	mov.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/main.c:123

	// Enable HSE Oscillator and activate PLL with HSE as source.
	// This is tuned for STM32F7-DISCOVERY; update it for your board.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
/Users/lix/Projects/luna/performance/Release/../src/main.c:115

	// The voltage scaling allows optimizing the power consumption when the
	// device is clocked below the maximum system frequency, to update the
	// voltage scaling value regarding system frequency refer to product
	// datasheet.
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <main+0x134>)
/Users/lix/Projects/luna/performance/Release/../src/main.c:129
	// This assumes the HSE_VALUE is a multiple of 1 MHz. If this is not
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ca:	2502      	movs	r5, #2
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
/Users/lix/Projects/luna/performance/Release/../src/main.c:128
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	// This assumes the HSE_VALUE is a multiple of 1 MHz. If this is not
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
 80015d0:	f44f 76d8 	mov.w	r6, #432	; 0x1b0
/Users/lix/Projects/luna/performance/Release/../src/main.c:126
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	// This assumes the HSE_VALUE is a multiple of 1 MHz. If this is not
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);
 80015d4:	2719      	movs	r7, #25
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015d6:	6411      	str	r1, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/main.c:130
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 9; /* To make USB work. */
 80015d8:	2109      	movs	r1, #9
/Users/lix/Projects/luna/performance/Release/../src/main.c:108
 * @retval None
 */
static void SystemClock_Config(void)
{
	// Enable Power Control clock
	__PWR_CLK_ENABLE()
 80015da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	9a01      	ldr	r2, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../src/main.c:115

	// The voltage scaling allows optimizing the power consumption when the
	// device is clocked below the maximum system frequency, to update the
	// voltage scaling value regarding system frequency refer to product
	// datasheet.
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	9402      	str	r4, [sp, #8]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../src/main.c:122
	RCC_OscInitTypeDef RCC_OscInitStruct;

	// Enable HSE Oscillator and activate PLL with HSE as source.
	// This is tuned for STM32F7-DISCOVERY; update it for your board.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f0:	9009      	str	r0, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../src/main.c:132

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 9; /* To make USB work. */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015f2:	a808      	add	r0, sp, #32
/Users/lix/Projects/luna/performance/Release/../src/main.c:115

	// The voltage scaling allows optimizing the power consumption when the
	// device is clocked below the maximum system frequency, to update the
	// voltage scaling value regarding system frequency refer to product
	// datasheet.
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
/Users/lix/Projects/luna/performance/Release/../src/main.c:121

	RCC_OscInitTypeDef RCC_OscInitStruct;

	// Enable HSE Oscillator and activate PLL with HSE as source.
	// This is tuned for STM32F7-DISCOVERY; update it for your board.
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f8:	f8cd c020 	str.w	ip, [sp, #32]
/Users/lix/Projects/luna/performance/Release/../src/main.c:123
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fc:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../src/main.c:115

	// The voltage scaling allows optimizing the power consumption when the
	// device is clocked below the maximum system frequency, to update the
	// voltage scaling value regarding system frequency refer to product
	// datasheet.
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	9b02      	ldr	r3, [sp, #8]
/Users/lix/Projects/luna/performance/Release/../src/main.c:130
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 9; /* To make USB work. */
 8001604:	9113      	str	r1, [sp, #76]	; 0x4c
/Users/lix/Projects/luna/performance/Release/../src/main.c:128
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	// This assumes the HSE_VALUE is a multiple of 1 MHz. If this is not
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
 8001606:	9611      	str	r6, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../src/main.c:140
	HAL_PWREx_EnableOverDrive();

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	// Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	// clocks dividers
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8001608:	260f      	movs	r6, #15
/Users/lix/Projects/luna/performance/Release/../src/main.c:126
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	// This assumes the HSE_VALUE is a multiple of 1 MHz. If this is not
	// your case, you have to recompute these PLL constants.
	RCC_OscInitStruct.PLL.PLLM = (HSE_VALUE / 1000000u);
 800160a:	9710      	str	r7, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/main.c:129

	RCC_OscInitStruct.PLL.PLLN = 432; /* 216 MHz */
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160c:	9512      	str	r5, [sp, #72]	; 0x48
/Users/lix/Projects/luna/performance/Release/../src/main.c:131
	RCC_OscInitStruct.PLL.PLLQ = 9; /* To make USB work. */
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	950e      	str	r5, [sp, #56]	; 0x38
/Users/lix/Projects/luna/performance/Release/../src/main.c:132
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001610:	f7ff f842 	bl	8000698 <HAL_RCC_OscConfig>
/Users/lix/Projects/luna/performance/Release/../src/main.c:135

	// Activate the OverDrive to reach the 200 MHz Frequency
	HAL_PWREx_EnableOverDrive();
 8001614:	f7ff f802 	bl	800061c <HAL_PWREx_EnableOverDrive>
/Users/lix/Projects/luna/performance/Release/../src/main.c:146
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	// This is expected to work for most large cores.
	// Check and update it for your own configuration.
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001618:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
/Users/lix/Projects/luna/performance/Release/../src/main.c:147
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
/Users/lix/Projects/luna/performance/Release/../src/main.c:148
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001620:	2107      	movs	r1, #7
 8001622:	a803      	add	r0, sp, #12
/Users/lix/Projects/luna/performance/Release/../src/main.c:146
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	// This is expected to work for most large cores.
	// Check and update it for your own configuration.
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001624:	9206      	str	r2, [sp, #24]
/Users/lix/Projects/luna/performance/Release/../src/main.c:147
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001626:	9307      	str	r3, [sp, #28]
/Users/lix/Projects/luna/performance/Release/../src/main.c:142
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	// Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	// clocks dividers
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001628:	9504      	str	r5, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../src/main.c:145
	// This is expected to work for most large cores.
	// Check and update it for your own configuration.
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	9405      	str	r4, [sp, #20]
/Users/lix/Projects/luna/performance/Release/../src/main.c:140
	HAL_PWREx_EnableOverDrive();

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	// Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	// clocks dividers
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800162c:	9603      	str	r6, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../src/main.c:148
	// This is expected to work for most large cores.
	// Check and update it for your own configuration.
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800162e:	f7ff fa43 	bl	8000ab8 <HAL_RCC_ClockConfig>
/Users/lix/Projects/luna/performance/Release/../src/main.c:150

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001632:	f7ff fb1f 	bl	8000c74 <HAL_RCC_GetHCLKFreq>
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <main+0x138>)
 8001638:	fba3 3000 	umull	r3, r0, r3, r0
 800163c:	0980      	lsrs	r0, r0, #6
 800163e:	f7fe ffc9 	bl	80005d4 <HAL_SYSTICK_Config>
/Users/lix/Projects/luna/performance/Release/../src/main.c:152

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001642:	2004      	movs	r0, #4
 8001644:	f7fe ffde 	bl	8000604 <HAL_SYSTICK_CLKSourceConfig>
initialize_hardware():
/Users/lix/Projects/luna/performance/Release/../src/main.c:95
	// Enable HSE Oscillator and activate PLL with HSE as source
	SystemClock_Config();

	// Call the CSMSIS system clock routine to store the clock frequency
	// in the SystemCoreClock global RAM location.
	SystemCoreClockUpdate();
 8001648:	f7ff ff3a 	bl	80014c0 <SystemCoreClockUpdate>
main():
/Users/lix/Projects/luna/performance/Release/../src/main.c:44

	initialize_hardware();

	// At this stage the system clock should have already been configured
	// at high speed.
	printf("System clock: %lu Hz\n", SystemCoreClock);
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <main+0x13c>)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <main+0x140>)
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	f001 fef7 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../src/main.c:46

	MX_TIM5_Init();
 8001656:	f000 f833 	bl	80016c0 <MX_TIM5_Init>
/Users/lix/Projects/luna/performance/Release/../src/main.c:49

#if BENCHMARK == COREMARK
	printf("Run the coremark 1.0 benchmark\n");
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <main+0x144>)
 800165c:	f001 ff64 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../src/main.c:50
	core_main(12000);		/* iterations */
 8001660:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001664:	f000 fb0e 	bl	8001c84 <core_main>
/Users/lix/Projects/luna/performance/Release/../src/main.c:60

#elif
	printf("No benchmark selected\n");
#endif

	printf("\nBenchmark done.\n");
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <main+0x148>)
 800166a:	f001 ff5d 	bl	8003528 <puts>
 800166e:	e7fe      	b.n	800166e <main+0x12a>
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000
 800167c:	10624dd3 	.word	0x10624dd3
 8001680:	20000000 	.word	0x20000000
 8001684:	0800418c 	.word	0x0800418c
 8001688:	080041a4 	.word	0x080041a4
 800168c:	080041c4 	.word	0x080041c4

08001690 <SysTick_Handler>:
SysTick_Handler():
/Users/lix/Projects/luna/performance/Release/../src/main.c:161
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001690:	b508      	push	{r3, lr}
/Users/lix/Projects/luna/performance/Release/../src/main.c:164
	static int prescaler = 1000;

	HAL_IncTick();
 8001692:	f7fe ff43 	bl	800051c <HAL_IncTick>
/Users/lix/Projects/luna/performance/Release/../src/main.c:166

	if (!prescaler--)
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SysTick_Handler+0x24>)
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	b93b      	cbnz	r3, 80016ac <SysTick_Handler+0x1c>
/Users/lix/Projects/luna/performance/Release/../src/main.c:169
	{
		prescaler = 1000;
		seconds++;
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <SysTick_Handler+0x28>)
/Users/lix/Projects/luna/performance/Release/../src/main.c:168

	HAL_IncTick();

	if (!prescaler--)
	{
		prescaler = 1000;
 800169e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
/Users/lix/Projects/luna/performance/Release/../src/main.c:169
		seconds++;
 80016a2:	680b      	ldr	r3, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../src/main.c:168

	HAL_IncTick();

	if (!prescaler--)
	{
		prescaler = 1000;
 80016a4:	6010      	str	r0, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../src/main.c:169
		seconds++;
 80016a6:	3301      	adds	r3, #1
 80016a8:	600b      	str	r3, [r1, #0]
 80016aa:	bd08      	pop	{r3, pc}
/Users/lix/Projects/luna/performance/Release/../src/main.c:166
{
	static int prescaler = 1000;

	HAL_IncTick();

	if (!prescaler--)
 80016ac:	3b01      	subs	r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	20000004 	.word	0x20000004
 80016b8:	200001a8 	.word	0x200001a8

080016bc <HAL_MspInit>:
HAL_MspInit():
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop

080016c0 <MX_TIM5_Init>:
MX_TIM5_Init():
/Users/lix/Projects/luna/performance/Release/../src/timing.c:21
/**
 * @brief  TIM_Config: Configure TIM5 timer (32 bit). The timer increments in
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <MX_TIM5_Init+0x54>)
/Users/lix/Projects/luna/performance/Release/../src/timing.c:21
/**
 * @brief  TIM_Config: Configure TIM5 timer (32 bit). The timer increments in
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
 80016c4:	b083      	sub	sp, #12
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016c6:	2500      	movs	r5, #0
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_TIM5_Init+0x58>)
 80016ca:	f8df e058 	ldr.w	lr, [pc, #88]	; 8001724 <MX_TIM5_Init+0x64>
/Users/lix/Projects/luna/performance/Release/../src/timing.c:28
	__TIM5_CLK_ENABLE();

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
 80016ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016d2:	9501      	str	r5, [sp, #4]
 80016d4:	6c11      	ldr	r1, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/timing.c:26

	/* Set TIM5 instance */
	htim5.Instance = TIM5;
 80016d6:	4c11      	ldr	r4, [pc, #68]	; (800171c <MX_TIM5_Init+0x5c>)
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016d8:	f041 0108 	orr.w	r1, r1, #8
/Users/lix/Projects/luna/performance/Release/../src/timing.c:26

	/* Set TIM5 instance */
	htim5.Instance = TIM5;
 80016dc:	4f10      	ldr	r7, [pc, #64]	; (8001720 <MX_TIM5_Init+0x60>)
/Users/lix/Projects/luna/performance/Release/../src/timing.c:33
	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
	htim5.Init.ClockDivision = 0;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.RepetitionCounter = 0;
	HAL_TIM_Base_Init(&htim5);
 80016de:	4620      	mov	r0, r4
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016e0:	6411      	str	r1, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016e2:	681b      	ldr	r3, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016e6:	fbae 1303 	umull	r1, r3, lr, r3
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016ea:	f002 0208 	and.w	r2, r2, #8
/Users/lix/Projects/luna/performance/Release/../src/timing.c:30
	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
	htim5.Init.ClockDivision = 0;
 80016ee:	6125      	str	r5, [r4, #16]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016f0:	0cdb      	lsrs	r3, r3, #19
/Users/lix/Projects/luna/performance/Release/../src/timing.c:31
	htim5.Init.ClockDivision = 0;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	60a5      	str	r5, [r4, #8]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016f4:	9201      	str	r2, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016f6:	4433      	add	r3, r6
/Users/lix/Projects/luna/performance/Release/../src/timing.c:23
 * @brief  1 us steps and is used for profiling.
 */
void MX_TIM5_Init(void)
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();
 80016f8:	9a01      	ldr	r2, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:32

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
	htim5.Init.ClockDivision = 0;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.RepetitionCounter = 0;
 80016fa:	6165      	str	r5, [r4, #20]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:29

	/* Set TIM5 instance */
	htim5.Instance = TIM5;

	htim5.Init.Period = 0xFFFFFFFF;
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
 80016fc:	6063      	str	r3, [r4, #4]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:26
{
	/* TIMx Peripheral clock enable */
	__TIM5_CLK_ENABLE();

	/* Set TIM5 instance */
	htim5.Instance = TIM5;
 80016fe:	6027      	str	r7, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:28

	htim5.Init.Period = 0xFFFFFFFF;
 8001700:	60e6      	str	r6, [r4, #12]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:33
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
	htim5.Init.ClockDivision = 0;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.RepetitionCounter = 0;
	HAL_TIM_Base_Init(&htim5);
 8001702:	f7ff fb1b 	bl	8000d3c <HAL_TIM_Base_Init>
/Users/lix/Projects/luna/performance/Release/../src/timing.c:34
	__HAL_TIM_SetCounter(&htim5, 0);
 8001706:	6823      	ldr	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../src/timing.c:35
	HAL_TIM_Base_Start(&htim5);
 8001708:	4620      	mov	r0, r4
/Users/lix/Projects/luna/performance/Release/../src/timing.c:34
	htim5.Init.Prescaler = (uint16_t) ((SystemCoreClock / 2) / 1000000) - 1;
	htim5.Init.ClockDivision = 0;
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim5.Init.RepetitionCounter = 0;
	HAL_TIM_Base_Init(&htim5);
	__HAL_TIM_SetCounter(&htim5, 0);
 800170a:	625d      	str	r5, [r3, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../src/timing.c:35
	HAL_TIM_Base_Start(&htim5);
 800170c:	f7ff fbb2 	bl	8000e74 <HAL_TIM_Base_Start>
/Users/lix/Projects/luna/performance/Release/../src/timing.c:36
}
 8001710:	b003      	add	sp, #12
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	20000000 	.word	0x20000000
 800171c:	200001cc 	.word	0x200001cc
 8001720:	40000c00 	.word	0x40000c00
 8001724:	431bde83 	.word	0x431bde83

08001728 <core_list_mergesort.constprop.2>:
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:426
	Note: 
	We have a special header for the list that will always be first,
	but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
 8001728:	4601      	mov	r1, r0
 800172a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:430
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
 800172e:	2701      	movs	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:439
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
 8001730:	2900      	cmp	r1, #0
 8001732:	d052      	beq.n	80017da <core_list_mergesort.constprop.2+0xb2>
 8001734:	2000      	movs	r0, #0
 8001736:	4602      	mov	r2, r0
 8001738:	4686      	mov	lr, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:440
            nmerges++;  /* there exists a merge to be done */
 800173a:	f10e 0e01 	add.w	lr, lr, #1
 800173e:	460b      	mov	r3, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:443
            /* step `insize' places along from p */
            q = p;
            psize = 0;
 8001740:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:446
            for (i = 0; i < insize; i++) {
                psize++;
			    q = q->next;
 8001742:	681b      	ldr	r3, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:445
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
 8001744:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:447
			    q = q->next;
                if (!q) break;
 8001746:	b10b      	cbz	r3, 800174c <core_list_mergesort.constprop.2+0x24>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:444
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
 8001748:	42bc      	cmp	r4, r7
 800174a:	d1fa      	bne.n	8001742 <core_list_mergesort.constprop.2+0x1a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475

		        /* add the next element to the merged list */
				if (tail) {
				    tail->next = e;
				} else {
				    list = e;
 800174c:	460e      	mov	r6, r1
 800174e:	463d      	mov	r5, r7
 8001750:	4619      	mov	r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:454

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 8001752:	b14c      	cbz	r4, 8001768 <core_list_mergesort.constprop.2+0x40>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:460

				/* decide whether next element of merge comes from p or q */
				if (psize == 0) {
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
 8001754:	b105      	cbz	r5, 8001758 <core_list_mergesort.constprop.2+0x30>
 8001756:	b991      	cbnz	r1, 800177e <core_list_mergesort.constprop.2+0x56>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:465
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
 8001758:	4633      	mov	r3, r6
 800175a:	3c01      	subs	r4, #1
 800175c:	6836      	ldr	r6, [r6, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:472
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
				}

		        /* add the next element to the merged list */
				if (tail) {
 800175e:	b15a      	cbz	r2, 8001778 <core_list_mergesort.constprop.2+0x50>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:473
				    tail->next = e;
 8001760:	6013      	str	r3, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475
				} else {
				    list = e;
 8001762:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:454

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 8001764:	2c00      	cmp	r4, #0
 8001766:	d1f5      	bne.n	8001754 <core_list_mergesort.constprop.2+0x2c>
 8001768:	2d00      	cmp	r5, #0
 800176a:	dd2a      	ble.n	80017c2 <core_list_mergesort.constprop.2+0x9a>
 800176c:	b349      	cbz	r1, 80017c2 <core_list_mergesort.constprop.2+0x9a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:468
				} else if (cmp(p->info,q->info,res) <= 0) {
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
				} else {
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
 800176e:	460b      	mov	r3, r1
 8001770:	3d01      	subs	r5, #1
 8001772:	6809      	ldr	r1, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:472
				}

		        /* add the next element to the merged list */
				if (tail) {
 8001774:	2a00      	cmp	r2, #0
 8001776:	d1f3      	bne.n	8001760 <core_list_mergesort.constprop.2+0x38>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475
				    tail->next = e;
				} else {
				    list = e;
 8001778:	4618      	mov	r0, r3
 800177a:	461a      	mov	r2, r3
 800177c:	e7f2      	b.n	8001764 <core_list_mergesort.constprop.2+0x3c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 800177e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8001782:	f8d1 c004 	ldr.w	ip, [r1, #4]
cmp_idx():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:114

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 8001786:	f9b9 3000 	ldrsh.w	r3, [r9]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 800178a:	f9b9 a002 	ldrsh.w	sl, [r9, #2]
cmp_idx():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:114

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 800178e:	f023 0bff 	bic.w	fp, r3, #255	; 0xff
 8001792:	f3c3 2307 	ubfx	r3, r3, #8, #8
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 8001796:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
cmp_idx():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:114

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 800179a:	ea4b 0303 	orr.w	r3, fp, r3
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 800179e:	ebc8 080a 	rsb	r8, r8, sl
cmp_idx():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:114

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
 80017a2:	f8a9 3000 	strh.w	r3, [r9]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:115
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
 80017a6:	f9bc 3000 	ldrsh.w	r3, [ip]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 80017aa:	f1b8 0f00 	cmp.w	r8, #0
cmp_idx():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:115
	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
 80017ae:	f023 09ff 	bic.w	r9, r3, #255	; 0xff
 80017b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80017b6:	ea49 0303 	orr.w	r3, r9, r3
 80017ba:	f8ac 3000 	strh.w	r3, [ip]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 80017be:	dcd6      	bgt.n	800176e <core_list_mergesort.constprop.2+0x46>
 80017c0:	e7ca      	b.n	8001758 <core_list_mergesort.constprop.2+0x30>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:439
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d1b9      	bne.n	800173a <core_list_mergesort.constprop.2+0x12>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:487
        }
		
	    tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 80017c6:	f1be 0f01 	cmp.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:484

			/* now p has stepped `insize' places along, and q has too */
			p = q;
        }
		
	    tail->next = NULL;
 80017ca:	6011      	str	r1, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:487

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 80017cc:	d101      	bne.n	80017d2 <core_list_mergesort.constprop.2+0xaa>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:496
        insize *= 2;
    }
#if COMPILER_REQUIRES_SORT_RETURN
	return list;
#endif
}
 80017ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:491
        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
 80017d2:	4601      	mov	r1, r0
 80017d4:	007f      	lsls	r7, r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:439
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d1ac      	bne.n	8001734 <core_list_mergesort.constprop.2+0xc>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:484

			/* now p has stepped `insize' places along, and q has too */
			p = q;
        }
		
	    tail->next = NULL;
 80017da:	6009      	str	r1, [r1, #0]
 80017dc:	deff      	udf	#255	; 0xff
core_list_mergesort.constprop.2():
 80017de:	bf00      	nop

080017e0 <core_bench_list>:
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:132
	- List sort
	- Operate on data from list (crc)
	- Single remove/reinsert
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
 80017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:136
	ee_u16 retval=0;
	ee_u16 found=0,missed=0;
	list_head *list=res->list;
	ee_s16 find_num=res->seed3;
 80017e4:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:132
	- List sort
	- Operate on data from list (crc)
	- Single remove/reinsert
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
 80017e8:	b08d      	sub	sp, #52	; 0x34
 80017ea:	4682      	mov	sl, r0
 80017ec:	468e      	mov	lr, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:144
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 80017ee:	2d00      	cmp	r5, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:135
	* At the end of this function, the list is back to original state
*/
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
	ee_u16 retval=0;
	ee_u16 found=0,missed=0;
	list_head *list=res->list;
 80017f0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:144
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 80017f4:	f340 81bf 	ble.w	8001b76 <core_bench_list+0x396>
 80017f8:	2000      	movs	r0, #0
 80017fa:	460f      	mov	r7, r1
 80017fc:	46a9      	mov	r9, r5
 80017fe:	465b      	mov	r3, fp
 8001800:	4604      	mov	r4, r0
 8001802:	4602      	mov	r2, r0
 8001804:	4680      	mov	r8, r0
 8001806:	468c      	mov	ip, r1
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:371

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
 8001808:	2f00      	cmp	r7, #0
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:145
	ee_s16 i;

	info.idx=finder_idx;
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
		info.data16= (i & 0xff) ;
 800180a:	fa5f fe80 	uxtb.w	lr, r0
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:371

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
 800180e:	f2c0 817d 	blt.w	8001b0c <core_bench_list+0x32c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:372
		while (list && (list->info->idx != info->idx))
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 818a 	beq.w	8001b2c <core_bench_list+0x34c>
 8001818:	6859      	ldr	r1, [r3, #4]
 800181a:	461d      	mov	r5, r3
 800181c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001820:	42b9      	cmp	r1, r7
 8001822:	d105      	bne.n	8001830 <core_bench_list+0x50>
 8001824:	e007      	b.n	8001836 <core_bench_list+0x56>
 8001826:	6869      	ldr	r1, [r5, #4]
 8001828:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800182c:	42b9      	cmp	r1, r7
 800182e:	d002      	beq.n	8001836 <core_bench_list+0x56>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:373
			list=list->next;
 8001830:	682d      	ldr	r5, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:372
	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
		while (list && (list->info->idx != info->idx))
 8001832:	2d00      	cmp	r5, #0
 8001834:	d1f7      	bne.n	8001826 <core_bench_list+0x46>
 8001836:	2600      	movs	r6, #0
 8001838:	e000      	b.n	800183c <core_bench_list+0x5c>
core_list_reverse():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:397
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
	list_head *next=NULL, *tmp;
	while (list) {
 800183a:	460b      	mov	r3, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:398
		tmp=list->next;
 800183c:	6819      	ldr	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:399
		list->next=next;
 800183e:	601e      	str	r6, [r3, #0]
 8001840:	461e      	mov	r6, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:397
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
	list_head *next=NULL, *tmp;
	while (list) {
 8001842:	2900      	cmp	r1, #0
 8001844:	d1f9      	bne.n	800183a <core_bench_list+0x5a>
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:148
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
		info.data16= (i & 0xff) ;
		this_find=core_list_find(list,&info);
		list=core_list_reverse(list);
		if (this_find==NULL) {
 8001846:	2d00      	cmp	r5, #0
 8001848:	f000 8170 	beq.w	8001b2c <core_bench_list+0x34c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:154
			missed++;
			retval+=(list->next->info->data16 >> 8) & 1;
		}
		else {
			found++;
			if (this_find->info->data16 & 0x1) /* use found value */
 800184c:	6869      	ldr	r1, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:153
		if (this_find==NULL) {
			missed++;
			retval+=(list->next->info->data16 >> 8) & 1;
		}
		else {
			found++;
 800184e:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:154
			if (this_find->info->data16 & 0x1) /* use found value */
 8001850:	f9b1 1000 	ldrsh.w	r1, [r1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:153
		if (this_find==NULL) {
			missed++;
			retval+=(list->next->info->data16 >> 8) & 1;
		}
		else {
			found++;
 8001854:	b2a4      	uxth	r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:154
			if (this_find->info->data16 & 0x1) /* use found value */
 8001856:	07ce      	lsls	r6, r1, #31
 8001858:	d503      	bpl.n	8001862 <core_bench_list+0x82>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:155
				retval+=(this_find->info->data16 >> 9) & 1;
 800185a:	f3c1 2140 	ubfx	r1, r1, #9, #1
 800185e:	440a      	add	r2, r1
 8001860:	b292      	uxth	r2, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:157
			/* and cache next item at the head of the list (if any) */
			if (this_find->next != NULL) {
 8001862:	6829      	ldr	r1, [r5, #0]
 8001864:	b121      	cbz	r1, 8001870 <core_bench_list+0x90>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:159
				finder = this_find->next;
				this_find->next = finder->next;
 8001866:	680e      	ldr	r6, [r1, #0]
 8001868:	602e      	str	r6, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:160
				finder->next=list->next;
 800186a:	681d      	ldr	r5, [r3, #0]
 800186c:	600d      	str	r5, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:161
				list->next=finder;
 800186e:	6019      	str	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:164
			}
		}
		if (info.idx>=0)
 8001870:	2f00      	cmp	r7, #0
 8001872:	db01      	blt.n	8001878 <core_bench_list+0x98>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:165
			info.idx++;
 8001874:	3701      	adds	r7, #1
 8001876:	b23f      	sxth	r7, r7
 8001878:	3001      	adds	r0, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:144 (discriminator 2)
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 800187a:	b201      	sxth	r1, r0
 800187c:	4589      	cmp	r9, r1
 800187e:	dcc3      	bgt.n	8001808 <core_bench_list+0x28>
 8001880:	ebc8 0484 	rsb	r4, r8, r4, lsl #2
 8001884:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8001888:	469b      	mov	fp, r3
 800188a:	46e6      	mov	lr, ip
 800188c:	4422      	add	r2, r4
 800188e:	970a      	str	r7, [sp, #40]	; 0x28
 8001890:	b293      	uxth	r3, r2
 8001892:	9309      	str	r3, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:172
	ee_printf("List find %d: [%d,%d,%d]\n",i,retval,missed,found);
#endif
	}
	retval+=found*4-missed;
	/* sort the list by data content and remove one item*/
	if (finder_idx>0)
 8001894:	f1be 0f00 	cmp.w	lr, #0
 8001898:	f340 80f5 	ble.w	8001a86 <core_bench_list+0x2a6>
 800189c:	2301      	movs	r3, #1
calc_func():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:82
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
				if (res->crcstate==0)
					res->crcstate=retval;
				break;
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 800189e:	4652      	mov	r2, sl
 80018a0:	f8cd b014 	str.w	fp, [sp, #20]
core_bench_list():
 80018a4:	9308      	str	r3, [sp, #32]
calc_func():
 80018a6:	4653      	mov	r3, sl
 80018a8:	46da      	mov	sl, fp
 80018aa:	4693      	mov	fp, r2
 80018ac:	3328      	adds	r3, #40	; 0x28
 80018ae:	9306      	str	r3, [sp, #24]
 80018b0:	9b05      	ldr	r3, [sp, #20]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:439
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8163 	beq.w	8001b7e <core_bench_list+0x39e>
 80018b8:	2300      	movs	r3, #0
 80018ba:	4657      	mov	r7, sl
 80018bc:	46da      	mov	sl, fp
 80018be:	461e      	mov	r6, r3
 80018c0:	9305      	str	r3, [sp, #20]
 80018c2:	9307      	str	r3, [sp, #28]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:440
            nmerges++;  /* there exists a merge to be done */
 80018c4:	9b07      	ldr	r3, [sp, #28]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:443
            /* step `insize' places along from p */
            q = p;
            psize = 0;
 80018c6:	f04f 0800 	mov.w	r8, #0
 80018ca:	9a08      	ldr	r2, [sp, #32]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:440
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
            nmerges++;  /* there exists a merge to be done */
 80018cc:	3301      	adds	r3, #1
 80018ce:	9307      	str	r3, [sp, #28]
 80018d0:	463b      	mov	r3, r7
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:446
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
			    q = q->next;
 80018d2:	681b      	ldr	r3, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:445
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
 80018d4:	f108 0801 	add.w	r8, r8, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:447
			    q = q->next;
                if (!q) break;
 80018d8:	b10b      	cbz	r3, 80018de <core_bench_list+0xfe>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:444
        while (p) {
            nmerges++;  /* there exists a merge to be done */
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
 80018da:	4590      	cmp	r8, r2
 80018dc:	d1f9      	bne.n	80018d2 <core_bench_list+0xf2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475

		        /* add the next element to the merged list */
				if (tail) {
				    tail->next = e;
				} else {
				    list = e;
 80018de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018e2:	4645      	mov	r5, r8
 80018e4:	46bb      	mov	fp, r7
 80018e6:	461f      	mov	r7, r3
 80018e8:	464c      	mov	r4, r9
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:454

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 80018ea:	b155      	cbz	r5, 8001902 <core_bench_list+0x122>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:460

				/* decide whether next element of merge comes from p or q */
				if (psize == 0) {
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
 80018ec:	b104      	cbz	r4, 80018f0 <core_bench_list+0x110>
 80018ee:	b9b7      	cbnz	r7, 800191e <core_bench_list+0x13e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:465
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
 80018f0:	465b      	mov	r3, fp
 80018f2:	3d01      	subs	r5, #1
 80018f4:	f8db b000 	ldr.w	fp, [fp]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:472
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
				}

		        /* add the next element to the merged list */
				if (tail) {
 80018f8:	b176      	cbz	r6, 8001918 <core_bench_list+0x138>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:473
				    tail->next = e;
 80018fa:	6033      	str	r3, [r6, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475
				} else {
				    list = e;
 80018fc:	461e      	mov	r6, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:454

            /* if q hasn't fallen off end, we have two lists to merge */
            qsize = insize;

            /* now we have two lists; merge them */
            while (psize > 0 || (qsize > 0 && q)) {
 80018fe:	2d00      	cmp	r5, #0
 8001900:	d1f4      	bne.n	80018ec <core_bench_list+0x10c>
 8001902:	2c00      	cmp	r4, #0
 8001904:	f340 80b5 	ble.w	8001a72 <core_bench_list+0x292>
 8001908:	2f00      	cmp	r7, #0
 800190a:	f000 80b2 	beq.w	8001a72 <core_bench_list+0x292>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:468
				} else if (cmp(p->info,q->info,res) <= 0) {
				    /* First element of p is lower (or same); e must come from p. */
				    e = p; p = p->next; psize--;
				} else {
				    /* First element of q is lower; e must come from q. */
				    e = q; q = q->next; qsize--;
 800190e:	463b      	mov	r3, r7
 8001910:	3c01      	subs	r4, #1
 8001912:	683f      	ldr	r7, [r7, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:472
				}

		        /* add the next element to the merged list */
				if (tail) {
 8001914:	2e00      	cmp	r6, #0
 8001916:	d1f0      	bne.n	80018fa <core_bench_list+0x11a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:475
				    tail->next = e;
				} else {
				    list = e;
 8001918:	9305      	str	r3, [sp, #20]
 800191a:	461e      	mov	r6, r3
 800191c:	e7ef      	b.n	80018fe <core_bench_list+0x11e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 800191e:	f8db 8004 	ldr.w	r8, [fp, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
calc_func():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:64
	, list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
	ee_s16 data=*pdata;
 8001924:	f9b8 9000 	ldrsh.w	r9, [r8]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 8001928:	9303      	str	r3, [sp, #12]
calc_func():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:67

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
	ee_s16 data=*pdata;
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
	if (optype) /* if cached, use cache */
 800192a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800192e:	d15f      	bne.n	80019f0 <core_bench_list+0x210>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:71
		return (data & 0x007f);
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
 8001930:	f3c9 0ec3 	ubfx	lr, r9, #3, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
 8001934:	f019 0307 	ands.w	r3, r9, #7
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:72
	if (optype) /* if cached, use cache */
		return (data & 0x007f);
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 8001938:	ea4e 1e0e 	orr.w	lr, lr, lr, lsl #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
		switch (flag) {
 800193c:	d05d      	beq.n	80019fa <core_bench_list+0x21a>
 800193e:	2b01      	cmp	r3, #1
 8001940:	d159      	bne.n	80019f6 <core_bench_list+0x216>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:82
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
				if (res->crcstate==0)
					res->crcstate=retval;
				break;
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 8001942:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
 8001946:	4671      	mov	r1, lr
 8001948:	9806      	ldr	r0, [sp, #24]
 800194a:	f000 ff2f 	bl	80027ac <core_bench_matrix>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:83
				if (res->crcmatrix==0)
 800194e:	f8ba 203c 	ldrh.w	r2, [sl, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:82
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
				if (res->crcstate==0)
					res->crcstate=retval;
				break;
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 8001952:	b203      	sxth	r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:83
				if (res->crcmatrix==0)
 8001954:	b90a      	cbnz	r2, 800195a <core_bench_list+0x17a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:84
					res->crcmatrix=retval;
 8001956:	f8aa 003c 	strh.w	r0, [sl, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 800195a:	b298      	uxth	r0, r3
 800195c:	f8ba 1038 	ldrh.w	r1, [sl, #56]	; 0x38
 8001960:	9304      	str	r3, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
		retval &= 0x007f; 
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 8001962:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 8001966:	f001 f9b5 	bl	8002cd4 <crcu16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:91
		retval &= 0x007f; 
 800196a:	9b04      	ldr	r3, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 800196c:	f8aa 0038 	strh.w	r0, [sl, #56]	; 0x38
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:91
		retval &= 0x007f; 
 8001970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 8001974:	f049 0380 	orr.w	r3, r9, #128	; 0x80
 8001978:	4313      	orrs	r3, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:93
		return retval;
 800197a:	4691      	mov	r9, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
		retval &= 0x007f; 
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 800197c:	f8a8 3000 	strh.w	r3, [r8]
 8001980:	9b03      	ldr	r3, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:64
	, list_head *memblock_end, list_data *datablock_end);
typedef ee_s32(*list_cmp)(list_data *a, list_data *b, core_results *res);
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res);

ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
	ee_s16 data=*pdata;
 8001982:	f9b3 8000 	ldrsh.w	r8, [r3]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:67
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
	if (optype) /* if cached, use cache */
 8001986:	f018 0f80 	tst.w	r8, #128	; 0x80
 800198a:	d12e      	bne.n	80019ea <core_bench_list+0x20a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:71
		return (data & 0x007f);
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
 800198c:	f3c8 0ec3 	ubfx	lr, r8, #3, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
 8001990:	f018 0307 	ands.w	r3, r8, #7
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:72
	if (optype) /* if cached, use cache */
		return (data & 0x007f);
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
 8001994:	ea4e 1e0e 	orr.w	lr, lr, lr, lsl #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
		switch (flag) {
 8001998:	d04e      	beq.n	8001a38 <core_bench_list+0x258>
 800199a:	2b01      	cmp	r3, #1
 800199c:	d14a      	bne.n	8001a34 <core_bench_list+0x254>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:82
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
				if (res->crcstate==0)
					res->crcstate=retval;
				break;
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 800199e:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
 80019a2:	4671      	mov	r1, lr
 80019a4:	9806      	ldr	r0, [sp, #24]
 80019a6:	f000 ff01 	bl	80027ac <core_bench_matrix>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:83
				if (res->crcmatrix==0)
 80019aa:	f8ba 203c 	ldrh.w	r2, [sl, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:82
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
				if (res->crcstate==0)
					res->crcstate=retval;
				break;
			case 1:
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
 80019ae:	b203      	sxth	r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:83
				if (res->crcmatrix==0)
 80019b0:	b90a      	cbnz	r2, 80019b6 <core_bench_list+0x1d6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:84
					res->crcmatrix=retval;
 80019b2:	f8aa 003c 	strh.w	r0, [sl, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 80019b6:	f8ba 1038 	ldrh.w	r1, [sl, #56]	; 0x38
 80019ba:	b298      	uxth	r0, r3
 80019bc:	9304      	str	r3, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
		retval &= 0x007f; 
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 80019be:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 80019c2:	f001 f987 	bl	8002cd4 <crcu16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:91
		retval &= 0x007f; 
 80019c6:	9b04      	ldr	r3, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 80019c8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80019cc:	9903      	ldr	r1, [sp, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:91
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
		retval &= 0x007f; 
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:90
				break;
			default:
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
 80019d2:	f8aa 0038 	strh.w	r0, [sl, #56]	; 0x38
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:93
		retval &= 0x007f; 
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
		return retval;
 80019d6:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:92
				retval=data;
				break;
		}
		res->crc=crcu16(retval,res->crc);
		retval &= 0x007f; 
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
 80019d8:	ea43 0308 	orr.w	r3, r3, r8
 80019dc:	800b      	strh	r3, [r1, #0]
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:463
				    /* p is empty; e must come from q. */
				    e = q; q = q->next; qsize--;
				} else if (qsize == 0 || !q) {
				    /* q is empty; e must come from p. */
				    e = p; p = p->next; psize--;
				} else if (cmp(p->info,q->info,res) <= 0) {
 80019de:	ebc2 0909 	rsb	r9, r2, r9
 80019e2:	f1b9 0f00 	cmp.w	r9, #0
 80019e6:	dc92      	bgt.n	800190e <core_bench_list+0x12e>
 80019e8:	e782      	b.n	80018f0 <core_bench_list+0x110>
calc_func():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:68
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
	ee_s16 data=*pdata;
	ee_s16 retval;
	ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
	if (optype) /* if cached, use cache */
		return (data & 0x007f);
 80019ea:	f008 027f 	and.w	r2, r8, #127	; 0x7f
 80019ee:	e7f6      	b.n	80019de <core_bench_list+0x1fe>
 80019f0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 80019f4:	e7c5      	b.n	8001982 <core_bench_list+0x1a2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
 80019f6:	464b      	mov	r3, r9
 80019f8:	e7af      	b.n	800195a <core_bench_list+0x17a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:76
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
 80019fa:	f1be 0f22 	cmp.w	lr, #34	; 0x22
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 80019fe:	f8ba c038 	ldrh.w	ip, [sl, #56]	; 0x38
 8001a02:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:76
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
 8001a06:	bfb8      	it	lt
 8001a08:	f04f 0e22 	movlt.w	lr, #34	; 0x22
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8001a0c:	f9ba 2000 	ldrsh.w	r2, [sl]
 8001a10:	f8da 1014 	ldr.w	r1, [sl, #20]
 8001a14:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001a18:	f8cd e000 	str.w	lr, [sp]
 8001a1c:	f8cd c004 	str.w	ip, [sp, #4]
 8001a20:	f001 f8b8 	bl	8002b94 <core_bench_state>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:78
				if (res->crcstate==0)
 8001a24:	f8ba 203e 	ldrh.w	r2, [sl, #62]	; 0x3e
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8001a28:	b203      	sxth	r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:78
				if (res->crcstate==0)
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d195      	bne.n	800195a <core_bench_list+0x17a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:79
					res->crcstate=retval;
 8001a2e:	f8aa 003e 	strh.w	r0, [sl, #62]	; 0x3e
 8001a32:	e792      	b.n	800195a <core_bench_list+0x17a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:73
		return (data & 0x007f);
	else { /* otherwise calculate and cache the result */
		ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
 8001a34:	4643      	mov	r3, r8
 8001a36:	e7be      	b.n	80019b6 <core_bench_list+0x1d6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:76
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
 8001a38:	f1be 0f22 	cmp.w	lr, #34	; 0x22
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8001a3c:	f8ba c038 	ldrh.w	ip, [sl, #56]	; 0x38
 8001a40:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:76
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
 8001a44:	bfb8      	it	lt
 8001a46:	f04f 0e22 	movlt.w	lr, #34	; 0x22
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8001a4a:	f9ba 2000 	ldrsh.w	r2, [sl]
 8001a4e:	f8da 1014 	ldr.w	r1, [sl, #20]
 8001a52:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001a56:	f8cd e000 	str.w	lr, [sp]
 8001a5a:	f8cd c004 	str.w	ip, [sp, #4]
 8001a5e:	f001 f899 	bl	8002b94 <core_bench_state>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:78
				if (res->crcstate==0)
 8001a62:	f8ba 203e 	ldrh.w	r2, [sl, #62]	; 0x3e
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:77
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
		switch (flag) {
			case 0:
				if (dtype<0x22) /* set min period for bit corruption */
					dtype=0x22;
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
 8001a66:	b203      	sxth	r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:78
				if (res->crcstate==0)
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d1a4      	bne.n	80019b6 <core_bench_list+0x1d6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:79
					res->crcstate=retval;
 8001a6c:	f8aa 003e 	strh.w	r0, [sl, #62]	; 0x3e
 8001a70:	e7a1      	b.n	80019b6 <core_bench_list+0x1d6>
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:439
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
 8001a72:	2f00      	cmp	r7, #0
 8001a74:	f47f af26 	bne.w	80018c4 <core_bench_list+0xe4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:487
        }
		
	    tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 8001a78:	9b07      	ldr	r3, [sp, #28]
 8001a7a:	46d3      	mov	fp, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:484

			/* now p has stepped `insize' places along, and q has too */
			p = q;
        }
		
	    tail->next = NULL;
 8001a7c:	6037      	str	r7, [r6, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:487

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d172      	bne.n	8001b68 <core_bench_list+0x388>
 8001a82:	f8dd b014 	ldr.w	fp, [sp, #20]
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:174
	}
	retval+=found*4-missed;
	/* sort the list by data content and remove one item*/
	if (finder_idx>0)
		list=core_list_mergesort(list,cmp_complex,res);
	remover=core_list_remove(list->next);
 8001a86:	f8db 3000 	ldr.w	r3, [fp]
core_list_remove():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:325
	tmp=item->info;
	item->info=ret->info;
	ret->info=tmp;
	/* and eliminate item */
	item->next=item->next->next;
	ret->next=NULL;
 8001a8a:	2100      	movs	r1, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:318
	Returns:
	Removed item.
*/
list_head *core_list_remove(list_head *item) {
	list_data *tmp;
	list_head *ret=item->next;
 8001a8c:	681d      	ldr	r5, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:320
	/* swap data pointers */
	tmp=item->info;
 8001a8e:	685a      	ldr	r2, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:321
	item->info=ret->info;
 8001a90:	6868      	ldr	r0, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:324
	ret->info=tmp;
	/* and eliminate item */
	item->next=item->next->next;
 8001a92:	682c      	ldr	r4, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:321
list_head *core_list_remove(list_head *item) {
	list_data *tmp;
	list_head *ret=item->next;
	/* swap data pointers */
	tmp=item->info;
	item->info=ret->info;
 8001a94:	6058      	str	r0, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:322
	ret->info=tmp;
 8001a96:	606a      	str	r2, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:324
	/* and eliminate item */
	item->next=item->next->next;
 8001a98:	601c      	str	r4, [r3, #0]
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:371

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
 8001a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
core_list_remove():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:325
	tmp=item->info;
	item->info=ret->info;
	ret->info=tmp;
	/* and eliminate item */
	item->next=item->next->next;
	ret->next=NULL;
 8001a9c:	6029      	str	r1, [r5, #0]
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:371

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
 8001a9e:	428b      	cmp	r3, r1
 8001aa0:	db57      	blt.n	8001b52 <core_bench_list+0x372>
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	465c      	mov	r4, fp
 8001aa6:	e002      	b.n	8001aae <core_bench_list+0x2ce>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:373
		while (list && (list->info->idx != info->idx))
			list=list->next;
 8001aa8:	6824      	ldr	r4, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:372
	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
		while (list && (list->info->idx != info->idx))
 8001aaa:	2c00      	cmp	r4, #0
 8001aac:	d04b      	beq.n	8001b46 <core_bench_list+0x366>
 8001aae:	6863      	ldr	r3, [r4, #4]
 8001ab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	d1f7      	bne.n	8001aa8 <core_bench_list+0x2c8>
 8001ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:180
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
	if (!finder)
		finder=list->next;
	while (finder) {
		retval=crc16(list->info->data16,retval);
 8001aba:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001abe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001ac2:	f001 faef 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:181
		finder=finder->next;
 8001ac6:	6824      	ldr	r4, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:180
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
	if (!finder)
		finder=list->next;
	while (finder) {
		retval=crc16(list->info->data16,retval);
 8001ac8:	4601      	mov	r1, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:179
	remover=core_list_remove(list->next);
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
	if (!finder)
		finder=list->next;
	while (finder) {
 8001aca:	2c00      	cmp	r4, #0
 8001acc:	d1f5      	bne.n	8001aba <core_bench_list+0x2da>
 8001ace:	686a      	ldr	r2, [r5, #4]
 8001ad0:	f8db 3000 	ldr.w	r3, [fp]
 8001ad4:	9009      	str	r0, [sp, #36]	; 0x24
core_list_undo_remove():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:349
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
	list_data *tmp;
	/* swap data pointers */
	tmp=item_removed->info;
	item_removed->info=item_modified->info;
 8001ad6:	685c      	ldr	r4, [r3, #4]
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:188
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 8001ad8:	4658      	mov	r0, fp
core_list_undo_remove():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:352
	/* swap data pointers */
	tmp=item_removed->info;
	item_removed->info=item_modified->info;
	item_modified->info=tmp;
	/* and insert item */
	item_removed->next=item_modified->next;
 8001ada:	6819      	ldr	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:349
*/
list_head *core_list_undo_remove(list_head *item_removed, list_head *item_modified) {
	list_data *tmp;
	/* swap data pointers */
	tmp=item_removed->info;
	item_removed->info=item_modified->info;
 8001adc:	606c      	str	r4, [r5, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:350
	item_modified->info=tmp;
 8001ade:	605a      	str	r2, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:352
	/* and insert item */
	item_removed->next=item_modified->next;
 8001ae0:	6029      	str	r1, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:353
	item_modified->next=item_removed;
 8001ae2:	601d      	str	r5, [r3, #0]
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:188
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 8001ae4:	f7ff fe20 	bl	8001728 <core_list_mergesort.constprop.2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:190
	/* CRC data content of list */
	finder=list->next;
 8001ae8:	6804      	ldr	r4, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:188
#if CORE_DEBUG
	ee_printf("List sort 1: %04x\n",retval);
#endif
	remover=core_list_undo_remove(remover,list->next);
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
 8001aea:	4605      	mov	r5, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:191
	/* CRC data content of list */
	finder=list->next;
	while (finder) {
 8001aec:	b154      	cbz	r4, 8001b04 <core_bench_list+0x324>
 8001aee:	9909      	ldr	r1, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:192
		retval=crc16(list->info->data16,retval);
 8001af0:	686b      	ldr	r3, [r5, #4]
 8001af2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001af6:	f001 fad5 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:193
		finder=finder->next;
 8001afa:	6824      	ldr	r4, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:192
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
	/* CRC data content of list */
	finder=list->next;
	while (finder) {
		retval=crc16(list->info->data16,retval);
 8001afc:	4601      	mov	r1, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:191
	remover=core_list_undo_remove(remover,list->next);
	/* sort the list by index, in effect returning the list to original state */
	list=core_list_mergesort(list,cmp_idx,NULL);
	/* CRC data content of list */
	finder=list->next;
	while (finder) {
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d1f6      	bne.n	8001af0 <core_bench_list+0x310>
 8001b02:	9009      	str	r0, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:199
	}
#if CORE_DEBUG
	ee_printf("List sort 2: %04x\n",retval);
#endif
	return retval;
}
 8001b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b06:	b00d      	add	sp, #52	; 0x34
 8001b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:376
	if (info->idx>=0) {
		while (list && (list->info->idx != info->idx))
			list=list->next;
		return list;
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
 8001b0c:	b173      	cbz	r3, 8001b2c <core_bench_list+0x34c>
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	461d      	mov	r5, r3
 8001b12:	7809      	ldrb	r1, [r1, #0]
 8001b14:	4571      	cmp	r1, lr
 8001b16:	d105      	bne.n	8001b24 <core_bench_list+0x344>
 8001b18:	e68d      	b.n	8001836 <core_bench_list+0x56>
 8001b1a:	6869      	ldr	r1, [r5, #4]
 8001b1c:	7809      	ldrb	r1, [r1, #0]
 8001b1e:	4571      	cmp	r1, lr
 8001b20:	f43f ae89 	beq.w	8001836 <core_bench_list+0x56>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:377
			list=list->next;
 8001b24:	682d      	ldr	r5, [r5, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:376
	if (info->idx>=0) {
		while (list && (list->info->idx != info->idx))
			list=list->next;
		return list;
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	d1f7      	bne.n	8001b1a <core_bench_list+0x33a>
 8001b2a:	e684      	b.n	8001836 <core_bench_list+0x56>
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:150
		info.data16= (i & 0xff) ;
		this_find=core_list_find(list,&info);
		list=core_list_reverse(list);
		if (this_find==NULL) {
			missed++;
			retval+=(list->next->info->data16 >> 8) & 1;
 8001b2c:	6819      	ldr	r1, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:149
	for (i=0; i<find_num; i++) {
		info.data16= (i & 0xff) ;
		this_find=core_list_find(list,&info);
		list=core_list_reverse(list);
		if (this_find==NULL) {
			missed++;
 8001b2e:	f108 0601 	add.w	r6, r8, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:150
			retval+=(list->next->info->data16 >> 8) & 1;
 8001b32:	6849      	ldr	r1, [r1, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:149
	for (i=0; i<find_num; i++) {
		info.data16= (i & 0xff) ;
		this_find=core_list_find(list,&info);
		list=core_list_reverse(list);
		if (this_find==NULL) {
			missed++;
 8001b34:	fa1f f886 	uxth.w	r8, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:150
			retval+=(list->next->info->data16 >> 8) & 1;
 8001b38:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8001b3c:	f001 0101 	and.w	r1, r1, #1
 8001b40:	440a      	add	r2, r1
 8001b42:	b292      	uxth	r2, r2
 8001b44:	e694      	b.n	8001870 <core_bench_list+0x90>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:178
		list=core_list_mergesort(list,cmp_complex,res);
	remover=core_list_remove(list->next);
	/* CRC data content of list from location of index N forward, and then undo remove */
	finder=core_list_find(list,&info);
	if (!finder)
		finder=list->next;
 8001b46:	f8db 3000 	ldr.w	r3, [fp]
 8001b4a:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:179
	while (finder) {
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1b3      	bne.n	8001ab8 <core_bench_list+0x2d8>
 8001b50:	e7c1      	b.n	8001ad6 <core_bench_list+0x2f6>
core_list_find():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:371

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
 8001b52:	465c      	mov	r4, fp
 8001b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001b56:	e002      	b.n	8001b5e <core_bench_list+0x37e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:377
		while (list && (list->info->idx != info->idx))
			list=list->next;
		return list;
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
			list=list->next;
 8001b58:	6824      	ldr	r4, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:376
	if (info->idx>=0) {
		while (list && (list->info->idx != info->idx))
			list=list->next;
		return list;
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d0f3      	beq.n	8001b46 <core_bench_list+0x366>
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	428b      	cmp	r3, r1
 8001b64:	d1f8      	bne.n	8001b58 <core_bench_list+0x378>
 8001b66:	e7a7      	b.n	8001ab8 <core_bench_list+0x2d8>
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:491
        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
 8001b68:	9b08      	ldr	r3, [sp, #32]
 8001b6a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	9308      	str	r3, [sp, #32]
 8001b72:	4653      	mov	r3, sl
 8001b74:	e69d      	b.n	80018b2 <core_bench_list+0xd2>
core_bench_list():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:144
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 8001b76:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:142
	list_head *this_find;
	list_head *finder, *remover;
	list_data info;
	ee_s16 i;

	info.idx=finder_idx;
 8001b78:	910a      	str	r1, [sp, #40]	; 0x28
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:144
	/* find <find_num> values in the list, and change the list each time (reverse and cache if value found) */
	for (i=0; i<find_num; i++) {
 8001b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b7c:	e68a      	b.n	8001894 <core_bench_list+0xb4>
 8001b7e:	469b      	mov	fp, r3
core_list_mergesort():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:484

			/* now p has stepped `insize' places along, and q has too */
			p = q;
        }
		
	    tail->next = NULL;
 8001b80:	f8cb 3000 	str.w	r3, [fp]
 8001b84:	deff      	udf	#255	; 0xff
core_bench_list():
 8001b86:	bf00      	nop

08001b88 <core_list_init>:
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:213

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 8001b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:216
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 8001b8c:	4f3c      	ldr	r7, [pc, #240]	; (8001c80 <core_list_init+0xf8>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:213

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 8001b8e:	468a      	mov	sl, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:226
	ee_u32 i;
	list_head *finder,*list=memblock;
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
 8001b90:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:229
	list->info=datablock;
	list->info->idx=0x0000;
	list->info->data16=(ee_s16)0x8080;
 8001b92:	f248 0580 	movw	r5, #32896	; 0x8080
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:216

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 8001b96:	fba7 3000 	umull	r3, r0, r7, r0
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:286
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001b9a:	f101 0310 	add.w	r3, r1, #16
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:226
	ee_u32 i;
	list_head *finder,*list=memblock;
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
 8001b9e:	600c      	str	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:213

	Returns:
	Pointer to the head of the list.

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
 8001ba0:	4691      	mov	r9, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:216
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 8001ba2:	0900      	lsrs	r0, r0, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:230
	/* create a fake items for the list head and tail */
	list->next=NULL;
	list->info=datablock;
	list->info->idx=0x0000;
	list->info->data16=(ee_s16)0x8080;
	memblock++;
 8001ba4:	f101 0208 	add.w	r2, r1, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:216

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
 8001ba8:	1e87      	subs	r7, r0, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:217
	list_head *memblock_end=memblock+size;
 8001baa:	eb01 08c7 	add.w	r8, r1, r7, lsl #3
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:286
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001bae:	4598      	cmp	r8, r3
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:227
	list_head *finder,*list=memblock;
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
	list->info=datablock;
 8001bb0:	f8c1 8004 	str.w	r8, [r1, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:219
	/* calculated pointers for the list */
	ee_u32 per_item=16+sizeof(struct list_data_s);
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
	list_head *memblock_end=memblock+size;
	list_data *datablock=(list_data *)(memblock_end);
	list_data *datablock_end=datablock+size;
 8001bb4:	eb08 0087 	add.w	r0, r8, r7, lsl #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:228
	list_data info;

	/* create a fake items for the list head and tail */
	list->next=NULL;
	list->info=datablock;
	list->info->idx=0x0000;
 8001bb8:	f8a8 4002 	strh.w	r4, [r8, #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:231
	list->info->data16=(ee_s16)0x8080;
	memblock++;
	datablock++;
 8001bbc:	f108 0104 	add.w	r1, r8, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:229

	/* create a fake items for the list head and tail */
	list->next=NULL;
	list->info=datablock;
	list->info->idx=0x0000;
	list->info->data16=(ee_s16)0x8080;
 8001bc0:	f82a 5037 	strh.w	r5, [sl, r7, lsl #3]
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:286
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001bc4:	d903      	bls.n	8001bce <core_list_init+0x46>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:288
		return NULL;
	if ((*datablock+1) >= datablock_end)
 8001bc6:	f108 0508 	add.w	r5, r8, #8
 8001bca:	42a8      	cmp	r0, r5
 8001bcc:	d846      	bhi.n	8001c5c <core_list_init+0xd4>
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:237 (discriminator 1)
	info.idx=0x7fff;
	info.data16=(ee_s16)0xffff;
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
 8001bce:	b32f      	cbz	r7, 8001c1c <core_list_init+0x94>
 8001bd0:	fa1f fb89 	uxth.w	fp, r9
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:237
 8001bd4:	2600      	movs	r6, #0
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:286 (discriminator 3)
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001bd6:	f102 0508 	add.w	r5, r2, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:288 (discriminator 3)
		return NULL;
	if ((*datablock+1) >= datablock_end)
 8001bda:	f101 0e04 	add.w	lr, r1, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:286 (discriminator 3)
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
 8001bde:	45a8      	cmp	r8, r5
 8001be0:	d919      	bls.n	8001c16 <core_list_init+0x8e>
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:238
	info.data16=(ee_s16)0xffff;
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
 8001be2:	b2b3      	uxth	r3, r6
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:288
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
		return NULL;
	if ((*datablock+1) >= datablock_end)
 8001be4:	4570      	cmp	r0, lr
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:239
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 8001be6:	ea83 0c0b 	eor.w	ip, r3, fp
 8001bea:	f003 0307 	and.w	r3, r3, #7
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:288
	, list_head *memblock_end, list_data *datablock_end) {
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
		return NULL;
	if ((*datablock+1) >= datablock_end)
 8001bee:	d912      	bls.n	8001c16 <core_list_init+0x8e>
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:239
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 8001bf0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:293
	if ((*datablock+1) >= datablock_end)
		return NULL;
		
	newitem=*memblock;
	(*memblock)++;
	newitem->next=insert_point->next;
 8001bf4:	6014      	str	r4, [r2, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:294
	insert_point->next=newitem;
 8001bf6:	f8ca 2000 	str.w	r2, [sl]
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001bfa:	4614      	mov	r4, r2
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:239
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 8001bfc:	f00c 0c78 	and.w	ip, ip, #120	; 0x78
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:296
	newitem=*memblock;
	(*memblock)++;
	newitem->next=insert_point->next;
	insert_point->next=newitem;
	
	newitem->info=*datablock;
 8001c00:	6051      	str	r1, [r2, #4]
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001c02:	f647 72ff 	movw	r2, #32767	; 0x7fff
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:239
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
 8001c06:	ea4c 0303 	orr.w	r3, ip, r3
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001c0a:	804a      	strh	r2, [r1, #2]
 8001c0c:	462a      	mov	r2, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:121
	}
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
 8001c0e:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
 8001c12:	800b      	strh	r3, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	to->idx=from->idx;
 8001c14:	4671      	mov	r1, lr
core_list_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:237
	info.idx=0x7fff;
	info.data16=(ee_s16)0xffff;
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	
	/* then insert size items */
	for (i=0; i<size; i++) {
 8001c16:	3601      	adds	r6, #1
 8001c18:	42b7      	cmp	r7, r6
 8001c1a:	d1dc      	bne.n	8001bd6 <core_list_init+0x4e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:247
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
		if (i<size/5) /* first 20% of the list in order */
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <core_list_init+0xf8>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:246
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
 8001c1e:	2002      	movs	r0, #2
 8001c20:	2101      	movs	r1, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:247
		if (i<size/5) /* first 20% of the list in order */
 8001c22:	fba3 3707 	umull	r3, r7, r3, r7
 8001c26:	40c7      	lsrs	r7, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:246
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
 8001c28:	e004      	b.n	8001c34 <core_list_init+0xac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:248
		if (i<size/5) /* first 20% of the list in order */
			finder->info->idx=i++;
 8001c2a:	6863      	ldr	r3, [r4, #4]
 8001c2c:	8059      	strh	r1, [r3, #2]
 8001c2e:	3001      	adds	r0, #1
 8001c30:	3101      	adds	r1, #1
 8001c32:	462c      	mov	r4, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:251
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001c34:	0203      	lsls	r3, r0, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:246
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
 8001c36:	6825      	ldr	r5, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:251
		if (i<size/5) /* first 20% of the list in order */
			finder->info->idx=i++;
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001c38:	ea81 0209 	eor.w	r2, r1, r9
 8001c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:246
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
 8001c40:	b13d      	cbz	r5, 8001c52 <core_list_init+0xca>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:251
		if (i<size/5) /* first 20% of the list in order */
			finder->info->idx=i++;
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001c42:	4313      	orrs	r3, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:247
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
		if (i<size/5) /* first 20% of the list in order */
 8001c44:	428f      	cmp	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:251
			finder->info->idx=i++;
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001c46:	f3c3 030d 	ubfx	r3, r3, #0, #14
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:247
	}
	/* and now index the list so we know initial seed order of the list */
	finder=list->next;
	i=1;
	while (finder->next!=NULL) {
		if (i<size/5) /* first 20% of the list in order */
 8001c4a:	d8ee      	bhi.n	8001c2a <core_list_init+0xa2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:251
			finder->info->idx=i++;
		else { 
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
 8001c4c:	6862      	ldr	r2, [r4, #4]
 8001c4e:	8053      	strh	r3, [r2, #2]
 8001c50:	e7ed      	b.n	8001c2e <core_list_init+0xa6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:255
		}
		finder=finder->next;
	}
	list = core_list_mergesort(list,cmp_idx,NULL);
 8001c52:	4650      	mov	r0, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:266
		finder=finder->next;
	}
	ee_printf("\n");
#endif
	return list;
}
 8001c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:255
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
		}
		finder=finder->next;
	}
	list = core_list_mergesort(list,cmp_idx,NULL);
 8001c58:	f7ff bd66 	b.w	8001728 <core_list_mergesort.constprop.2>
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:121
	}
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
 8001c5c:	f64f 7eff 	movw	lr, #65535	; 0xffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	to->idx=from->idx;
 8001c60:	f647 76ff 	movw	r6, #32767	; 0x7fff
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:293
	if ((*datablock+1) >= datablock_end)
		return NULL;
		
	newitem=*memblock;
	(*memblock)++;
	newitem->next=insert_point->next;
 8001c64:	f8ca 4008 	str.w	r4, [sl, #8]
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001c68:	4614      	mov	r4, r2
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:294
		return NULL;
		
	newitem=*memblock;
	(*memblock)++;
	newitem->next=insert_point->next;
	insert_point->next=newitem;
 8001c6a:	f8ca 2000 	str.w	r2, [sl]
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001c6e:	461a      	mov	r2, r3
core_list_insert_new():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:296
	newitem=*memblock;
	(*memblock)++;
	newitem->next=insert_point->next;
	insert_point->next=newitem;
	
	newitem->info=*datablock;
 8001c70:	f8ca 100c 	str.w	r1, [sl, #12]
copy_info():
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
	to->idx=from->idx;
 8001c74:	4629      	mov	r1, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:121
	}
	return a->idx - b->idx;
}

void copy_info(list_data *to,list_data *from) {
	to->data16=from->data16;
 8001c76:	f8a8 e004 	strh.w	lr, [r8, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_list_join.c:122
	to->idx=from->idx;
 8001c7a:	f8a8 6006 	strh.w	r6, [r8, #6]
 8001c7e:	e7a6      	b.n	8001bce <core_list_init+0x46>
 8001c80:	cccccccd 	.word	0xcccccccd

08001c84 <core_main>:
core_main():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:89
	4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE core_main(uint32_t iterations) {
 8001c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c88:	b09b      	sub	sp, #108	; 0x6c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:90
	int argc=0;
 8001c8a:	2300      	movs	r3, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:89
	4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE core_main(uint32_t iterations) {
 8001c8c:	4604      	mov	r4, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:104
	core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
	/* first call any initializations needed */
	portable_init(&(results[0].port), &argc, argv);
 8001c8e:	aa08      	add	r2, sp, #32
 8001c90:	a907      	add	r1, sp, #28
 8001c92:	f10d 0066 	add.w	r0, sp, #102	; 0x66
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:90

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE core_main(uint32_t iterations) {
	int argc=0;
 8001c96:	9307      	str	r3, [sp, #28]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:104
	core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
	/* first call any initializations needed */
	portable_init(&(results[0].port), &argc, argv);
 8001c98:	f000 fe28 	bl	80028ec <portable_init>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:110
	/* First some checks to make sure benchmark will run ok */
	if (sizeof(struct list_head_s)>128) {
		ee_printf("list_head structure too big for comparable data!\n");
		return MAIN_RETURN_VAL;
	}
	results[0].seed1=get_seed(1);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f000 fff5 	bl	8002c8c <get_seed_32>
 8001ca2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:111
	results[0].seed2=get_seed(2);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f000 fff0 	bl	8002c8c <get_seed_32>
 8001cac:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:112
	results[0].seed3=get_seed(3);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 ffeb 	bl	8002c8c <get_seed_32>
 8001cb6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:117
	results[0].iterations=iterations; //get_seed_32(4);
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
 8001cba:	2005      	movs	r0, #5
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:113
		return MAIN_RETURN_VAL;
	}
	results[0].seed1=get_seed(1);
	results[0].seed2=get_seed(2);
	results[0].seed3=get_seed(3);
	results[0].iterations=iterations; //get_seed_32(4);
 8001cbc:	9410      	str	r4, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:117
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
 8001cbe:	f000 ffe5 	bl	8002c8c <get_seed_32>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:118
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f000 8101 	beq.w	8001eca <core_main+0x246>
 8001cc8:	f000 0401 	and.w	r4, r0, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:122
		results[0].execs=ALL_ALGORITHMS_MASK;
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
 8001ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cce:	4601      	mov	r1, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:117
	results[0].seed3=get_seed(3);
	results[0].iterations=iterations; //get_seed_32(4);
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
 8001cd0:	9011      	str	r0, [sp, #68]	; 0x44
 8001cd2:	4625      	mov	r5, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:122
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
		results[0].execs=ALL_ALGORITHMS_MASK;
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 8101 	bne.w	8001edc <core_main+0x258>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:122 (discriminator 1)
 8001cda:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8106 	beq.w	8001ef0 <core_main+0x26c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:173
	for (i=0; i<NUM_ALGORITHMS; i++) {
		if ((1<<(ee_u32)i) & results[0].execs)
			num_algorithms++;
	}
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
 8001ce4:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8001ce8:	f3c1 0340 	ubfx	r3, r1, #1, #1
 8001cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:135
		results[0].seed3=0x66;
	}
#if (MEM_METHOD==MEM_STATIC)
	results[0].memblock[0]=(void *)static_memblk;
	results[0].size=TOTAL_DATA_SIZE;
	results[0].err=0;
 8001cf0:	2700      	movs	r7, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:173
	for (i=0; i<NUM_ALGORITHMS; i++) {
		if ((1<<(ee_u32)i) & results[0].execs)
			num_algorithms++;
	}
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
 8001cf2:	4413      	add	r3, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:133
		results[0].seed1=0x3415;
		results[0].seed2=0x3415;
		results[0].seed3=0x66;
	}
#if (MEM_METHOD==MEM_STATIC)
	results[0].memblock[0]=(void *)static_memblk;
 8001cf4:	4ebf      	ldr	r6, [pc, #764]	; (8001ff4 <core_main+0x370>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:135
	results[0].size=TOTAL_DATA_SIZE;
	results[0].err=0;
 8001cf6:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:173
	for (i=0; i<NUM_ALGORITHMS; i++) {
		if ((1<<(ee_u32)i) & results[0].execs)
			num_algorithms++;
	}
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
 8001cfa:	f001 0202 	and.w	r2, r1, #2
 8001cfe:	4423      	add	r3, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:133
		results[0].seed1=0x3415;
		results[0].seed2=0x3415;
		results[0].seed3=0x66;
	}
#if (MEM_METHOD==MEM_STATIC)
	results[0].memblock[0]=(void *)static_memblk;
 8001d00:	960b      	str	r6, [sp, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:173
	for (i=0; i<NUM_ALGORITHMS; i++) {
		if ((1<<(ee_u32)i) & results[0].execs)
			num_algorithms++;
	}
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
 8001d02:	f001 0704 	and.w	r7, r1, #4
 8001d06:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d0a:	900f      	str	r0, [sp, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:177
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
 8001d0c:	b10c      	cbz	r4, 8001d12 <core_main+0x8e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:180
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
			j++;
 8001d0e:	2401      	movs	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:179
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 8001d10:	960c      	str	r6, [sp, #48]	; 0x30
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:177
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
 8001d12:	b132      	cbz	r2, 8001d22 <core_main+0x9e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:180
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
			j++;
 8001d14:	f104 0e01 	add.w	lr, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:179
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 8001d18:	fb00 6304 	mla	r3, r0, r4, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:180
			j++;
 8001d1c:	fa1f f48e 	uxth.w	r4, lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:179
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 8001d20:	930d      	str	r3, [sp, #52]	; 0x34
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:177
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
 8001d22:	b117      	cbz	r7, 8001d2a <core_main+0xa6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:179 (discriminator 1)
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
 8001d24:	fb00 6404 	mla	r4, r0, r4, r6
 8001d28:	940e      	str	r4, [sp, #56]	; 0x38
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:185 (discriminator 2)
			j++;
		}
	}
	/* call inits */
	for (i=0 ; i<MULTITHREAD; i++) {
		if (results[i].execs & ID_LIST) {
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	d16b      	bne.n	8001e06 <core_main+0x182>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:188
			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
		}
		if (results[i].execs & ID_MATRIX) {
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	d174      	bne.n	8001e1c <core_main+0x198>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:191
			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
		}
		if (results[i].execs & ID_STATE) {
 8001d32:	0748      	lsls	r0, r1, #29
 8001d34:	f100 8081 	bmi.w	8001e3a <core_main+0x1b6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:197 (discriminator 2)
			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
		}
	}
	
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
 8001d38:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	f000 8087 	beq.w	8001e4e <core_main+0x1ca>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:215
		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
			divisor=1;
		results[0].iterations*=1+10/divisor;
	}
	/* perform actual benchmark */
	start_time();
 8001d40:	f000 fdb2 	bl	80028a8 <start_time>
iterate():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:43
void *iterate(void *pres) {
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
	ee_u32 iterations=res->iterations;
	res->crc=0;
 8001d44:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:42
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
	ee_u32 iterations=res->iterations;
 8001d46:	9d10      	ldr	r5, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:43
	res->crc=0;
 8001d48:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:44
	res->crclist=0;
 8001d4c:	f8ad 405e 	strh.w	r4, [sp, #94]	; 0x5e
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:45
	res->crcmatrix=0;
 8001d50:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:46
	res->crcstate=0;
 8001d54:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:48

	for (i=0; i<iterations; i++) {
 8001d58:	b1d5      	cbz	r5, 8001d90 <core_main+0x10c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:49
		crc=core_bench_list(res,1);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	a809      	add	r0, sp, #36	; 0x24
 8001d5e:	f7ff fd3f 	bl	80017e0 <core_bench_list>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:50
		res->crc=crcu16(crc,res->crc);
 8001d62:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8001d66:	f000 ffb5 	bl	8002cd4 <crcu16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:51
		crc=core_bench_list(res,-1);
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:50
	res->crcmatrix=0;
	res->crcstate=0;

	for (i=0; i<iterations; i++) {
		crc=core_bench_list(res,1);
		res->crc=crcu16(crc,res->crc);
 8001d6e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:51
		crc=core_bench_list(res,-1);
 8001d72:	a809      	add	r0, sp, #36	; 0x24
 8001d74:	f7ff fd34 	bl	80017e0 <core_bench_list>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:52
		res->crc=crcu16(crc,res->crc);
 8001d78:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8001d7c:	f000 ffaa 	bl	8002cd4 <crcu16>
 8001d80:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:53
		if (i==0) res->crclist=res->crc;
 8001d84:	2c00      	cmp	r4, #0
 8001d86:	f000 8235 	beq.w	80021f4 <core_main+0x570>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:48
	res->crc=0;
	res->crclist=0;
	res->crcmatrix=0;
	res->crcstate=0;

	for (i=0; i<iterations; i++) {
 8001d8a:	3401      	adds	r4, #1
 8001d8c:	42a5      	cmp	r5, r4
 8001d8e:	d1e4      	bne.n	8001d5a <core_main+0xd6>
core_main():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:231
		core_stop_parallel(&results[i]);
	}
#else
	iterate(&results[0]);
#endif
	stop_time();
 8001d90:	f000 fd92 	bl	80028b8 <stop_time>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:232
	total_time=get_time();
 8001d94:	f000 fd98 	bl	80028c8 <get_time>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:234
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
 8001d98:	2100      	movs	r1, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:232
	}
#else
	iterate(&results[0]);
#endif
	stop_time();
	total_time=get_time();
 8001d9a:	4681      	mov	r9, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:234
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
 8001d9c:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8001da0:	f001 f980 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:235
	seedcrc=crc16(results[0].seed2,seedcrc);
 8001da4:	4601      	mov	r1, r0
 8001da6:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
 8001daa:	f001 f97b 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:236
	seedcrc=crc16(results[0].seed3,seedcrc);
 8001dae:	4601      	mov	r1, r0
 8001db0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8001db4:	f001 f976 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:237
	seedcrc=crc16(results[0].size,seedcrc);
 8001db8:	4601      	mov	r1, r0
 8001dba:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8001dbe:	f001 f971 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:239
	
	switch (seedcrc) { /* test known output for common seeds */
 8001dc2:	f647 3305 	movw	r3, #31493	; 0x7b05
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:237
	total_time=get_time();
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
	seedcrc=crc16(results[0].seed2,seedcrc);
	seedcrc=crc16(results[0].seed3,seedcrc);
	seedcrc=crc16(results[0].size,seedcrc);
 8001dc6:	9004      	str	r0, [sp, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:239
	
	switch (seedcrc) { /* test known output for common seeds */
 8001dc8:	4298      	cmp	r0, r3
 8001dca:	f000 81fc 	beq.w	80021c6 <core_main+0x542>
 8001dce:	f200 8097 	bhi.w	8001f00 <core_main+0x27c>
 8001dd2:	f641 03f2 	movw	r3, #6386	; 0x18f2
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	f000 81e5 	beq.w	80021a6 <core_main+0x522>
 8001ddc:	f644 63af 	movw	r3, #20143	; 0x4eaf
 8001de0:	4298      	cmp	r0, r3
 8001de2:	f040 8115 	bne.w	8002010 <core_main+0x38c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:251
			ee_printf("6k validation run parameters for coremark.\n");
			break;
		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
			known_id=2;
			ee_printf("Profile generation run parameters for coremark.\n");
			break;
 8001de6:	f24e 53a4 	movw	r3, #58788	; 0xe5a4
 8001dea:	f245 6208 	movw	r2, #22024	; 0x5608
 8001dee:	f646 2179 	movw	r1, #27257	; 0x6a79
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:250
			known_id=1;
			ee_printf("6k validation run parameters for coremark.\n");
			break;
		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
			known_id=2;
			ee_printf("Profile generation run parameters for coremark.\n");
 8001df2:	4881      	ldr	r0, [pc, #516]	; (8001ff8 <core_main+0x374>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:251
			break;
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	469b      	mov	fp, r3
 8001df8:	9202      	str	r2, [sp, #8]
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	9101      	str	r1, [sp, #4]
 8001dfe:	460f      	mov	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:250
			known_id=1;
			ee_printf("6k validation run parameters for coremark.\n");
			break;
		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
			known_id=2;
			ee_printf("Profile generation run parameters for coremark.\n");
 8001e00:	f001 fb92 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:251
			break;
 8001e04:	e094      	b.n	8001f30 <core_main+0x2ac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:186
		}
	}
	/* call inits */
	for (i=0 ; i<MULTITHREAD; i++) {
		if (results[i].execs & ID_LIST) {
			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
 8001e06:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8001e0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e0c:	f7ff febc 	bl	8001b88 <core_list_init>
 8001e10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001e12:	9012      	str	r0, [sp, #72]	; 0x48
 8001e14:	f001 0202 	and.w	r2, r1, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:188
		}
		if (results[i].execs & ID_MATRIX) {
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d08a      	beq.n	8001d32 <core_main+0xae>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:189
			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
 8001e1c:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
 8001e20:	ab13      	add	r3, sp, #76	; 0x4c
 8001e22:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8001e26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001e28:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001e2e:	f000 fccd 	bl	80027cc <core_init_matrix>
 8001e32:	9911      	ldr	r1, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:191
		}
		if (results[i].execs & ID_STATE) {
 8001e34:	0748      	lsls	r0, r1, #29
 8001e36:	f57f af7f 	bpl.w	8001d38 <core_main+0xb4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:192
			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
 8001e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e3c:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8001e40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001e42:	f000 fd5b 	bl	80028fc <core_init_state>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:197
		}
	}
	
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
 8001e46:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001e48:	2e00      	cmp	r6, #0
 8001e4a:	f47f af79 	bne.w	8001d40 <core_main+0xbc>
 8001e4e:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:202
		secs_ret secs_passed=0;
		ee_u32 divisor;
		results[0].iterations=1;
		while (secs_passed < (secs_ret)1) {
			results[0].iterations*=10;
 8001e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	9310      	str	r3, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:203
			start_time();
 8001e58:	f000 fd26 	bl	80028a8 <start_time>
iterate():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:42
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
	ee_u32 iterations=res->iterations;
 8001e5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:43
	res->crc=0;
 8001e5e:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:44
	res->crclist=0;
 8001e62:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:45
	res->crcmatrix=0;
 8001e66:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:46
	res->crcstate=0;
 8001e6a:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:48

	for (i=0; i<iterations; i++) {
 8001e6e:	b1dd      	cbz	r5, 8001ea8 <core_main+0x224>
 8001e70:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:49
		crc=core_bench_list(res,1);
 8001e72:	2101      	movs	r1, #1
 8001e74:	a809      	add	r0, sp, #36	; 0x24
 8001e76:	f7ff fcb3 	bl	80017e0 <core_bench_list>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:50
		res->crc=crcu16(crc,res->crc);
 8001e7a:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8001e7e:	f000 ff29 	bl	8002cd4 <crcu16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:51
		crc=core_bench_list(res,-1);
 8001e82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:50
	res->crcmatrix=0;
	res->crcstate=0;

	for (i=0; i<iterations; i++) {
		crc=core_bench_list(res,1);
		res->crc=crcu16(crc,res->crc);
 8001e86:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:51
		crc=core_bench_list(res,-1);
 8001e8a:	a809      	add	r0, sp, #36	; 0x24
 8001e8c:	f7ff fca8 	bl	80017e0 <core_bench_list>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:52
		res->crc=crcu16(crc,res->crc);
 8001e90:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8001e94:	f000 ff1e 	bl	8002cd4 <crcu16>
 8001e98:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:53
		if (i==0) res->crclist=res->crc;
 8001e9c:	2c00      	cmp	r4, #0
 8001e9e:	f000 81a6 	beq.w	80021ee <core_main+0x56a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:48
	res->crc=0;
	res->crclist=0;
	res->crcmatrix=0;
	res->crcstate=0;

	for (i=0; i<iterations; i++) {
 8001ea2:	3401      	adds	r4, #1
 8001ea4:	42a5      	cmp	r5, r4
 8001ea6:	d1e4      	bne.n	8001e72 <core_main+0x1ee>
core_main():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:205
		results[0].iterations=1;
		while (secs_passed < (secs_ret)1) {
			results[0].iterations*=10;
			start_time();
			iterate(&results[0]);
			stop_time();
 8001ea8:	f000 fd06 	bl	80028b8 <stop_time>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:206
			secs_passed=time_in_secs(get_time());
 8001eac:	f000 fd0c 	bl	80028c8 <get_time>
 8001eb0:	f000 fd14 	bl	80028dc <time_in_secs>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:201
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
		secs_ret secs_passed=0;
		ee_u32 divisor;
		results[0].iterations=1;
		while (secs_passed < (secs_ret)1) {
 8001eb4:	b908      	cbnz	r0, 8001eba <core_main+0x236>
 8001eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001eb8:	e7ca      	b.n	8001e50 <core_main+0x1cc>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:212
		}
		/* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
		divisor=(ee_u32)secs_passed;
		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
			divisor=1;
		results[0].iterations*=1+10/divisor;
 8001eba:	220a      	movs	r2, #10
 8001ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ebe:	fbb2 f0f0 	udiv	r0, r2, r0
 8001ec2:	fb00 3303 	mla	r3, r0, r3, r3
 8001ec6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ec8:	e73a      	b.n	8001d40 <core_main+0xbc>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:119
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
		results[0].execs=ALL_ALGORITHMS_MASK;
 8001eca:	2307      	movs	r3, #7
 8001ecc:	2501      	movs	r5, #1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	9311      	str	r3, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:122
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
 8001ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ed4:	462c      	mov	r4, r5
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f43f aeff 	beq.w	8001cda <core_main+0x56>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:127
		results[0].seed1=0;
		results[0].seed2=0;
		results[0].seed3=0x66;
	}
	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f47f af01 	bne.w	8001ce4 <core_main+0x60>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:127 (discriminator 1)
 8001ee2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f47f aefc 	bne.w	8001ce4 <core_main+0x60>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:128
		results[0].seed1=0x3415;
 8001eec:	f243 4315 	movw	r3, #13333	; 0x3415
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:130
		results[0].seed2=0x3415;
		results[0].seed3=0x66;
 8001ef0:	2266      	movs	r2, #102	; 0x66
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:128
		results[0].seed1=0;
		results[0].seed2=0;
		results[0].seed3=0x66;
	}
	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
		results[0].seed1=0x3415;
 8001ef2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:129
		results[0].seed2=0x3415;
 8001ef6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:130
		results[0].seed3=0x66;
 8001efa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8001efe:	e6f1      	b.n	8001ce4 <core_main+0x60>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:239
	seedcrc=crc16(results[0].seed1,seedcrc);
	seedcrc=crc16(results[0].seed2,seedcrc);
	seedcrc=crc16(results[0].seed3,seedcrc);
	seedcrc=crc16(results[0].size,seedcrc);
	
	switch (seedcrc) { /* test known output for common seeds */
 8001f00:	f648 2302 	movw	r3, #35330	; 0x8a02
 8001f04:	4298      	cmp	r0, r3
 8001f06:	f000 813e 	beq.w	8002186 <core_main+0x502>
 8001f0a:	f64e 13f5 	movw	r3, #59893	; 0xe9f5
 8001f0e:	4298      	cmp	r0, r3
 8001f10:	d17e      	bne.n	8002010 <core_main+0x38c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:255
			ee_printf("Profile generation run parameters for coremark.\n");
			break;
		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
			known_id=3;
			ee_printf("2K performance run parameters for coremark.\n");
			break;
 8001f12:	f648 633a 	movw	r3, #36410	; 0x8e3a
 8001f16:	f641 72d7 	movw	r2, #8151	; 0x1fd7
 8001f1a:	f24e 7114 	movw	r1, #59156	; 0xe714
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:254
			known_id=2;
			ee_printf("Profile generation run parameters for coremark.\n");
			break;
		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
			known_id=3;
			ee_printf("2K performance run parameters for coremark.\n");
 8001f1e:	4837      	ldr	r0, [pc, #220]	; (8001ffc <core_main+0x378>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:255
			break;
 8001f20:	9303      	str	r3, [sp, #12]
 8001f22:	469b      	mov	fp, r3
 8001f24:	9202      	str	r2, [sp, #8]
 8001f26:	4692      	mov	sl, r2
 8001f28:	9101      	str	r1, [sp, #4]
 8001f2a:	460f      	mov	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:254
			known_id=2;
			ee_printf("Profile generation run parameters for coremark.\n");
			break;
		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
			known_id=3;
			ee_printf("2K performance run parameters for coremark.\n");
 8001f2c:	f001 fafc 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:265
		default:
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
 8001f30:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800200c <core_main+0x388>
 8001f34:	f8d8 6000 	ldr.w	r6, [r8]
 8001f38:	2e00      	cmp	r6, #0
 8001f3a:	d06d      	beq.n	8002018 <core_main+0x394>
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	f8cd 9014 	str.w	r9, [sp, #20]
 8001f42:	46b9      	mov	r9, r7
 8001f44:	4625      	mov	r5, r4
 8001f46:	e018      	b.n	8001f7a <core_main+0x2f6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:278 (discriminator 1)
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
				results[i].err++;
			}
			if ((results[i].execs & ID_STATE) &&
				(results[i].crcstate!=state_known_crc[known_id])) {
 8001f48:	f836 2c06 	ldrh.w	r2, [r6, #-6]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:277 (discriminator 1)
			if ((results[i].execs & ID_MATRIX) &&
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
				results[i].err++;
			}
			if ((results[i].execs & ID_STATE) &&
 8001f4c:	455a      	cmp	r2, fp
 8001f4e:	d04d      	beq.n	8001fec <core_main+0x368>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:279
				(results[i].crcstate!=state_known_crc[known_id])) {
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	4629      	mov	r1, r5
 8001f54:	482a      	ldr	r0, [pc, #168]	; (8002000 <core_main+0x37c>)
 8001f56:	f001 fa75 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:280
				results[i].err++;
 8001f5a:	f836 3c04 	ldrh.w	r3, [r6, #-4]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	f826 3c04 	strh.w	r3, [r6, #-4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:265 (discriminator 2)
		default:
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
 8001f66:	3501      	adds	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:282 (discriminator 2)
			if ((results[i].execs & ID_STATE) &&
				(results[i].crcstate!=state_known_crc[known_id])) {
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
				results[i].err++;
			}
			total_errors+=results[i].err;
 8001f68:	441c      	add	r4, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:265 (discriminator 2)
		default:
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
 8001f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001f6e:	b2ad      	uxth	r5, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:282 (discriminator 2)
			if ((results[i].execs & ID_STATE) &&
				(results[i].crcstate!=state_known_crc[known_id])) {
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
				results[i].err++;
			}
			total_errors+=results[i].err;
 8001f70:	b2a6      	uxth	r6, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:265 (discriminator 2)
		default:
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
 8001f72:	429d      	cmp	r5, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:282 (discriminator 2)
			if ((results[i].execs & ID_STATE) &&
				(results[i].crcstate!=state_known_crc[known_id])) {
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
				results[i].err++;
			}
			total_errors+=results[i].err;
 8001f74:	b234      	sxth	r4, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:265 (discriminator 2)
		default:
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
 8001f76:	f080 80ec 	bcs.w	8002152 <core_main+0x4ce>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:266
			results[i].err=0;
 8001f7a:	012e      	lsls	r6, r5, #4
 8001f7c:	ab1a      	add	r3, sp, #104	; 0x68
 8001f7e:	2200      	movs	r2, #0
 8001f80:	1977      	adds	r7, r6, r5
 8001f82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:267
			if ((results[i].execs & ID_LIST) && 
 8001f86:	f857 3c24 	ldr.w	r3, [r7, #-36]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:266
			total_errors=-1;
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
			results[i].err=0;
 8001f8a:	f827 2c04 	strh.w	r2, [r7, #-4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:267
			if ((results[i].execs & ID_LIST) && 
 8001f8e:	07d9      	lsls	r1, r3, #31
 8001f90:	d50d      	bpl.n	8001fae <core_main+0x32a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:268 (discriminator 1)
				(results[i].crclist!=list_known_crc[known_id])) {
 8001f92:	f837 2c0a 	ldrh.w	r2, [r7, #-10]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:267 (discriminator 1)
			break;
	}
	if (known_id>=0) {
		for (i=0 ; i<default_num_contexts; i++) {
			results[i].err=0;
			if ((results[i].execs & ID_LIST) && 
 8001f96:	454a      	cmp	r2, r9
 8001f98:	d009      	beq.n	8001fae <core_main+0x32a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:269
				(results[i].crclist!=list_known_crc[known_id])) {
				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
 8001f9a:	9b01      	ldr	r3, [sp, #4]
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4819      	ldr	r0, [pc, #100]	; (8002004 <core_main+0x380>)
 8001fa0:	f001 fa50 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:270
				results[i].err++;
 8001fa4:	f837 3c04 	ldrh.w	r3, [r7, #-4]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f827 3c04 	strh.w	r3, [r7, #-4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:272
			}
			if ((results[i].execs & ID_MATRIX) &&
 8001fae:	ab1a      	add	r3, sp, #104	; 0x68
 8001fb0:	1977      	adds	r7, r6, r5
 8001fb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8001fb6:	f857 3c24 	ldr.w	r3, [r7, #-36]
 8001fba:	079a      	lsls	r2, r3, #30
 8001fbc:	d50f      	bpl.n	8001fde <core_main+0x35a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:273 (discriminator 1)
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
 8001fbe:	f837 2c08 	ldrh.w	r2, [r7, #-8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:272 (discriminator 1)
			if ((results[i].execs & ID_LIST) && 
				(results[i].crclist!=list_known_crc[known_id])) {
				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
				results[i].err++;
			}
			if ((results[i].execs & ID_MATRIX) &&
 8001fc2:	4552      	cmp	r2, sl
 8001fc4:	d00b      	beq.n	8001fde <core_main+0x35a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:274
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
 8001fc6:	9b02      	ldr	r3, [sp, #8]
 8001fc8:	4629      	mov	r1, r5
 8001fca:	480f      	ldr	r0, [pc, #60]	; (8002008 <core_main+0x384>)
 8001fcc:	f001 fa3a 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:275
				results[i].err++;
 8001fd0:	f837 2c04 	ldrh.w	r2, [r7, #-4]
 8001fd4:	f857 3c24 	ldr.w	r3, [r7, #-36]
 8001fd8:	3201      	adds	r2, #1
 8001fda:	f827 2c04 	strh.w	r2, [r7, #-4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:278
			}
			if ((results[i].execs & ID_STATE) &&
				(results[i].crcstate!=state_known_crc[known_id])) {
 8001fde:	442e      	add	r6, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:277
			if ((results[i].execs & ID_MATRIX) &&
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
				results[i].err++;
			}
			if ((results[i].execs & ID_STATE) &&
 8001fe0:	f013 0f04 	tst.w	r3, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:278
				(results[i].crcstate!=state_known_crc[known_id])) {
 8001fe4:	ab1a      	add	r3, sp, #104	; 0x68
 8001fe6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:277
			if ((results[i].execs & ID_MATRIX) &&
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
				results[i].err++;
			}
			if ((results[i].execs & ID_STATE) &&
 8001fea:	d1ad      	bne.n	8001f48 <core_main+0x2c4>
 8001fec:	f936 3c04 	ldrsh.w	r3, [r6, #-4]
 8001ff0:	e7b9      	b.n	8001f66 <core_main+0x2e2>
 8001ff2:	bf00      	nop
 8001ff4:	20000208 	.word	0x20000208
 8001ff8:	08004230 	.word	0x08004230
 8001ffc:	08004260 	.word	0x08004260
 8002000:	0800431c 	.word	0x0800431c
 8002004:	080042b8 	.word	0x080042b8
 8002008:	080042e8 	.word	0x080042e8
 800200c:	20000010 	.word	0x20000010
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:239
	seedcrc=crc16(results[0].seed1,seedcrc);
	seedcrc=crc16(results[0].seed2,seedcrc);
	seedcrc=crc16(results[0].seed3,seedcrc);
	seedcrc=crc16(results[0].size,seedcrc);
	
	switch (seedcrc) { /* test known output for common seeds */
 8002010:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002014:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800220c <core_main+0x588>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:285
				results[i].err++;
			}
			total_errors+=results[i].err;
		}
	}
	total_errors+=check_data_types();
 8002018:	f001 f8e6 	bl	80031e8 <check_data_types>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:287
	/* and report results */
	ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
 800201c:	990f      	ldr	r1, [sp, #60]	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:285
				results[i].err++;
			}
			total_errors+=results[i].err;
		}
	}
	total_errors+=check_data_types();
 800201e:	1835      	adds	r5, r6, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:287
	/* and report results */
	ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
 8002020:	4876      	ldr	r0, [pc, #472]	; (80021fc <core_main+0x578>)
 8002022:	f001 fa0f 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:288
	ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
 8002026:	4649      	mov	r1, r9
 8002028:	4875      	ldr	r0, [pc, #468]	; (8002200 <core_main+0x57c>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:285
				results[i].err++;
			}
			total_errors+=results[i].err;
		}
	}
	total_errors+=check_data_types();
 800202a:	b2ad      	uxth	r5, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:288
	/* and report results */
	ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
	ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
 800202c:	f001 fa0a 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:294
#if HAS_FLOAT
	ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#else 
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
 8002030:	4648      	mov	r0, r9
 8002032:	f000 fc53 	bl	80028dc <time_in_secs>
 8002036:	4601      	mov	r1, r0
 8002038:	4872      	ldr	r0, [pc, #456]	; (8002204 <core_main+0x580>)
 800203a:	f001 fa03 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:295
	if (time_in_secs(total_time) > 0)
 800203e:	4648      	mov	r0, r9
 8002040:	f000 fc4c 	bl	80028dc <time_in_secs>
 8002044:	2800      	cmp	r0, #0
 8002046:	f040 808c 	bne.w	8002162 <core_main+0x4de>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:298
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
 800204a:	4648      	mov	r0, r9
 800204c:	f000 fc46 	bl	80028dc <time_in_secs>
 8002050:	2809      	cmp	r0, #9
 8002052:	f240 8081 	bls.w	8002158 <core_main+0x4d4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:303
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
		total_errors++;
	}

	ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
 8002056:	9b10      	ldr	r3, [sp, #64]	; 0x40
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:300
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
		total_errors++;
 8002058:	b22d      	sxth	r5, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:303
	}

	ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
 800205a:	f8d8 1000 	ldr.w	r1, [r8]
 800205e:	486a      	ldr	r0, [pc, #424]	; (8002208 <core_main+0x584>)
 8002060:	fb01 f103 	mul.w	r1, r1, r3
 8002064:	4c69      	ldr	r4, [pc, #420]	; (800220c <core_main+0x588>)
 8002066:	f001 f9ed 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:304
	ee_printf("Compiler version : %s\n",COMPILER_VERSION);
 800206a:	4969      	ldr	r1, [pc, #420]	; (8002210 <core_main+0x58c>)
 800206c:	4869      	ldr	r0, [pc, #420]	; (8002214 <core_main+0x590>)
 800206e:	f001 f9e9 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:309
//	ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
#if (MULTITHREAD>1)
	ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
 8002072:	4969      	ldr	r1, [pc, #420]	; (8002218 <core_main+0x594>)
 8002074:	4869      	ldr	r0, [pc, #420]	; (800221c <core_main+0x598>)
 8002076:	f001 f9e5 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:311
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
 800207a:	9904      	ldr	r1, [sp, #16]
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <core_main+0x59c>)
 800207e:	f001 f9e1 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:312
	if (results[0].execs & ID_LIST)
 8002082:	9a11      	ldr	r2, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313
		for (i=0 ; i<default_num_contexts; i++) 
 8002084:	6823      	ldr	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:312
	ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
 8002086:	07d0      	lsls	r0, r2, #31
 8002088:	d515      	bpl.n	80020b6 <core_main+0x432>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313 (discriminator 1)
		for (i=0 ; i<default_num_contexts; i++) 
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80ab 	beq.w	80021e6 <core_main+0x562>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313 (discriminator 3)
 8002090:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:314 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
 8002092:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8002096:	aa1a      	add	r2, sp, #104	; 0x68
 8002098:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313 (discriminator 3)
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
 800209a:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:314 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
 800209c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80020a0:	4860      	ldr	r0, [pc, #384]	; (8002224 <core_main+0x5a0>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313 (discriminator 3)
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
 80020a2:	b2a4      	uxth	r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:314 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
 80020a4:	f833 2c0a 	ldrh.w	r2, [r3, #-10]
 80020a8:	f001 f9cc 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:313 (discriminator 3)
#endif
	ee_printf("Memory location  : %s\n",MEM_LOCATION);
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
 80020ac:	f8d8 3000 	ldr.w	r3, [r8]
 80020b0:	429c      	cmp	r4, r3
 80020b2:	d3ee      	bcc.n	8002092 <core_main+0x40e>
 80020b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:315
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
 80020b6:	0791      	lsls	r1, r2, #30
 80020b8:	d514      	bpl.n	80020e4 <core_main+0x460>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:316 (discriminator 1)
		for (i=0 ; i<default_num_contexts; i++) 
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03a      	beq.n	8002134 <core_main+0x4b0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:316 (discriminator 3)
 80020be:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:317 (discriminator 3)
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
 80020c0:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80020c4:	aa1a      	add	r2, sp, #104	; 0x68
 80020c6:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:316 (discriminator 3)
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
 80020c8:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:317 (discriminator 3)
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
 80020ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80020ce:	4856      	ldr	r0, [pc, #344]	; (8002228 <core_main+0x5a4>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:316 (discriminator 3)
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
 80020d0:	b2a4      	uxth	r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:317 (discriminator 3)
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
 80020d2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80020d6:	f001 f9b5 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:316 (discriminator 3)
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
 80020da:	f8d8 3000 	ldr.w	r3, [r8]
 80020de:	429c      	cmp	r4, r3
 80020e0:	d3ee      	bcc.n	80020c0 <core_main+0x43c>
 80020e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:318
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
 80020e4:	0752      	lsls	r2, r2, #29
 80020e6:	d512      	bpl.n	800210e <core_main+0x48a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:319 (discriminator 1)
		for (i=0 ; i<default_num_contexts; i++) 
 80020e8:	b323      	cbz	r3, 8002134 <core_main+0x4b0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:319 (discriminator 3)
 80020ea:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:320 (discriminator 3)
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
 80020ec:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80020f0:	aa1a      	add	r2, sp, #104	; 0x68
 80020f2:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:319 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
 80020f4:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:320 (discriminator 3)
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
 80020f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80020fa:	484c      	ldr	r0, [pc, #304]	; (800222c <core_main+0x5a8>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:319 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
 80020fc:	b2a4      	uxth	r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:320 (discriminator 3)
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
 80020fe:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8002102:	f001 f99f 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:319 (discriminator 3)
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
 8002106:	f8d8 3000 	ldr.w	r3, [r8]
 800210a:	429c      	cmp	r4, r3
 800210c:	d3ee      	bcc.n	80020ec <core_main+0x468>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:321 (discriminator 1)
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
 800210e:	b18b      	cbz	r3, 8002134 <core_main+0x4b0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:321 (discriminator 3)
 8002110:	2400      	movs	r4, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:322 (discriminator 3)
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
 8002112:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8002116:	aa1a      	add	r2, sp, #104	; 0x68
 8002118:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:321 (discriminator 3)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
 800211a:	3401      	adds	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:322 (discriminator 3)
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
 800211c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002120:	4843      	ldr	r0, [pc, #268]	; (8002230 <core_main+0x5ac>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:321 (discriminator 3)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
 8002122:	b2a4      	uxth	r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:322 (discriminator 3)
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
 8002124:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 8002128:	f001 f98c 	bl	8003444 <iprintf>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:321 (discriminator 3)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
 800212c:	f8d8 3000 	ldr.w	r3, [r8]
 8002130:	429c      	cmp	r4, r3
 8002132:	d3ee      	bcc.n	8002112 <core_main+0x48e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:323
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
	if (total_errors==0) {
 8002134:	2d00      	cmp	r5, #0
 8002136:	d022      	beq.n	800217e <core_main+0x4fa>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:342
			ee_printf("\n");
		}
#endif
	}
	if (total_errors>0)
		ee_printf("Errors detected\n");
 8002138:	bfcc      	ite	gt
 800213a:	483e      	ldrgt	r0, [pc, #248]	; (8002234 <core_main+0x5b0>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:344
	if (total_errors<0)
		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
 800213c:	483e      	ldrle	r0, [pc, #248]	; (8002238 <core_main+0x5b4>)
 800213e:	f001 f9f3 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:351
#if (MEM_METHOD==MEM_MALLOC)
	for (i=0 ; i<MULTITHREAD; i++) 
		portable_free(results[i].memblock[0]);
#endif
	/* And last call any target specific code for finalizing */
	portable_fini(&(results[0].port));
 8002142:	f10d 0066 	add.w	r0, sp, #102	; 0x66
 8002146:	f000 fbd5 	bl	80028f4 <portable_fini>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:354

	return MAIN_RETURN_VAL;	
}
 800214a:	2000      	movs	r0, #0
 800214c:	b01b      	add	sp, #108	; 0x6c
 800214e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002152:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002156:	e75f      	b.n	8002018 <core_main+0x394>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:299
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
 8002158:	4838      	ldr	r0, [pc, #224]	; (800223c <core_main+0x5b8>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:300
		total_errors++;
 800215a:	3501      	adds	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:299
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
 800215c:	f001 f9e4 	bl	8003528 <puts>
 8002160:	e779      	b.n	8002056 <core_main+0x3d2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:296
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#else 
	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
 8002162:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002164:	4648      	mov	r0, r9
 8002166:	f8d8 3000 	ldr.w	r3, [r8]
 800216a:	fb03 f404 	mul.w	r4, r3, r4
 800216e:	f000 fbb5 	bl	80028dc <time_in_secs>
 8002172:	fbb4 f1f0 	udiv	r1, r4, r0
 8002176:	4832      	ldr	r0, [pc, #200]	; (8002240 <core_main+0x5bc>)
 8002178:	f001 f964 	bl	8003444 <iprintf>
 800217c:	e765      	b.n	800204a <core_main+0x3c6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:324
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
	if (total_errors==0) {
		ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
 800217e:	4831      	ldr	r0, [pc, #196]	; (8002244 <core_main+0x5c0>)
 8002180:	f001 f9d2 	bl	8003528 <puts>
 8002184:	e7dd      	b.n	8002142 <core_main+0x4be>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:243
	
	switch (seedcrc) { /* test known output for common seeds */
		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
			known_id=0;
			ee_printf("6k performance run parameters for coremark.\n");
			break;
 8002186:	f645 6347 	movw	r3, #24135	; 0x5e47
 800218a:	f64b 6252 	movw	r2, #48722	; 0xbe52
 800218e:	f24d 41b0 	movw	r1, #54448	; 0xd4b0
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:242
	seedcrc=crc16(results[0].size,seedcrc);
	
	switch (seedcrc) { /* test known output for common seeds */
		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
			known_id=0;
			ee_printf("6k performance run parameters for coremark.\n");
 8002192:	482d      	ldr	r0, [pc, #180]	; (8002248 <core_main+0x5c4>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:243
			break;
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	469b      	mov	fp, r3
 8002198:	9202      	str	r2, [sp, #8]
 800219a:	4692      	mov	sl, r2
 800219c:	9101      	str	r1, [sp, #4]
 800219e:	460f      	mov	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:242
	seedcrc=crc16(results[0].size,seedcrc);
	
	switch (seedcrc) { /* test known output for common seeds */
		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
			known_id=0;
			ee_printf("6k performance run parameters for coremark.\n");
 80021a0:	f001 f9c2 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:243
			break;
 80021a4:	e6c4      	b.n	8001f30 <core_main+0x2ac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:259
			ee_printf("2K performance run parameters for coremark.\n");
			break;
		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
			known_id=4;
			ee_printf("2K validation run parameters for coremark.\n");
			break;
 80021a6:	f648 5384 	movw	r3, #36228	; 0x8d84
 80021aa:	f240 7247 	movw	r2, #1863	; 0x747
 80021ae:	f24e 31c1 	movw	r1, #58305	; 0xe3c1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:258
			known_id=3;
			ee_printf("2K performance run parameters for coremark.\n");
			break;
		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
			known_id=4;
			ee_printf("2K validation run parameters for coremark.\n");
 80021b2:	4826      	ldr	r0, [pc, #152]	; (800224c <core_main+0x5c8>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:259
			break;
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	469b      	mov	fp, r3
 80021b8:	9202      	str	r2, [sp, #8]
 80021ba:	4692      	mov	sl, r2
 80021bc:	9101      	str	r1, [sp, #4]
 80021be:	460f      	mov	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:258
			known_id=3;
			ee_printf("2K performance run parameters for coremark.\n");
			break;
		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
			known_id=4;
			ee_printf("2K validation run parameters for coremark.\n");
 80021c0:	f001 f9b2 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:259
			break;
 80021c4:	e6b4      	b.n	8001f30 <core_main+0x2ac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:247
			ee_printf("6k performance run parameters for coremark.\n");
			break;
		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
			known_id=1;
			ee_printf("6k validation run parameters for coremark.\n");
			break;
 80021c6:	f643 13bf 	movw	r3, #14783	; 0x39bf
 80021ca:	f241 1299 	movw	r2, #4505	; 0x1199
 80021ce:	f44f 514d 	mov.w	r1, #13120	; 0x3340
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:246
			known_id=0;
			ee_printf("6k performance run parameters for coremark.\n");
			break;
		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
			known_id=1;
			ee_printf("6k validation run parameters for coremark.\n");
 80021d2:	481f      	ldr	r0, [pc, #124]	; (8002250 <core_main+0x5cc>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:247
			break;
 80021d4:	9303      	str	r3, [sp, #12]
 80021d6:	469b      	mov	fp, r3
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	4692      	mov	sl, r2
 80021dc:	9101      	str	r1, [sp, #4]
 80021de:	460f      	mov	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:246
			known_id=0;
			ee_printf("6k performance run parameters for coremark.\n");
			break;
		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
			known_id=1;
			ee_printf("6k validation run parameters for coremark.\n");
 80021e0:	f001 f9a2 	bl	8003528 <puts>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:247
			break;
 80021e4:	e6a4      	b.n	8001f30 <core_main+0x2ac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:315
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
	if (results[0].execs & ID_LIST)
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
 80021e6:	f012 0302 	ands.w	r3, r2, #2
 80021ea:	d1a3      	bne.n	8002134 <core_main+0x4b0>
 80021ec:	e77a      	b.n	80020e4 <core_main+0x460>
iterate():
/Users/lix/Projects/luna/performance/Release/../coremark/core_main.c:53
	for (i=0; i<iterations; i++) {
		crc=core_bench_list(res,1);
		res->crc=crcu16(crc,res->crc);
		crc=core_bench_list(res,-1);
		res->crc=crcu16(crc,res->crc);
		if (i==0) res->crclist=res->crc;
 80021ee:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
 80021f2:	e656      	b.n	8001ea2 <core_main+0x21e>
 80021f4:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
 80021f8:	e5c7      	b.n	8001d8a <core_main+0x106>
 80021fa:	bf00      	nop
 80021fc:	0800434c 	.word	0x0800434c
 8002200:	08004364 	.word	0x08004364
 8002204:	0800437c 	.word	0x0800437c
 8002208:	080043ec 	.word	0x080043ec
 800220c:	20000010 	.word	0x20000010
 8002210:	08004404 	.word	0x08004404
 8002214:	08004448 	.word	0x08004448
 8002218:	08004460 	.word	0x08004460
 800221c:	08004468 	.word	0x08004468
 8002220:	08004480 	.word	0x08004480
 8002224:	0800449c 	.word	0x0800449c
 8002228:	080044b8 	.word	0x080044b8
 800222c:	080044d4 	.word	0x080044d4
 8002230:	080044f0 	.word	0x080044f0
 8002234:	08004558 	.word	0x08004558
 8002238:	08004568 	.word	0x08004568
 800223c:	080043ac 	.word	0x080043ac
 8002240:	08004394 	.word	0x08004394
 8002244:	0800450c 	.word	0x0800450c
 8002248:	080041d8 	.word	0x080041d8
 800224c:	0800428c 	.word	0x0800428c
 8002250:	08004204 	.word	0x08004204

08002254 <matrix_test>:
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:117
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002258:	b08f      	sub	sp, #60	; 0x3c
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:119
	ee_u16 crc=0;
	MATDAT clipval=matrix_big(val);
 800225a:	f8df a54c 	ldr.w	sl, [pc, #1356]	; 80027a8 <matrix_test+0x554>
matrix_add_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800225e:	4683      	mov	fp, r0
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:117
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 8002260:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8002264:	9108      	str	r1, [sp, #32]
 8002266:	920a      	str	r2, [sp, #40]	; 0x28
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:119
	ee_u16 crc=0;
	MATDAT clipval=matrix_big(val);
 8002268:	ea4e 0a0a 	orr.w	sl, lr, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:117
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 800226c:	9302      	str	r3, [sp, #8]
matrix_add_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800226e:	2800      	cmp	r0, #0
 8002270:	f000 8285 	beq.w	800277e <matrix_test+0x52a>
 8002274:	0044      	lsls	r4, r0, #1
 8002276:	f04f 0800 	mov.w	r8, #0
 800227a:	1e43      	subs	r3, r0, #1
 800227c:	fa1f f98e 	uxth.w	r9, lr
 8002280:	9405      	str	r4, [sp, #20]
 8002282:	4694      	mov	ip, r2
 8002284:	f8cd 8004 	str.w	r8, [sp, #4]
 8002288:	4614      	mov	r4, r2
 800228a:	9309      	str	r3, [sp, #36]	; 0x24
 800228c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8002290:	920c      	str	r2, [sp, #48]	; 0x30
 8002292:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8002296:	e086      	b.n	80023a6 <matrix_test+0x152>
 8002298:	465b      	mov	r3, fp
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
		for (j=0; j<N; j++) {
			A[i*N+j] += val;
 800229a:	f834 2018 	ldrh.w	r2, [r4, r8, lsl #1]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	444a      	add	r2, r9
 80022a2:	f824 2018 	strh.w	r2, [r4, r8, lsl #1]
 80022a6:	f000 808f 	beq.w	80023c8 <matrix_test+0x174>
 80022aa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	444a      	add	r2, r9
 80022b2:	f8ac 2002 	strh.w	r2, [ip, #2]
 80022b6:	f000 8087 	beq.w	80023c8 <matrix_test+0x174>
 80022ba:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	444a      	add	r2, r9
 80022c2:	f8ac 2004 	strh.w	r2, [ip, #4]
 80022c6:	f040 8081 	bne.w	80023cc <matrix_test+0x178>
 80022ca:	f8bc 2006 	ldrh.w	r2, [ip, #6]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80022ce:	469a      	mov	sl, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 80022d0:	444a      	add	r2, r9
 80022d2:	f8ac 2006 	strh.w	r2, [ip, #6]
 80022d6:	459b      	cmp	fp, r3
 80022d8:	d05d      	beq.n	8002396 <matrix_test+0x142>
 80022da:	ebc3 020b 	rsb	r2, r3, fp
 80022de:	4611      	mov	r1, r2
 80022e0:	9204      	str	r2, [sp, #16]
 80022e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022e4:	3904      	subs	r1, #4
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	0889      	lsrs	r1, r1, #2
 80022ea:	2a02      	cmp	r2, #2
 80022ec:	f101 0101 	add.w	r1, r1, #1
 80022f0:	ea4f 0081 	mov.w	r0, r1, lsl #2
 80022f4:	9003      	str	r0, [sp, #12]
 80022f6:	d933      	bls.n	8002360 <matrix_test+0x10c>
 80022f8:	4443      	add	r3, r8
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:117
	4 - Multiply a matrix by a matrix.
	5 - Add a constant value to all elements of a matrix.

	After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
 80022fa:	2200      	movs	r2, #0
 80022fc:	9407      	str	r4, [sp, #28]
 80022fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002302:	4614      	mov	r4, r2
 8002304:	f8cd c018 	str.w	ip, [sp, #24]
 8002308:	f1a3 0e08 	sub.w	lr, r3, #8
matrix_add_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			A[i*N+j] += val;
 800230c:	f85e 2f08 	ldr.w	r2, [lr, #8]!
 8002310:	2000      	movs	r0, #0
 8002312:	3401      	adds	r4, #1
 8002314:	f8de 5004 	ldr.w	r5, [lr, #4]
 8002318:	eb09 0c02 	add.w	ip, r9, r2
 800231c:	4606      	mov	r6, r0
 800231e:	eb09 4212 	add.w	r2, r9, r2, lsr #16
 8002322:	eb09 0705 	add.w	r7, r9, r5
 8002326:	fa1f fc8c 	uxth.w	ip, ip
 800232a:	eb09 4515 	add.w	r5, r9, r5, lsr #16
 800232e:	428c      	cmp	r4, r1
 8002330:	b2bf      	uxth	r7, r7
 8002332:	f36c 000f 	bfi	r0, ip, #0, #16
 8002336:	b292      	uxth	r2, r2
 8002338:	f367 060f 	bfi	r6, r7, #0, #16
 800233c:	f362 401f 	bfi	r0, r2, #16, #16
 8002340:	f365 461f 	bfi	r6, r5, #16, #16
 8002344:	e883 0041 	stmia.w	r3, {r0, r6}
 8002348:	f103 0308 	add.w	r3, r3, #8
 800234c:	d3de      	bcc.n	800230c <matrix_test+0xb8>
 800234e:	9a03      	ldr	r2, [sp, #12]
 8002350:	f8dd c018 	ldr.w	ip, [sp, #24]
 8002354:	4613      	mov	r3, r2
 8002356:	4492      	add	sl, r2
 8002358:	9a04      	ldr	r2, [sp, #16]
 800235a:	9c07      	ldr	r4, [sp, #28]
 800235c:	4293      	cmp	r3, r2
 800235e:	d01a      	beq.n	8002396 <matrix_test+0x142>
 8002360:	eb08 020a 	add.w	r2, r8, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002364:	f10a 0301 	add.w	r3, sl, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002368:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 800236c:	459b      	cmp	fp, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 800236e:	4449      	add	r1, r9
 8002370:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002374:	d90f      	bls.n	8002396 <matrix_test+0x142>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002376:	4443      	add	r3, r8
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002378:	f10a 0202 	add.w	r2, sl, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 800237c:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002380:	4593      	cmp	fp, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002382:	4449      	add	r1, r9
 8002384:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002388:	d905      	bls.n	8002396 <matrix_test+0x142>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 800238a:	4442      	add	r2, r8
 800238c:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 8002390:	444b      	add	r3, r9
 8002392:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	44d8      	add	r8, fp
 800239a:	9a05      	ldr	r2, [sp, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	4494      	add	ip, r2
 80023a0:	459b      	cmp	fp, r3
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	d015      	beq.n	80023d2 <matrix_test+0x17e>
 80023a6:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80023aa:	425b      	negs	r3, r3
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	455b      	cmp	r3, fp
 80023b2:	bf28      	it	cs
 80023b4:	465b      	movcs	r3, fp
 80023b6:	f1bb 0f04 	cmp.w	fp, #4
 80023ba:	f67f af6d 	bls.w	8002298 <matrix_test+0x44>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f af6b 	bne.w	800229a <matrix_test+0x46>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
		for (j=0; j<N; j++) {
 80023c4:	469a      	mov	sl, r3
 80023c6:	e788      	b.n	80022da <matrix_test+0x86>
 80023c8:	469a      	mov	sl, r3
 80023ca:	e784      	b.n	80022d6 <matrix_test+0x82>
 80023cc:	f04f 0a03 	mov.w	sl, #3
 80023d0:	e781      	b.n	80022d6 <matrix_test+0x82>
 80023d2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80023d6:	4614      	mov	r4, r2
 80023d8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 80023dc:	2000      	movs	r0, #0
 80023de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80023e0:	461f      	mov	r7, r3
 80023e2:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80023e6:	9d08      	ldr	r5, [sp, #32]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	1931      	adds	r1, r6, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
		for (j=0; j<N; j++) {
 80023ec:	462a      	mov	r2, r5
matrix_mul_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:244
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
 80023ee:	f936 3b02 	ldrsh.w	r3, [r6], #2
 80023f2:	fb03 f30e 	mul.w	r3, r3, lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:243
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80023f6:	428e      	cmp	r6, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:244
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
 80023f8:	f842 3b04 	str.w	r3, [r2], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:243
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80023fc:	d1f7      	bne.n	80023ee <matrix_test+0x19a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:242
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 80023fe:	3001      	adds	r0, #1
 8002400:	443d      	add	r5, r7
 8002402:	4583      	cmp	fp, r0
 8002404:	d1f1      	bne.n	80023ea <matrix_test+0x196>
 8002406:	f04f 0c00 	mov.w	ip, #0
 800240a:	9e08      	ldr	r6, [sp, #32]
 800240c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002410:	4635      	mov	r5, r6
 8002412:	4661      	mov	r1, ip
 8002414:	4662      	mov	r2, ip
 8002416:	4663      	mov	r3, ip
matrix_add_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002418:	460f      	mov	r7, r1
 800241a:	eb08 0e06 	add.w	lr, r8, r6
matrix_sum():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 800241e:	f856 1b04 	ldr.w	r1, [r6], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002422:	b29b      	uxth	r3, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:223
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
			tmp+=cur;
 8002424:	440a      	add	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			if (tmp>clipval) {
				ret+=10;
 8002426:	f103 000a 	add.w	r0, r3, #10
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 800242a:	42b9      	cmp	r1, r7
 800242c:	bfc8      	it	gt
 800242e:	3301      	addgt	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 8002430:	460f      	mov	r7, r1
 8002432:	4552      	cmp	r2, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002434:	b200      	sxth	r0, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 8002436:	b21b      	sxth	r3, r3
 8002438:	bfc4      	itt	gt
 800243a:	2200      	movgt	r2, #0
 800243c:	4603      	movgt	r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:221
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 800243e:	45b6      	cmp	lr, r6
 8002440:	d1ed      	bne.n	800241e <matrix_test+0x1ca>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:220
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002442:	f10c 0c01 	add.w	ip, ip, #1
 8002446:	4676      	mov	r6, lr
 8002448:	45e3      	cmp	fp, ip
 800244a:	d1e5      	bne.n	8002418 <matrix_test+0x1c4>
 800244c:	4618      	mov	r0, r3
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:126
	matrix_add_const(N,A,val); /* make sure data changes  */
#if CORE_DEBUG
	printmat(A,N,"matrix_add_const");
#endif
	matrix_mul_const(N,C,A,val);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800244e:	2100      	movs	r1, #0
 8002450:	f000 fe28 	bl	80030a4 <crc16>
 8002454:	9b08      	ldr	r3, [sp, #32]
 8002456:	9a01      	ldr	r2, [sp, #4]
 8002458:	4680      	mov	r8, r0
 800245a:	f8cd a00c 	str.w	sl, [sp, #12]
 800245e:	eb03 0c02 	add.w	ip, r3, r2
 8002462:	9b02      	ldr	r3, [sp, #8]
 8002464:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8002468:	191f      	adds	r7, r3, r4
 800246a:	469a      	mov	sl, r3
 800246c:	4653      	mov	r3, sl
matrix_mul_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:242
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 800246e:	4671      	mov	r1, lr
 8002470:	2200      	movs	r2, #0
matrix_mul_vect():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:270
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		C[i]=0;
		for (j=0; j<N; j++) {
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
 8002472:	f933 0b02 	ldrsh.w	r0, [r3], #2
 8002476:	f931 6b02 	ldrsh.w	r6, [r1], #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:269
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		C[i]=0;
		for (j=0; j<N; j++) {
 800247a:	429f      	cmp	r7, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:270
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
 800247c:	fb06 2200 	mla	r2, r6, r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:269
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		C[i]=0;
		for (j=0; j<N; j++) {
 8002480:	d1f7      	bne.n	8002472 <matrix_test+0x21e>
 8002482:	f845 2b04 	str.w	r2, [r5], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:267
	Multiply a matrix by a vector.
	This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002486:	4565      	cmp	r5, ip
 8002488:	44a6      	add	lr, r4
 800248a:	d1ef      	bne.n	800246c <matrix_test+0x218>
 800248c:	f04f 0c00 	mov.w	ip, #0
 8002490:	9b08      	ldr	r3, [sp, #32]
 8002492:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002496:	4665      	mov	r5, ip
 8002498:	9303      	str	r3, [sp, #12]
 800249a:	461e      	mov	r6, r3
 800249c:	4661      	mov	r1, ip
 800249e:	462b      	mov	r3, r5
 80024a0:	9801      	ldr	r0, [sp, #4]
 80024a2:	462f      	mov	r7, r5
 80024a4:	eb00 0e06 	add.w	lr, r0, r6
matrix_sum():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 80024a8:	f856 5b04 	ldr.w	r5, [r6], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 80024ac:	b29b      	uxth	r3, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:223
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
			tmp+=cur;
 80024ae:	4429      	add	r1, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			if (tmp>clipval) {
				ret+=10;
 80024b0:	f103 020a 	add.w	r2, r3, #10
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 80024b4:	42bd      	cmp	r5, r7
 80024b6:	bfc8      	it	gt
 80024b8:	3301      	addgt	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 80024ba:	462f      	mov	r7, r5
 80024bc:	4551      	cmp	r1, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 80024be:	b212      	sxth	r2, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	bfc4      	itt	gt
 80024c4:	2100      	movgt	r1, #0
 80024c6:	4613      	movgt	r3, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:221
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80024c8:	4576      	cmp	r6, lr
 80024ca:	d1ed      	bne.n	80024a8 <matrix_test+0x254>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:220
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 80024cc:	f10c 0c01 	add.w	ip, ip, #1
 80024d0:	45e3      	cmp	fp, ip
 80024d2:	d1e6      	bne.n	80024a2 <matrix_test+0x24e>
 80024d4:	4618      	mov	r0, r3
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:131
	crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_const");
#endif
	matrix_mul_vect(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 80024d6:	4641      	mov	r1, r8
 80024d8:	f000 fde4 	bl	80030a4 <crc16>
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	f8cd a014 	str.w	sl, [sp, #20]
 80024e2:	eb03 0804 	add.w	r8, r3, r4
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8cd 9018 	str.w	r9, [sp, #24]
 80024ec:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80024f0:	469a      	mov	sl, r3
 80024f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80024f6:	9004      	str	r0, [sp, #16]
 80024f8:	9e02      	ldr	r6, [sp, #8]
 80024fa:	eb04 070c 	add.w	r7, r4, ip
 80024fe:	46ce      	mov	lr, r9
 8002500:	2300      	movs	r3, #0
 8002502:	4662      	mov	r2, ip
 8002504:	4619      	mov	r1, r3
matrix_mul_matrix():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:286
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 8002506:	f932 5b02 	ldrsh.w	r5, [r2], #2
 800250a:	5ef0      	ldrsh	r0, [r6, r3]
 800250c:	4423      	add	r3, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:284
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
 800250e:	42ba      	cmp	r2, r7
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:286
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 8002510:	fb05 1100 	mla	r1, r5, r0, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:284
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
 8002514:	d1f7      	bne.n	8002506 <matrix_test+0x2b2>
 8002516:	3602      	adds	r6, #2
 8002518:	f84e 1b04 	str.w	r1, [lr], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:282
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 800251c:	4546      	cmp	r6, r8
 800251e:	d1ef      	bne.n	8002500 <matrix_test+0x2ac>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:281
	Multiply a matrix by a matrix.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 8002520:	f10a 0a01 	add.w	sl, sl, #1
 8002524:	9b01      	ldr	r3, [sp, #4]
 8002526:	4694      	mov	ip, r2
 8002528:	45d3      	cmp	fp, sl
 800252a:	4499      	add	r9, r3
 800252c:	d1e4      	bne.n	80024f8 <matrix_test+0x2a4>
 800252e:	f04f 0c00 	mov.w	ip, #0
 8002532:	469e      	mov	lr, r3
 8002534:	9b08      	ldr	r3, [sp, #32]
 8002536:	4665      	mov	r5, ip
 8002538:	f8dd a014 	ldr.w	sl, [sp, #20]
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	461e      	mov	r6, r3
 8002540:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8002544:	4661      	mov	r1, ip
 8002546:	462b      	mov	r3, r5
 8002548:	4628      	mov	r0, r5
 800254a:	eb0e 0706 	add.w	r7, lr, r6
 800254e:	460a      	mov	r2, r1
matrix_sum():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 8002550:	f856 5b04 	ldr.w	r5, [r6], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002554:	b29b      	uxth	r3, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:223
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
			tmp+=cur;
 8002556:	442a      	add	r2, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			if (tmp>clipval) {
				ret+=10;
 8002558:	f103 010a 	add.w	r1, r3, #10
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 800255c:	4285      	cmp	r5, r0
 800255e:	bfc8      	it	gt
 8002560:	3301      	addgt	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 8002562:	4628      	mov	r0, r5
 8002564:	4552      	cmp	r2, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002566:	b209      	sxth	r1, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 8002568:	b21b      	sxth	r3, r3
 800256a:	bfc4      	itt	gt
 800256c:	2200      	movgt	r2, #0
 800256e:	460b      	movgt	r3, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:221
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002570:	42be      	cmp	r6, r7
 8002572:	d1ed      	bne.n	8002550 <matrix_test+0x2fc>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:220
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002574:	f10c 0c01 	add.w	ip, ip, #1
 8002578:	4611      	mov	r1, r2
 800257a:	45e3      	cmp	fp, ip
 800257c:	d1e4      	bne.n	8002548 <matrix_test+0x2f4>
 800257e:	4618      	mov	r0, r3
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:136
	crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_vect");
#endif
	matrix_mul_matrix(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002580:	9904      	ldr	r1, [sp, #16]
 8002582:	f000 fd8f 	bl	80030a4 <crc16>
 8002586:	9b02      	ldr	r3, [sp, #8]
 8002588:	f8cd a014 	str.w	sl, [sp, #20]
 800258c:	eb03 0804 	add.w	r8, r3, r4
 8002590:	2300      	movs	r3, #0
 8002592:	f8cd 9018 	str.w	r9, [sp, #24]
 8002596:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800259a:	469a      	mov	sl, r3
 800259c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80025a0:	9004      	str	r0, [sp, #16]
 80025a2:	9e02      	ldr	r6, [sp, #8]
 80025a4:	eb04 070c 	add.w	r7, r4, ip
 80025a8:	46ce      	mov	lr, r9
 80025aa:	2200      	movs	r2, #0
 80025ac:	4661      	mov	r1, ip
 80025ae:	4610      	mov	r0, r2
matrix_mul_matrix_bitextract():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:303
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
 80025b0:	5eb5      	ldrsh	r5, [r6, r2]
 80025b2:	4422      	add	r2, r4
 80025b4:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80025b8:	fb03 f305 	mul.w	r3, r3, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:301
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
 80025bc:	428f      	cmp	r7, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:304
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
 80025be:	f3c3 0583 	ubfx	r5, r3, #2, #4
 80025c2:	f3c3 1346 	ubfx	r3, r3, #5, #7
 80025c6:	fb03 0005 	mla	r0, r3, r5, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:301
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			C[i*N+j]=0;
			for(k=0;k<N;k++)
 80025ca:	d1f1      	bne.n	80025b0 <matrix_test+0x35c>
 80025cc:	3602      	adds	r6, #2
 80025ce:	f84e 0b04 	str.w	r0, [lr], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:299
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80025d2:	4546      	cmp	r6, r8
 80025d4:	d1e9      	bne.n	80025aa <matrix_test+0x356>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:298
	Multiply a matrix by a matrix, and extract some bits from the result.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
 80025d6:	f10a 0a01 	add.w	sl, sl, #1
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	46bc      	mov	ip, r7
 80025de:	45d3      	cmp	fp, sl
 80025e0:	4499      	add	r9, r3
 80025e2:	d1de      	bne.n	80025a2 <matrix_test+0x34e>
 80025e4:	f04f 0c00 	mov.w	ip, #0
 80025e8:	469e      	mov	lr, r3
 80025ea:	f8dd a014 	ldr.w	sl, [sp, #20]
 80025ee:	4665      	mov	r5, ip
 80025f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80025f4:	9e08      	ldr	r6, [sp, #32]
 80025f6:	4661      	mov	r1, ip
 80025f8:	462b      	mov	r3, r5
 80025fa:	4628      	mov	r0, r5
 80025fc:	eb0e 0706 	add.w	r7, lr, r6
 8002600:	460a      	mov	r2, r1
matrix_sum():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 8002602:	f856 5b04 	ldr.w	r5, [r6], #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002606:	b29b      	uxth	r3, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:223
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
			tmp+=cur;
 8002608:	442a      	add	r2, r5
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			if (tmp>clipval) {
				ret+=10;
 800260a:	f103 010a 	add.w	r1, r3, #10
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 800260e:	4285      	cmp	r5, r0
 8002610:	bfc8      	it	gt
 8002612:	3301      	addgt	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:222
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
 8002614:	4628      	mov	r0, r5
 8002616:	4552      	cmp	r2, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:225
			tmp+=cur;
			if (tmp>clipval) {
				ret+=10;
 8002618:	b209      	sxth	r1, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:228
				tmp=0;
			} else {
				ret += (cur>prev) ? 1 : 0;
 800261a:	b21b      	sxth	r3, r3
 800261c:	bfc4      	itt	gt
 800261e:	2200      	movgt	r2, #0
 8002620:	460b      	movgt	r3, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:221
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002622:	42be      	cmp	r6, r7
 8002624:	d1ed      	bne.n	8002602 <matrix_test+0x3ae>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:220
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002626:	f10c 0c01 	add.w	ip, ip, #1
 800262a:	4611      	mov	r1, r2
 800262c:	45e3      	cmp	fp, ip
 800262e:	d1e4      	bne.n	80025fa <matrix_test+0x3a6>
 8002630:	4618      	mov	r0, r3
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:141
	crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002632:	9904      	ldr	r1, [sp, #16]
 8002634:	f000 fd36 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:146
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
 8002638:	f04f 0a00 	mov.w	sl, #0
 800263c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800263e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:141
	crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002642:	9008      	str	r0, [sp, #32]
 8002644:	462e      	mov	r6, r5
 8002646:	9307      	str	r3, [sp, #28]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:146
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
 8002648:	f8cd a004 	str.w	sl, [sp, #4]
 800264c:	9405      	str	r4, [sp, #20]
 800264e:	e082      	b.n	8002756 <matrix_test+0x502>
 8002650:	465b      	mov	r3, fp
matrix_add_const():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			A[i*N+j] += val;
 8002652:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
 8002656:	2b01      	cmp	r3, #1
 8002658:	ebc9 0202 	rsb	r2, r9, r2
 800265c:	f825 201a 	strh.w	r2, [r5, sl, lsl #1]
 8002660:	f000 8089 	beq.w	8002776 <matrix_test+0x522>
 8002664:	8872      	ldrh	r2, [r6, #2]
 8002666:	2b02      	cmp	r3, #2
 8002668:	ebc9 0202 	rsb	r2, r9, r2
 800266c:	8072      	strh	r2, [r6, #2]
 800266e:	f000 8082 	beq.w	8002776 <matrix_test+0x522>
 8002672:	88b2      	ldrh	r2, [r6, #4]
 8002674:	2b04      	cmp	r3, #4
 8002676:	ebc9 0202 	rsb	r2, r9, r2
 800267a:	80b2      	strh	r2, [r6, #4]
 800267c:	d17d      	bne.n	800277a <matrix_test+0x526>
 800267e:	88f1      	ldrh	r1, [r6, #6]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002680:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002682:	ebc9 0101 	rsb	r1, r9, r1
 8002686:	80f1      	strh	r1, [r6, #6]
 8002688:	459b      	cmp	fp, r3
 800268a:	d05c      	beq.n	8002746 <matrix_test+0x4f2>
 800268c:	ebc3 010b 	rsb	r1, r3, fp
 8002690:	4608      	mov	r0, r1
 8002692:	9104      	str	r1, [sp, #16]
 8002694:	9907      	ldr	r1, [sp, #28]
 8002696:	3804      	subs	r0, #4
 8002698:	1ac9      	subs	r1, r1, r3
 800269a:	0880      	lsrs	r0, r0, #2
 800269c:	2902      	cmp	r1, #2
 800269e:	f100 0001 	add.w	r0, r0, #1
 80026a2:	9002      	str	r0, [sp, #8]
 80026a4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80026a8:	9003      	str	r0, [sp, #12]
 80026aa:	d930      	bls.n	800270e <matrix_test+0x4ba>
 80026ac:	4453      	add	r3, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 80026ae:	2400      	movs	r4, #0
 80026b0:	9606      	str	r6, [sp, #24]
 80026b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80026b6:	f1a3 0808 	sub.w	r8, r3, #8
 80026ba:	f858 1f08 	ldr.w	r1, [r8, #8]!
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 80026be:	2000      	movs	r0, #0
 80026c0:	3401      	adds	r4, #1
 80026c2:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80026c6:	ebc9 0c01 	rsb	ip, r9, r1
 80026ca:	ebc9 4111 	rsb	r1, r9, r1, lsr #16
 80026ce:	4607      	mov	r7, r0
 80026d0:	ebc9 0e06 	rsb	lr, r9, r6
 80026d4:	fa1f fc8c 	uxth.w	ip, ip
 80026d8:	b289      	uxth	r1, r1
 80026da:	fa1f fe8e 	uxth.w	lr, lr
 80026de:	f36c 000f 	bfi	r0, ip, #0, #16
 80026e2:	ebc9 4616 	rsb	r6, r9, r6, lsr #16
 80026e6:	f361 401f 	bfi	r0, r1, #16, #16
 80026ea:	f36e 070f 	bfi	r7, lr, #0, #16
 80026ee:	9902      	ldr	r1, [sp, #8]
 80026f0:	f366 471f 	bfi	r7, r6, #16, #16
 80026f4:	42a1      	cmp	r1, r4
 80026f6:	e883 0081 	stmia.w	r3, {r0, r7}
 80026fa:	f103 0308 	add.w	r3, r3, #8
 80026fe:	d8dc      	bhi.n	80026ba <matrix_test+0x466>
 8002700:	9903      	ldr	r1, [sp, #12]
 8002702:	9e06      	ldr	r6, [sp, #24]
 8002704:	460b      	mov	r3, r1
 8002706:	440a      	add	r2, r1
 8002708:	9904      	ldr	r1, [sp, #16]
 800270a:	428b      	cmp	r3, r1
 800270c:	d01b      	beq.n	8002746 <matrix_test+0x4f2>
 800270e:	eb0a 0102 	add.w	r1, sl, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002712:	1c53      	adds	r3, r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002714:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002718:	459b      	cmp	fp, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 800271a:	ebc9 0000 	rsb	r0, r9, r0
 800271e:	f825 0011 	strh.w	r0, [r5, r1, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002722:	d910      	bls.n	8002746 <matrix_test+0x4f2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002724:	4453      	add	r3, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002726:	3202      	adds	r2, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002728:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 800272c:	4593      	cmp	fp, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 800272e:	ebc9 0101 	rsb	r1, r9, r1
 8002732:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002736:	d906      	bls.n	8002746 <matrix_test+0x4f2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:256
			A[i*N+j] += val;
 8002738:	4452      	add	r2, sl
 800273a:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 800273e:	ebc9 0303 	rsb	r3, r9, r3
 8002742:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:254
/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
	ee_u32 i,j;
	for (i=0; i<N; i++) {
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	44da      	add	sl, fp
 800274a:	9a05      	ldr	r2, [sp, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	4416      	add	r6, r2
 8002750:	459b      	cmp	fp, r3
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	d023      	beq.n	800279e <matrix_test+0x54a>
 8002756:	0873      	lsrs	r3, r6, #1
 8002758:	425b      	negs	r3, r3
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	455b      	cmp	r3, fp
 8002760:	bf28      	it	cs
 8002762:	465b      	movcs	r3, fp
 8002764:	f1bb 0f04 	cmp.w	fp, #4
 8002768:	f67f af72 	bls.w	8002650 <matrix_test+0x3fc>
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af70 	bne.w	8002652 <matrix_test+0x3fe>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:255
		for (j=0; j<N; j++) {
 8002772:	461a      	mov	r2, r3
 8002774:	e78a      	b.n	800268c <matrix_test+0x438>
 8002776:	461a      	mov	r2, r3
 8002778:	e786      	b.n	8002688 <matrix_test+0x434>
 800277a:	2203      	movs	r2, #3
 800277c:	e784      	b.n	8002688 <matrix_test+0x434>
matrix_test():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:126
	matrix_add_const(N,A,val); /* make sure data changes  */
#if CORE_DEBUG
	printmat(A,N,"matrix_add_const");
#endif
	matrix_mul_const(N,C,A,val);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800277e:	4601      	mov	r1, r0
 8002780:	f000 fc90 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:131
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_const");
#endif
	matrix_mul_vect(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002784:	4601      	mov	r1, r0
 8002786:	4658      	mov	r0, fp
 8002788:	f000 fc8c 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:136
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_vect");
#endif
	matrix_mul_matrix(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 800278c:	4601      	mov	r1, r0
 800278e:	4658      	mov	r0, fp
 8002790:	f000 fc88 	bl	80030a4 <crc16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:141
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix");
#endif
	matrix_mul_matrix_bitextract(N,C,A,B);
	crc=crc16(matrix_sum(N,C,clipval),crc);
 8002794:	4601      	mov	r1, r0
 8002796:	4658      	mov	r0, fp
 8002798:	f000 fc84 	bl	80030a4 <crc16>
 800279c:	9008      	str	r0, [sp, #32]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:147
#if CORE_DEBUG
	printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif
	
	matrix_add_const(N,A,-val); /* return matrix to initial value */
	return crc;
 800279e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:148
}
 80027a2:	b00f      	add	sp, #60	; 0x3c
 80027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a8:	fffff000 	.word	0xfffff000

080027ac <core_bench_matrix>:
core_bench_matrix():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:81
	Benchmark function

	Iterate <matrix_test> N times, 
	changing the matrix values slightly by a constant amount each time.
*/
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
 80027ac:	b510      	push	{r4, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	4614      	mov	r4, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:88
	MATRES *C=p->C;
	MATDAT *A=p->A;
	MATDAT *B=p->B;
	MATDAT val=(MATDAT)seed;

	crc=crc16(matrix_test(N,C,A,B,val),crc);
 80027b2:	9100      	str	r1, [sp, #0]
 80027b4:	6883      	ldr	r3, [r0, #8]
 80027b6:	6842      	ldr	r2, [r0, #4]
 80027b8:	68c1      	ldr	r1, [r0, #12]
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	f7ff fd4a 	bl	8002254 <matrix_test>
 80027c0:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:91

	return crc;
}
 80027c2:	b002      	add	sp, #8
 80027c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:88
	MATRES *C=p->C;
	MATDAT *A=p->A;
	MATDAT *B=p->B;
	MATDAT val=(MATDAT)seed;

	crc=crc16(matrix_test(N,C,A,B,val),crc);
 80027c8:	f000 bc6c 	b.w	80030a4 <crc16>

080027cc <core_init_matrix>:
core_init_matrix():
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:165
	Matrix dimensions.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:173
	MATDAT *B;
	ee_s32 order=1;
	MATDAT val;
	ee_u32 i=0,j=0;
	if (seed==0)
		seed=1;
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	bf08      	it	eq
 80027d4:	2201      	moveq	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:174
	while (j<blksize) {
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d053      	beq.n	8002882 <core_init_matrix+0xb6>
 80027da:	4606      	mov	r6, r0
 80027dc:	2000      	movs	r0, #0
 80027de:	e000      	b.n	80027e2 <core_init_matrix+0x16>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:175
		i++;
 80027e0:	4620      	mov	r0, r4
 80027e2:	1c44      	adds	r4, r0, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:176
		j=i*i*2*4;		
 80027e4:	fb04 f504 	mul.w	r5, r4, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:174
	ee_s32 order=1;
	MATDAT val;
	ee_u32 i=0,j=0;
	if (seed==0)
		seed=1;
	while (j<blksize) {
 80027e8:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 80027ec:	d8f8      	bhi.n	80027e0 <core_init_matrix+0x14>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
 80027ee:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:180
	B=A+N*N;
 80027f2:	fb00 f800 	mul.w	r8, r0, r0
 80027f6:	4682      	mov	sl, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
 80027f8:	f029 0903 	bic.w	r9, r9, #3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:180
	B=A+N*N;
 80027fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
 8002800:	f109 0904 	add.w	r9, r9, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:180
	B=A+N*N;
 8002804:	eb09 0c08 	add.w	ip, r9, r8
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:182

	for (i=0; i<N; i++) {
 8002808:	b360      	cbz	r0, 8002864 <core_init_matrix+0x98>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:178 (discriminator 3)
		seed=1;
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
 800280a:	f04f 0e00 	mov.w	lr, #0
 800280e:	2401      	movs	r4, #1
 8002810:	fb00 f60e 	mul.w	r6, r0, lr
 8002814:	2500      	movs	r5, #0
 8002816:	0076      	lsls	r6, r6, #1
 8002818:	eb0c 0706 	add.w	r7, ip, r6
 800281c:	444e      	add	r6, r9
 800281e:	e00b      	b.n	8002838 <core_init_matrix+0x6c>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:185 (discriminator 3)
	B=A+N*N;

	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			seed = ( ( order * seed ) % 65536 );
			val = (seed + order);
 8002820:	eb01 0b02 	add.w	fp, r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:183 (discriminator 3)
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
	B=A+N*N;

	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002824:	4285      	cmp	r5, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:185 (discriminator 3)
			seed = ( ( order * seed ) % 65536 );
			val = (seed + order);
 8002826:	fa1f fb8b 	uxth.w	fp, fp
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:188 (discriminator 3)
			val=matrix_clip(val,0);
			B[i*N+j] = val;
			val =  (val + order);
 800282a:	4459      	add	r1, fp
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:187 (discriminator 3)
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			seed = ( ( order * seed ) % 65536 );
			val = (seed + order);
			val=matrix_clip(val,0);
			B[i*N+j] = val;
 800282c:	f827 bb02 	strh.w	fp, [r7], #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:190 (discriminator 3)
			val =  (val + order);
			val=matrix_clip(val,1);
			A[i*N+j] = val;
 8002830:	b2c9      	uxtb	r1, r1
 8002832:	f826 1b02 	strh.w	r1, [r6], #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:183 (discriminator 3)
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
	B=A+N*N;

	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002836:	d211      	bcs.n	800285c <core_init_matrix+0x90>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:184 (discriminator 3)
			seed = ( ( order * seed ) % 65536 );
 8002838:	fb02 fb04 	mul.w	fp, r2, r4
 800283c:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <core_init_matrix+0xd4>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:185 (discriminator 3)
			val = (seed + order);
 800283e:	b2a1      	uxth	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:183 (discriminator 3)
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
	B=A+N*N;

	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
 8002840:	3501      	adds	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:184 (discriminator 3)
			seed = ( ( order * seed ) % 65536 );
 8002842:	ea0b 0202 	and.w	r2, fp, r2
 8002846:	3401      	adds	r4, #1
 8002848:	2a00      	cmp	r2, #0
 800284a:	dae9      	bge.n	8002820 <core_init_matrix+0x54>
 800284c:	3a01      	subs	r2, #1
 800284e:	f8df b054 	ldr.w	fp, [pc, #84]	; 80028a4 <core_init_matrix+0xd8>
 8002852:	ea42 0b0b 	orr.w	fp, r2, fp
 8002856:	f10b 0201 	add.w	r2, fp, #1
 800285a:	e7e1      	b.n	8002820 <core_init_matrix+0x54>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:182 (discriminator 2)
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
	B=A+N*N;

	for (i=0; i<N; i++) {
 800285c:	f10e 0e01 	add.w	lr, lr, #1
 8002860:	4586      	cmp	lr, r0
 8002862:	d3d5      	bcc.n	8002810 <core_init_matrix+0x44>
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:197
		}
	}

	p->A=A;
	p->B=B;
	p->C=(MATRES *)align_mem(B+N*N);
 8002864:	eb0c 0208 	add.w	r2, ip, r8
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:195
			A[i*N+j] = val;
			order++;
		}
	}

	p->A=A;
 8002868:	f8c3 9004 	str.w	r9, [r3, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:196
	p->B=B;
 800286c:	f8c3 c008 	str.w	ip, [r3, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:197
	p->C=(MATRES *)align_mem(B+N*N);
 8002870:	3a01      	subs	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:198
	p->N=N;
 8002872:	f8c3 a000 	str.w	sl, [r3]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:197
		}
	}

	p->A=A;
	p->B=B;
	p->C=(MATRES *)align_mem(B+N*N);
 8002876:	f022 0203 	bic.w	r2, r2, #3
 800287a:	3204      	adds	r2, #4
 800287c:	60da      	str	r2, [r3, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:204
#if CORE_DEBUG
	printmat(A,N,"A");
	printmat(B,N,"B");
#endif
	return N;
}
 800287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
 8002882:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:180
	B=A+N*N;
 8002886:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800288a:	f04f 0802 	mov.w	r8, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
 800288e:	f02c 0c03 	bic.w	ip, ip, #3
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:178
		seed=1;
	while (j<blksize) {
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
 8002892:	4650      	mov	r0, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:179
	A=(MATDAT *)align_mem(memblk);
 8002894:	f10c 0904 	add.w	r9, ip, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_matrix.c:180
	B=A+N*N;
 8002898:	f10c 0c06 	add.w	ip, ip, #6
 800289c:	e7b5      	b.n	800280a <core_init_matrix+0x3e>
 800289e:	bf00      	nop
 80028a0:	8000ffff 	.word	0x8000ffff
 80028a4:	ffff0000 	.word	0xffff0000

080028a8 <start_time>:
start_time():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:64
	This function will be called right before starting the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
 80028a8:	b508      	push	{r3, lr}
barebones_clock():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:41
	e.g. Read value from on board RTC, read value from cpu clock cycles performance counter etc. 
	Sample implementation for standard time.h and windows.h definitions included.
*/

CORETIMETYPE barebones_clock() {
	return HAL_GetTick();	/* return milliseconds */
 80028aa:	f7fd fe3f 	bl	800052c <HAL_GetTick>
start_time():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:65

	Implementation may be capturing a system timer (as implemented in the example code) 
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
	GETMYTIME(&start_time_val );      
 80028ae:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <start_time+0xc>)
 80028b0:	6018      	str	r0, [r3, #0]
 80028b2:	bd08      	pop	{r3, pc}
 80028b4:	200001bc 	.word	0x200001bc

080028b8 <stop_time>:
stop_time():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:73
	This function will be called right after ending the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
 80028b8:	b508      	push	{r3, lr}
barebones_clock():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:41
	e.g. Read value from on board RTC, read value from cpu clock cycles performance counter etc. 
	Sample implementation for standard time.h and windows.h definitions included.
*/

CORETIMETYPE barebones_clock() {
	return HAL_GetTick();	/* return milliseconds */
 80028ba:	f7fd fe37 	bl	800052c <HAL_GetTick>
stop_time():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:74

	Implementation may be capturing a system timer (as implemented in the example code) 
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
	GETMYTIME(&stop_time_val );      
 80028be:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <stop_time+0xc>)
 80028c0:	6018      	str	r0, [r3, #0]
 80028c2:	bd08      	pop	{r3, pc}
 80028c4:	200001b8 	.word	0x200001b8

080028c8 <get_time>:
get_time():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:86
	This methodology is taken to accomodate any hardware or simulated platform.
	The sample implementation returns millisecs by default, 
	and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <get_time+0xc>)
 80028ca:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <get_time+0x10>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:87
	return elapsed;
 80028cc:	6810      	ldr	r0, [r2, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:88
}
 80028d0:	1ac0      	subs	r0, r0, r3
 80028d2:	4770      	bx	lr
 80028d4:	200001b8 	.word	0x200001b8
 80028d8:	200001bc 	.word	0x200001bc

080028dc <time_in_secs>:
time_in_secs():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:97
	The <secs_ret> type is used to accomodate systems with no support for floating point.
	Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
	return retval;
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <time_in_secs+0xc>)
 80028de:	fba3 3000 	umull	r3, r0, r3, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:98
}
 80028e2:	0980      	lsrs	r0, r0, #6
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <portable_init>:
portable_init():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:117
		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
	}
	if (sizeof(ee_u32) != 4) {
		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
	}
	p->portable_id=1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	7003      	strb	r3, [r0, #0]
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <portable_fini>:
portable_fini():
/Users/lix/Projects/luna/performance/Release/../coremark/core_portme.c:124
/* Function : portable_fini
	Target specific final code 
*/
void portable_fini(core_portable *p)
{
	p->portable_id=0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	7003      	strb	r3, [r0, #0]
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <core_init_state>:
core_init_state():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:118
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
	ee_u32 total=0,next=0,i;
	ee_u8 *buf=0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	3101      	adds	r1, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:129
	next=0;
	while ((total+next+1)<size) {
		if (next>0) {
			for(i=0;i<next;i++)
				*(p+total+i)=buf[i];
			*(p+total+i)=',';
 8002900:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8002904:	b289      	uxth	r1, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:116
	Actual patterns chosen depend on the seed parameter.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
 8002906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	4696      	mov	lr, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:117
	ee_u32 total=0,next=0,i;
 800290c:	461c      	mov	r4, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:124
#if CORE_DEBUG
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
	next=0;
 800290e:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:123
	ee_u8 *buf=0;
#if CORE_DEBUG
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
 8002910:	1e47      	subs	r7, r0, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:151
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
				next=8;
			break;
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 8002912:	f8df a098 	ldr.w	sl, [pc, #152]	; 80029ac <core_init_state+0xb0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:125
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
	next=0;
	while ((total+next+1)<size) {
 8002916:	18a6      	adds	r6, r4, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:147
				buf=floatpat[(seed>>3) & 0x3];
				next=8;
			break;
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 8002918:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80029b0 <core_init_state+0xb4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:142
				buf=intpat[(seed>>3) & 0x3];
				next=4;
			break;
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 800291c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80029b4 <core_init_state+0xb8>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:125
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
	next=0;
	while ((total+next+1)<size) {
 8002920:	1c75      	adds	r5, r6, #1
 8002922:	42af      	cmp	r7, r5
 8002924:	d921      	bls.n	800296a <core_init_state+0x6e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:126
		if (next>0) {
 8002926:	b152      	cbz	r2, 800293e <core_init_state+0x42>
 8002928:	4474      	add	r4, lr
 800292a:	441a      	add	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:128
			for(i=0;i<next;i++)
				*(p+total+i)=buf[i];
 800292c:	f813 bb01 	ldrb.w	fp, [r3], #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:127
#endif
	size--;
	next=0;
	while ((total+next+1)<size) {
		if (next>0) {
			for(i=0;i<next;i++)
 8002930:	4293      	cmp	r3, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:128
				*(p+total+i)=buf[i];
 8002932:	f804 bb01 	strb.w	fp, [r4], #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:127
#endif
	size--;
	next=0;
	while ((total+next+1)<size) {
		if (next>0) {
			for(i=0;i<next;i++)
 8002936:	d1f9      	bne.n	800292c <core_init_state+0x30>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:129
				*(p+total+i)=buf[i];
			*(p+total+i)=',';
 8002938:	462c      	mov	r4, r5
 800293a:	f80e c006 	strb.w	ip, [lr, r6]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:133
			total+=next+1;
		}
		seed++;
		switch (seed & 0x7) {
 800293e:	f001 0307 	and.w	r3, r1, #7
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:132
			for(i=0;i<next;i++)
				*(p+total+i)=buf[i];
			*(p+total+i)=',';
			total+=next+1;
		}
		seed++;
 8002942:	b20a      	sxth	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:133
		switch (seed & 0x7) {
 8002944:	3b03      	subs	r3, #3
 8002946:	2b04      	cmp	r3, #4
 8002948:	d81f      	bhi.n	800298a <core_init_state+0x8e>
 800294a:	e8df f003 	tbb	[pc, r3]
 800294e:	1818      	.short	0x1818
 8002950:	0303      	.short	0x0303
 8002952:	25          	.byte	0x25
 8002953:	00          	.byte	0x00
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:147
				buf=floatpat[(seed>>3) & 0x3];
				next=8;
			break;
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 8002954:	f3c2 03c1 	ubfx	r3, r2, #3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:148
				next=8;
 8002958:	2208      	movs	r2, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:147
				buf=floatpat[(seed>>3) & 0x3];
				next=8;
			break;
			case 5: /* scientific */
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
 800295a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:125
	ee_u8 *start=p;
	ee_printf("State: %d,%d\n",size,seed);
#endif
	size--;
	next=0;
	while ((total+next+1)<size) {
 800295e:	18a6      	adds	r6, r4, r2
 8002960:	3101      	adds	r1, #1
 8002962:	1c75      	adds	r5, r6, #1
 8002964:	b289      	uxth	r1, r1
 8002966:	42af      	cmp	r7, r5
 8002968:	d8dd      	bhi.n	8002926 <core_init_state+0x2a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:159
			default: /* Never happen, just to make some compilers happy */
			break;
		}
	}
	size++;
	while (total<size) { /* fill the rest with 0 */
 800296a:	4284      	cmp	r4, r0
 800296c:	d21a      	bcs.n	80029a4 <core_init_state+0xa8>
 800296e:	1b02      	subs	r2, r0, r4
 8002970:	2100      	movs	r1, #0
 8002972:	eb0e 0004 	add.w	r0, lr, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:166
		total++;
	}
#if CORE_DEBUG
	ee_printf("State Input: %s\n",start);
#endif
}
 8002976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f000 bd07 	b.w	800338c <memset>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:142
				buf=intpat[(seed>>3) & 0x3];
				next=4;
			break;
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 800297e:	f3c2 03c1 	ubfx	r3, r2, #3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:143
				next=8;
 8002982:	2208      	movs	r2, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:142
				buf=intpat[(seed>>3) & 0x3];
				next=4;
			break;
			case 3: /* float */
			case 4: /* float */
				buf=floatpat[(seed>>3) & 0x3];
 8002984:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:144
				next=8;
			break;
 8002988:	e7e9      	b.n	800295e <core_init_state+0x62>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:137
		seed++;
		switch (seed & 0x7) {
			case 0: /* int */
			case 1: /* int */
			case 2: /* int */
				buf=intpat[(seed>>3) & 0x3];
 800298a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
 800298e:	4d06      	ldr	r5, [pc, #24]	; (80029a8 <core_init_state+0xac>)
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:138
				next=4;
 8002990:	2204      	movs	r2, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:137
		seed++;
		switch (seed & 0x7) {
			case 0: /* int */
			case 1: /* int */
			case 2: /* int */
				buf=intpat[(seed>>3) & 0x3];
 8002992:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:139
				next=4;
			break;
 8002996:	e7e2      	b.n	800295e <core_init_state+0x62>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:151
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
				next=8;
			break;
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 8002998:	f3c2 03c1 	ubfx	r3, r2, #3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:152
				next=8;
 800299c:	2208      	movs	r2, #8
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:151
			case 6: /* scientific */
				buf=scipat[(seed>>3) & 0x3];
				next=8;
			break;
			case 7: /* invalid */
				buf=errpat[(seed>>3) & 0x3];
 800299e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:153
				next=8;
			break;
 80029a2:	e7dc      	b.n	800295e <core_init_state+0x62>
 80029a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a8:	080045e4 	.word	0x080045e4
 80029ac:	080046c4 	.word	0x080046c4
 80029b0:	080046b4 	.word	0x080046b4
 80029b4:	080045f4 	.word	0x080045f4

080029b8 <core_state_transition>:
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:185
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
 80029b8:	6803      	ldr	r3, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:184
	2 - a valid number has been detected.
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
 80029ba:	b430      	push	{r4, r5}
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 80029bc:	781c      	ldrb	r4, [r3, #0]
 80029be:	2c00      	cmp	r4, #0
 80029c0:	f000 80d3 	beq.w	8002b6a <core_state_transition+0x1b2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 80029c4:	2c2c      	cmp	r4, #44	; 0x2c
 80029c6:	f000 80d3 	beq.w	8002b70 <core_state_transition+0x1b8>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 80029ca:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80029ce:	2a09      	cmp	r2, #9
 80029d0:	d817      	bhi.n	8002a02 <core_state_transition+0x4a>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 80029d2:	680c      	ldr	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 80029d4:	1c5a      	adds	r2, r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 80029d6:	3401      	adds	r4, #1
 80029d8:	600c      	str	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	b163      	cbz	r3, 80029f8 <core_state_transition+0x40>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 80029de:	2b2c      	cmp	r3, #44	; 0x2c
 80029e0:	d039      	beq.n	8002a56 <core_state_transition+0x9e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:226
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
			}
			break;
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
 80029e2:	2b2e      	cmp	r3, #46	; 0x2e
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 80029e4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:226
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
			}
			break;
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
 80029e8:	f000 80a1 	beq.w	8002b2e <core_state_transition+0x176>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 80029ec:	2c09      	cmp	r4, #9
 80029ee:	d843      	bhi.n	8002a78 <core_state_transition+0xc0>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 80029f0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f2      	bne.n	80029de <core_state_transition+0x26>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:213
			}
			transition_count[CORE_START]++;
			break;
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
 80029f8:	2304      	movs	r3, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:275
			break;
		default:
			break;
		}
	}
	*instr=str;
 80029fa:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
	return state;
}
 80029fc:	bc30      	pop	{r4, r5}
 80029fe:	4618      	mov	r0, r3
 8002a00:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:199
		switch(state) {
		case CORE_START:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
			}
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 8002a02:	2c2b      	cmp	r4, #43	; 0x2b
 8002a04:	d00f      	beq.n	8002a26 <core_state_transition+0x6e>
 8002a06:	2c2d      	cmp	r4, #45	; 0x2d
 8002a08:	d00d      	beq.n	8002a26 <core_state_transition+0x6e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:202
				state = CORE_S1;
			}
			else if( NEXT_SYMBOL == '.' ) {
 8002a0a:	2c2e      	cmp	r4, #46	; 0x2e
 8002a0c:	d03d      	beq.n	8002a8a <core_state_transition+0xd2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:207
				state = CORE_FLOAT;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
 8002a0e:	684d      	ldr	r5, [r1, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a10:	1c5a      	adds	r2, r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 8002a12:	680c      	ldr	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:206
			}
			else if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
			}
			else {
				state = CORE_INVALID;
 8002a14:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:207
				transition_count[CORE_INVALID]++;
 8002a16:	441d      	add	r5, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			transition_count[CORE_START]++;
 8002a18:	441c      	add	r4, r3
 8002a1a:	e881 0030 	stmia.w	r1, {r4, r5}
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:275
			break;
		default:
			break;
		}
	}
	*instr=str;
 8002a1e:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
	return state;
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bc30      	pop	{r4, r5}
 8002a24:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 8002a26:	680c      	ldr	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a28:	1c5a      	adds	r2, r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 8002a2a:	3401      	adds	r4, #1
 8002a2c:	600c      	str	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a2e:	785c      	ldrb	r4, [r3, #1]
 8002a30:	2c00      	cmp	r4, #0
 8002a32:	f000 8093 	beq.w	8002b5c <core_state_transition+0x1a4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002a36:	2c2c      	cmp	r4, #44	; 0x2c
 8002a38:	f000 8092 	beq.w	8002b60 <core_state_transition+0x1a8>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002a3c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8002a40:	2a09      	cmp	r2, #9
 8002a42:	d80e      	bhi.n	8002a62 <core_state_transition+0xaa>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:214
			transition_count[CORE_START]++;
			break;
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
				transition_count[CORE_S1]++;
 8002a44:	688c      	ldr	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a46:	1c9a      	adds	r2, r3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:214
			transition_count[CORE_START]++;
			break;
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
				transition_count[CORE_S1]++;
 8002a48:	3401      	adds	r4, #1
 8002a4a:	608c      	str	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a4c:	789b      	ldrb	r3, [r3, #2]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0d2      	beq.n	80029f8 <core_state_transition+0x40>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002a52:	2b2c      	cmp	r3, #44	; 0x2c
 8002a54:	d1c5      	bne.n	80029e2 <core_state_transition+0x2a>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:213
			}
			transition_count[CORE_START]++;
			break;
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
 8002a56:	2304      	movs	r3, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:191
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
			str++;
 8002a58:	3201      	adds	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
			break;
		}
	}
	*instr=str;
	return state;
}
 8002a5a:	bc30      	pop	{r4, r5}
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:275
			break;
		default:
			break;
		}
	}
	*instr=str;
 8002a5c:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
	return state;
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:216
		case CORE_S1:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
				transition_count[CORE_S1]++;
			}
			else if( NEXT_SYMBOL == '.' ) {
 8002a62:	2c2e      	cmp	r4, #46	; 0x2e
 8002a64:	d072      	beq.n	8002b4c <core_state_transition+0x194>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:222
				state = CORE_FLOAT;
				transition_count[CORE_S1]++;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S1]++;
 8002a66:	688c      	ldr	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a68:	1c9a      	adds	r2, r3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:221
			else if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_S1]++;
			}
			else {
				state = CORE_INVALID;
 8002a6a:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:222
				transition_count[CORE_S1]++;
 8002a6c:	441c      	add	r4, r3
 8002a6e:	608c      	str	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:275
			break;
		default:
			break;
		}
	}
	*instr=str;
 8002a70:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
	return state;
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bc30      	pop	{r4, r5}
 8002a76:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:232
				state = CORE_FLOAT;
				transition_count[CORE_INT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
 8002a78:	690c      	ldr	r4, [r1, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:231
			if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_INT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
 8002a7a:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a7c:	3201      	adds	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:232
				state = CORE_FLOAT;
				transition_count[CORE_INT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
 8002a7e:	441c      	add	r4, r3
 8002a80:	610c      	str	r4, [r1, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:275
			break;
		default:
			break;
		}
	}
	*instr=str;
 8002a82:	6002      	str	r2, [r0, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:277
	return state;
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bc30      	pop	{r4, r5}
 8002a88:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 8002a8a:	680c      	ldr	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a8c:	1c5a      	adds	r2, r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:209
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
			}
			transition_count[CORE_START]++;
 8002a8e:	3401      	adds	r4, #1
 8002a90:	600c      	str	r4, [r1, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	b1fb      	cbz	r3, 8002ad6 <core_state_transition+0x11e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002a96:	2b2c      	cmp	r3, #44	; 0x2c
 8002a98:	d06d      	beq.n	8002b76 <core_state_transition+0x1be>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:236
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
			}
			break;
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
 8002a9a:	f003 04df 	and.w	r4, r3, #223	; 0xdf
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002a9e:	3b30      	subs	r3, #48	; 0x30
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:236
				state = CORE_INVALID;
				transition_count[CORE_INT]++;
			}
			break;
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
 8002aa0:	2c45      	cmp	r4, #69	; 0x45
 8002aa2:	d112      	bne.n	8002aca <core_state_transition+0x112>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:238
				state = CORE_S2;
				transition_count[CORE_FLOAT]++;
 8002aa4:	694b      	ldr	r3, [r1, #20]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002aa6:	1c54      	adds	r4, r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:238
			}
			break;
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
				state = CORE_S2;
				transition_count[CORE_FLOAT]++;
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	614b      	str	r3, [r1, #20]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002aac:	7853      	ldrb	r3, [r2, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d063      	beq.n	8002b7a <core_state_transition+0x1c2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002ab2:	2b2c      	cmp	r3, #44	; 0x2c
 8002ab4:	d06a      	beq.n	8002b8c <core_state_transition+0x1d4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:246
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
			}
			break;
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
 8002ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8002ab8:	d00f      	beq.n	8002ada <core_state_transition+0x122>
 8002aba:	2b2d      	cmp	r3, #45	; 0x2d
 8002abc:	d00d      	beq.n	8002ada <core_state_transition+0x122>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:252
				state = CORE_EXPONENT;
				transition_count[CORE_S2]++;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S2]++;
 8002abe:	68cc      	ldr	r4, [r1, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:251
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_EXPONENT;
				transition_count[CORE_S2]++;
			}
			else {
				state = CORE_INVALID;
 8002ac0:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002ac2:	3202      	adds	r2, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:252
				state = CORE_EXPONENT;
				transition_count[CORE_S2]++;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_S2]++;
 8002ac4:	441c      	add	r4, r3
 8002ac6:	60cc      	str	r4, [r1, #12]
 8002ac8:	e7a9      	b.n	8002a1e <core_state_transition+0x66>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d838      	bhi.n	8002b40 <core_state_transition+0x188>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002ace:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1df      	bne.n	8002a96 <core_state_transition+0xde>
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	e7a1      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:248
			}
			break;
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_EXPONENT;
				transition_count[CORE_S2]++;
 8002ada:	68cb      	ldr	r3, [r1, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002adc:	1c94      	adds	r4, r2, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:248
			}
			break;
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_EXPONENT;
				transition_count[CORE_S2]++;
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60cb      	str	r3, [r1, #12]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002ae2:	7893      	ldrb	r3, [r2, #2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d04b      	beq.n	8002b80 <core_state_transition+0x1c8>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002ae8:	2b2c      	cmp	r3, #44	; 0x2c
 8002aea:	d04c      	beq.n	8002b86 <core_state_transition+0x1ce>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002aec:	3b30      	subs	r3, #48	; 0x30
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d811      	bhi.n	8002b16 <core_state_transition+0x15e>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:258
			}
			break;
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_SCIENTIFIC;
				transition_count[CORE_EXPONENT]++;
 8002af2:	698b      	ldr	r3, [r1, #24]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002af4:	1cd4      	adds	r4, r2, #3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:258
			}
			break;
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_SCIENTIFIC;
				transition_count[CORE_EXPONENT]++;
 8002af6:	3301      	adds	r3, #1
 8002af8:	618b      	str	r3, [r1, #24]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002afa:	78d3      	ldrb	r3, [r2, #3]
 8002afc:	b143      	cbz	r3, 8002b10 <core_state_transition+0x158>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002afe:	2b2c      	cmp	r3, #44	; 0x2c
 8002b00:	d030      	beq.n	8002b64 <core_state_transition+0x1ac>
ee_isdigit():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:170
#endif
}

static ee_u8 ee_isdigit(ee_u8 c) {
	ee_u8 retval;
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
 8002b02:	3b30      	subs	r3, #48	; 0x30
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d80c      	bhi.n	8002b22 <core_state_transition+0x16a>
core_state_transition():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f6      	bne.n	8002afe <core_state_transition+0x146>
 8002b10:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:257
				transition_count[CORE_S2]++;
			}
			break;
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_SCIENTIFIC;
 8002b12:	2307      	movs	r3, #7
 8002b14:	e783      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:262
				transition_count[CORE_EXPONENT]++;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_EXPONENT]++;
 8002b16:	698c      	ldr	r4, [r1, #24]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:261
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_SCIENTIFIC;
				transition_count[CORE_EXPONENT]++;
			}
			else {
				state = CORE_INVALID;
 8002b18:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b1a:	3203      	adds	r2, #3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:262
				state = CORE_SCIENTIFIC;
				transition_count[CORE_EXPONENT]++;
			}
			else {
				state = CORE_INVALID;
				transition_count[CORE_EXPONENT]++;
 8002b1c:	441c      	add	r4, r3
 8002b1e:	618c      	str	r4, [r1, #24]
 8002b20:	e77d      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:268
			}
			break;
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
 8002b22:	684d      	ldr	r5, [r1, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:267
				transition_count[CORE_EXPONENT]++;
			}
			break;
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
 8002b24:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b26:	1c62      	adds	r2, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:268
			}
			break;
		case CORE_SCIENTIFIC:
			if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_INVALID]++;
 8002b28:	441d      	add	r5, r3
 8002b2a:	604d      	str	r5, [r1, #4]
 8002b2c:	e777      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:228
			}
			break;
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_INT]++;
 8002b2e:	690b      	ldr	r3, [r1, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b30:	1c54      	adds	r4, r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:228
			}
			break;
		case CORE_INT:
			if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_INT]++;
 8002b32:	3301      	adds	r3, #1
 8002b34:	610b      	str	r3, [r1, #16]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b36:	7853      	ldrb	r3, [r2, #1]
 8002b38:	4622      	mov	r2, r4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ab      	bne.n	8002a96 <core_state_transition+0xde>
 8002b3e:	e7ca      	b.n	8002ad6 <core_state_transition+0x11e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:242
				state = CORE_S2;
				transition_count[CORE_FLOAT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
 8002b40:	694c      	ldr	r4, [r1, #20]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:241
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
				state = CORE_S2;
				transition_count[CORE_FLOAT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
 8002b42:	2301      	movs	r3, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b44:	3201      	adds	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:242
				state = CORE_S2;
				transition_count[CORE_FLOAT]++;
			}
			else if(!ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INVALID;
				transition_count[CORE_FLOAT]++;
 8002b46:	441c      	add	r4, r3
 8002b48:	614c      	str	r4, [r1, #20]
 8002b4a:	e768      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:218
				state = CORE_INT;
				transition_count[CORE_S1]++;
			}
			else if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_S1]++;
 8002b4c:	688c      	ldr	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b4e:	1c9a      	adds	r2, r3, #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:218
				state = CORE_INT;
				transition_count[CORE_S1]++;
			}
			else if( NEXT_SYMBOL == '.' ) {
				state = CORE_FLOAT;
				transition_count[CORE_S1]++;
 8002b50:	3401      	adds	r4, #1
 8002b52:	608c      	str	r4, [r1, #8]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b54:	789b      	ldrb	r3, [r3, #2]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d19d      	bne.n	8002a96 <core_state_transition+0xde>
 8002b5a:	e7bc      	b.n	8002ad6 <core_state_transition+0x11e>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:200
		case CORE_START:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_INT;
			}
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_S1;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e75e      	b.n	8002a1e <core_state_transition+0x66>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e779      	b.n	8002a58 <core_state_transition+0xa0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b64:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:257
				transition_count[CORE_S2]++;
			}
			break;
		case CORE_EXPONENT:
			if(ee_isdigit(NEXT_SYMBOL)) {
				state = CORE_SCIENTIFIC;
 8002b66:	2307      	movs	r3, #7
 8002b68:	e776      	b.n	8002a58 <core_state_transition+0xa0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b6a:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:187
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
 8002b6c:	4623      	mov	r3, r4
 8002b6e:	e756      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
	for( ; *str && state != CORE_INVALID; str++ ) {
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002b70:	461a      	mov	r2, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:187
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e770      	b.n	8002a58 <core_state_transition+0xa0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:190
	for( ; *str && state != CORE_INVALID; str++ ) {
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
 8002b76:	2305      	movs	r3, #5
 8002b78:	e76e      	b.n	8002a58 <core_state_transition+0xa0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b7a:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:237
				transition_count[CORE_INT]++;
			}
			break;
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
				state = CORE_S2;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e74e      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b80:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:247
				transition_count[CORE_FLOAT]++;
			}
			break;
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_EXPONENT;
 8002b82:	2306      	movs	r3, #6
 8002b84:	e74b      	b.n	8002a1e <core_state_transition+0x66>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b86:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:247
				transition_count[CORE_FLOAT]++;
			}
			break;
		case CORE_S2:
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
				state = CORE_EXPONENT;
 8002b88:	2306      	movs	r3, #6
 8002b8a:	e765      	b.n	8002a58 <core_state_transition+0xa0>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:188

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
	for( ; *str && state != CORE_INVALID; str++ ) {
 8002b8c:	4622      	mov	r2, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:237
				transition_count[CORE_INT]++;
			}
			break;
		case CORE_FLOAT:
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
				state = CORE_S2;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e762      	b.n	8002a58 <core_state_transition+0xa0>
 8002b92:	bf00      	nop

08002b94 <core_bench_state>:
core_bench_state():
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:45

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	b092      	sub	sp, #72	; 0x48
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	4681      	mov	r9, r0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	a80a      	add	r0, sp, #40	; 0x28
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	4698      	mov	r8, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:48
	ee_u32 final_counts[NUM_CORE_STATES];
	ee_u32 track_counts[NUM_CORE_STATES];
	ee_u8 *p=memblock;
 8002ba8:	9401      	str	r4, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:45

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 8002baa:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 8002bae:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8002bb2:	f000 fbeb 	bl	800338c <memset>
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	2100      	movs	r1, #0
 8002bba:	a802      	add	r0, sp, #8
 8002bbc:	f000 fbe6 	bl	800338c <memset>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:59
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
		final_counts[i]=track_counts[i]=0;
	}
	/* run the state machine over the input */
	while (*p!=0) {
 8002bc0:	7822      	ldrb	r2, [r4, #0]
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d05a      	beq.n	8002c7c <core_bench_state+0xe8>
 8002bc6:	ad01      	add	r5, sp, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:60
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 8002bc8:	a90a      	add	r1, sp, #40	; 0x28
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f7ff fef4 	bl	80029b8 <core_state_transition>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:61
		final_counts[fstate]++;
 8002bd0:	aa12      	add	r2, sp, #72	; 0x48
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:59
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
		final_counts[i]=track_counts[i]=0;
	}
	/* run the state machine over the input */
	while (*p!=0) {
 8002bd2:	9b01      	ldr	r3, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:61
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
		final_counts[fstate]++;
 8002bd4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:59
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
		final_counts[i]=track_counts[i]=0;
	}
	/* run the state machine over the input */
	while (*p!=0) {
 8002bd8:	781a      	ldrb	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:61
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
		final_counts[fstate]++;
 8002bda:	f850 3c40 	ldr.w	r3, [r0, #-64]
 8002bde:	3301      	adds	r3, #1
 8002be0:	f840 3c40 	str.w	r3, [r0, #-64]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:59
#endif
	for (i=0; i<NUM_CORE_STATES; i++) {
		final_counts[i]=track_counts[i]=0;
	}
	/* run the state machine over the input */
	while (*p!=0) {
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d1ef      	bne.n	8002bc8 <core_bench_state+0x34>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002be8:	44a1      	add	r9, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:69
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8002bea:	9401      	str	r4, [sp, #4]
 8002bec:	7822      	ldrb	r2, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002bee:	454c      	cmp	r4, r9
 8002bf0:	d241      	bcs.n	8002c76 <core_bench_state+0xe2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:45

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	e000      	b.n	8002bf8 <core_bench_state+0x64>
 8002bf6:	781a      	ldrb	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:71
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
		if (*p!=',')
 8002bf8:	2a2c      	cmp	r2, #44	; 0x2c
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:72
			*p^=(ee_u8)seed1;
 8002bfa:	ea82 010a 	eor.w	r1, r2, sl
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:71
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
		if (*p!=',')
 8002bfe:	d001      	beq.n	8002c04 <core_bench_state+0x70>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:72
			*p^=(ee_u8)seed1;
 8002c00:	7019      	strb	r1, [r3, #0]
 8002c02:	9b01      	ldr	r3, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:73
		p+=step;
 8002c04:	4433      	add	r3, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002c06:	4599      	cmp	r9, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:73
		if (*p!=',')
			*p^=(ee_u8)seed1;
		p+=step;
 8002c08:	9301      	str	r3, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002c0a:	d8f4      	bhi.n	8002bf6 <core_bench_state+0x62>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c0c:	7823      	ldrb	r3, [r4, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:75
	while (p < (memblock+blksize)) { /* insert some corruption */
		if (*p!=',')
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
 8002c0e:	9401      	str	r4, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d039      	beq.n	8002c88 <core_bench_state+0xf4>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:78
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
 8002c14:	a90a      	add	r1, sp, #40	; 0x28
 8002c16:	4628      	mov	r0, r5
 8002c18:	f7ff fece 	bl	80029b8 <core_state_transition>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:79
		final_counts[fstate]++;
 8002c1c:	aa12      	add	r2, sp, #72	; 0x48
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c1e:	9b01      	ldr	r3, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:79
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
		final_counts[fstate]++;
 8002c20:	eb02 0080 	add.w	r0, r2, r0, lsl #2
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c24:	781a      	ldrb	r2, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:79
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
		final_counts[fstate]++;
 8002c26:	f850 3c40 	ldr.w	r3, [r0, #-64]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f840 3c40 	str.w	r3, [r0, #-64]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c30:	2a00      	cmp	r2, #0
 8002c32:	d1ef      	bne.n	8002c14 <core_bench_state+0x80>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:88
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 8002c34:	454c      	cmp	r4, r9
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:87
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8002c36:	9401      	str	r4, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:88
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 8002c38:	d20b      	bcs.n	8002c52 <core_bench_state+0xbe>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:45

	Go over the input twice, once direct, and once after introducing some corruption. 
*/
ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
{
 8002c3a:	4621      	mov	r1, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:89
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
		if (*p!=',')
 8002c3c:	780b      	ldrb	r3, [r1, #0]
 8002c3e:	2b2c      	cmp	r3, #44	; 0x2c
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:90
			*p^=(ee_u8)seed2;
 8002c40:	ea83 0208 	eor.w	r2, r3, r8
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:89
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
		if (*p!=',')
 8002c44:	d001      	beq.n	8002c4a <core_bench_state+0xb6>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:90
			*p^=(ee_u8)seed2;
 8002c46:	700a      	strb	r2, [r1, #0]
 8002c48:	9901      	ldr	r1, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:91
		p+=step;
 8002c4a:	4431      	add	r1, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:88
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 8002c4c:	4549      	cmp	r1, r9
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:91
		if (*p!=',')
			*p^=(ee_u8)seed2;
		p+=step;
 8002c4e:	9101      	str	r1, [sp, #4]
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:88
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
 8002c50:	d3f4      	bcc.n	8002c3c <core_bench_state+0xa8>
 8002c52:	ac09      	add	r4, sp, #36	; 0x24
 8002c54:	4626      	mov	r6, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:95 (discriminator 3)
			*p^=(ee_u8)seed2;
		p+=step;
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
		crc=crcu32(final_counts[i],crc);
 8002c56:	4639      	mov	r1, r7
 8002c58:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8002c5c:	f000 f8dc 	bl	8002e18 <crcu32>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:96 (discriminator 3)
		crc=crcu32(track_counts[i],crc);
 8002c60:	4601      	mov	r1, r0
 8002c62:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8002c66:	f000 f8d7 	bl	8002e18 <crcu32>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:94 (discriminator 3)
		if (*p!=',')
			*p^=(ee_u8)seed2;
		p+=step;
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
 8002c6a:	42b5      	cmp	r5, r6
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:96 (discriminator 3)
		crc=crcu32(final_counts[i],crc);
		crc=crcu32(track_counts[i],crc);
 8002c6c:	4607      	mov	r7, r0
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:94 (discriminator 3)
		if (*p!=',')
			*p^=(ee_u8)seed2;
		p+=step;
	}
	/* end timing */
	for (i=0; i<NUM_CORE_STATES; i++) {
 8002c6e:	d1f2      	bne.n	8002c56 <core_bench_state+0xc2>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:99
		crc=crcu32(final_counts[i],crc);
		crc=crcu32(track_counts[i],crc);
	}
	return crc;
}
 8002c70:	b012      	add	sp, #72	; 0x48
 8002c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:77
			*p^=(ee_u8)seed1;
		p+=step;
	}
	p=memblock;
	/* run the state machine over the input again */
	while (*p!=0) {
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d1cc      	bne.n	8002c14 <core_bench_state+0x80>
 8002c7a:	e7ea      	b.n	8002c52 <core_bench_state+0xbe>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002c7c:	44a1      	add	r9, r4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:69
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8002c7e:	9401      	str	r4, [sp, #4]
 8002c80:	ad01      	add	r5, sp, #4
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:70
	while (p < (memblock+blksize)) { /* insert some corruption */
 8002c82:	454c      	cmp	r4, r9
 8002c84:	d3b5      	bcc.n	8002bf2 <core_bench_state+0x5e>
 8002c86:	e7e4      	b.n	8002c52 <core_bench_state+0xbe>
/Users/lix/Projects/luna/performance/Release/../coremark/core_state.c:87
	}
	ee_printf("\n");
#else
	}
#endif
	p=memblock;
 8002c88:	9401      	str	r4, [sp, #4]
 8002c8a:	e7d6      	b.n	8002c3a <core_bench_state+0xa6>

08002c8c <get_seed_32>:
get_seed_32():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:41
	extern volatile ee_s32 seed3_volatile;
	extern volatile ee_s32 seed4_volatile;
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
		ee_s32 retval;
		switch (i) {
 8002c8c:	3801      	subs	r0, #1
 8002c8e:	2804      	cmp	r0, #4
 8002c90:	d813      	bhi.n	8002cba <get_seed_32+0x2e>
 8002c92:	e8df f000 	tbb	[pc, r0]
 8002c96:	0906      	.short	0x0906
 8002c98:	0f0c      	.short	0x0f0c
 8002c9a:	03          	.byte	0x03
 8002c9b:	00          	.byte	0x00
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:55
				break;
			case 4:
				retval=seed4_volatile;
				break;
			case 5:
				retval=seed5_volatile;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <get_seed_32+0x34>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:56
				break;
 8002ca0:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:43
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
		ee_s32 retval;
		switch (i) {
			case 1:
				retval=seed1_volatile;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <get_seed_32+0x38>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:44
				break;
 8002ca6:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:46
			case 2:
				retval=seed2_volatile;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <get_seed_32+0x3c>)
 8002caa:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:47
				break;
 8002cac:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:49
			case 3:
				retval=seed3_volatile;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <get_seed_32+0x40>)
 8002cb0:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:50
				break;
 8002cb2:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:52
			case 4:
				retval=seed4_volatile;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <get_seed_32+0x44>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:53
				break;
 8002cb8:	4770      	bx	lr
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:58
			case 5:
				retval=seed5_volatile;
				break;
			default:
				retval=0;
 8002cba:	2000      	movs	r0, #0
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:62
				break;
		}
		return retval;
	}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	200001b0 	.word	0x200001b0
 8002cc4:	200001ac 	.word	0x200001ac
 8002cc8:	200001b4 	.word	0x200001b4
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <crcu16>:
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002cd4:	f24a 0301 	movw	r3, #40961	; 0xa001
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002cd8:	ea81 0200 	eor.w	r2, r1, r0
 8002cdc:	0849      	lsrs	r1, r1, #1
 8002cde:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ce2:	ea81 0203 	eor.w	r2, r1, r3
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:166
		else
		   crc &= 0x7fff;
    }
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
 8002ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce8:	bf18      	it	ne
 8002cea:	4611      	movne	r1, r2
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002cec:	f3c0 0446 	ubfx	r4, r0, #1, #7
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:168
    }
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 8002cf0:	0a00      	lsrs	r0, r0, #8
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002cf2:	0867      	lsrs	r7, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002cf4:	404c      	eors	r4, r1
 8002cf6:	0849      	lsrs	r1, r1, #1
 8002cf8:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 8002cfc:	ea4f 0657 	mov.w	r6, r7, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d00:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d04:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8002d08:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002d0c:	bf18      	it	ne
 8002d0e:	4611      	movne	r1, r2
 8002d10:	086c      	lsrs	r4, r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d12:	404f      	eors	r7, r1
 8002d14:	0849      	lsrs	r1, r1, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 8002d16:	ea4f 0c54 	mov.w	ip, r4, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d1a:	ea81 0203 	eor.w	r2, r1, r3
 8002d1e:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d22:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8002d26:	bf18      	it	ne
 8002d28:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d2a:	404e      	eors	r6, r1
 8002d2c:	0849      	lsrs	r1, r1, #1
 8002d2e:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d32:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d36:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8002d3a:	bf18      	it	ne
 8002d3c:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d3e:	404d      	eors	r5, r1
 8002d40:	0849      	lsrs	r1, r1, #1
 8002d42:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d46:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d4a:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002d4e:	bf18      	it	ne
 8002d50:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d52:	404c      	eors	r4, r1
 8002d54:	0849      	lsrs	r1, r1, #1
 8002d56:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d5a:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d5e:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8002d62:	bf18      	it	ne
 8002d64:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d66:	ea81 020c 	eor.w	r2, r1, ip
 8002d6a:	0849      	lsrs	r1, r1, #1
 8002d6c:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d70:	ea81 0203 	eor.w	r2, r1, r3
 8002d74:	bf08      	it	eq
 8002d76:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d78:	ea82 0c5c 	eor.w	ip, r2, ip, lsr #1
 8002d7c:	0851      	lsrs	r1, r2, #1
 8002d7e:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d82:	ea81 0203 	eor.w	r2, r1, r3
 8002d86:	bf08      	it	eq
 8002d88:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002d8a:	0861      	lsrs	r1, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d8c:	ea82 0c00 	eor.w	ip, r2, r0
 8002d90:	0850      	lsrs	r0, r2, #1
 8002d92:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002d96:	ea80 0203 	eor.w	r2, r0, r3
 8002d9a:	bf18      	it	ne
 8002d9c:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002d9e:	ea8e 0e00 	eor.w	lr, lr, r0
 8002da2:	0840      	lsrs	r0, r0, #1
 8002da4:	f01e 0f01 	tst.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002da8:	ea80 0203 	eor.w	r2, r0, r3
 8002dac:	bf18      	it	ne
 8002dae:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002db0:	4047      	eors	r7, r0
 8002db2:	0840      	lsrs	r0, r0, #1
 8002db4:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002db8:	ea80 0203 	eor.w	r2, r0, r3
 8002dbc:	bf18      	it	ne
 8002dbe:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002dc0:	4046      	eors	r6, r0
 8002dc2:	0840      	lsrs	r0, r0, #1
 8002dc4:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002dc8:	ea80 0203 	eor.w	r2, r0, r3
 8002dcc:	bf18      	it	ne
 8002dce:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002dd0:	4045      	eors	r5, r0
 8002dd2:	0840      	lsrs	r0, r0, #1
 8002dd4:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002dd8:	ea80 0203 	eor.w	r2, r0, r3
 8002ddc:	bf18      	it	ne
 8002dde:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002de0:	4044      	eors	r4, r0
 8002de2:	0840      	lsrs	r0, r0, #1
 8002de4:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002de8:	ea80 0203 	eor.w	r2, r0, r3
 8002dec:	bf18      	it	ne
 8002dee:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002df0:	ea80 0201 	eor.w	r2, r0, r1
 8002df4:	0840      	lsrs	r0, r0, #1
 8002df6:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002dfa:	ea80 0203 	eor.w	r2, r0, r3
 8002dfe:	bf18      	it	ne
 8002e00:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e02:	ea80 0151 	eor.w	r1, r0, r1, lsr #1
 8002e06:	0840      	lsrs	r0, r0, #1
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:169
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
	return crc;
 8002e08:	f011 0f01 	tst.w	r1, #1
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e0c:	ea83 0300 	eor.w	r3, r3, r0
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:170
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
	return crc;
}
 8002e10:	bf18      	it	ne
 8002e12:	4618      	movne	r0, r3
 8002e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e16:	bf00      	nop

08002e18 <crcu32>:
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e18:	f24a 0301 	movw	r3, #40961	; 0xa001
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e1c:	ea81 0200 	eor.w	r2, r1, r0
 8002e20:	0849      	lsrs	r1, r1, #1
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:168
    }
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 8002e22:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8002e26:	f012 0f01 	tst.w	r2, #1
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e2a:	ea81 0203 	eor.w	r2, r1, r3
crcu32():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:171
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
	return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
 8002e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e30:	bf18      	it	ne
 8002e32:	4611      	movne	r1, r2
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002e34:	f3c0 0446 	ubfx	r4, r0, #1, #7
 8002e38:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e3c:	ea81 0204 	eor.w	r2, r1, r4
 8002e40:	0849      	lsrs	r1, r1, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 8002e42:	0865      	lsrs	r5, r4, #1
 8002e44:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e48:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002e4c:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8002e50:	bf18      	it	ne
 8002e52:	4611      	movne	r1, r2
 8002e54:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8002e58:	0866      	lsrs	r6, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e5a:	404d      	eors	r5, r1
 8002e5c:	0849      	lsrs	r1, r1, #1
crcu32():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:173
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
	return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
 8002e5e:	0c00      	lsrs	r0, r0, #16
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e60:	ea81 0203 	eor.w	r2, r1, r3
 8002e64:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002e68:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002e6c:	bf18      	it	ne
 8002e6e:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e70:	404c      	eors	r4, r1
 8002e72:	0849      	lsrs	r1, r1, #1
 8002e74:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e78:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002e7c:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8002e80:	bf18      	it	ne
 8002e82:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e84:	404e      	eors	r6, r1
 8002e86:	0849      	lsrs	r1, r1, #1
 8002e88:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002e8c:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002e90:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8002e94:	bf18      	it	ne
 8002e96:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002e98:	404d      	eors	r5, r1
 8002e9a:	0849      	lsrs	r1, r1, #1
 8002e9c:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ea0:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002ea4:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002ea8:	bf18      	it	ne
 8002eaa:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002eac:	ea81 0204 	eor.w	r2, r1, r4
 8002eb0:	0849      	lsrs	r1, r1, #1
 8002eb2:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002eb6:	ea81 0203 	eor.w	r2, r1, r3
 8002eba:	bf18      	it	ne
 8002ebc:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002ebe:	ea81 0454 	eor.w	r4, r1, r4, lsr #1
 8002ec2:	0849      	lsrs	r1, r1, #1
 8002ec4:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 8002ec8:	ea4f 0455 	mov.w	r4, r5, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ecc:	ea81 0203 	eor.w	r2, r1, r3
 8002ed0:	bf18      	it	ne
 8002ed2:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002ed4:	ea81 0c0c 	eor.w	ip, r1, ip
 8002ed8:	0849      	lsrs	r1, r1, #1
 8002eda:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ede:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002ee2:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8002ee6:	bf18      	it	ne
 8002ee8:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002eea:	ea81 0e0e 	eor.w	lr, r1, lr
 8002eee:	0849      	lsrs	r1, r1, #1
 8002ef0:	f01e 0f01 	tst.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ef4:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002ef8:	f3c0 0e46 	ubfx	lr, r0, #1, #7
 8002efc:	bf18      	it	ne
 8002efe:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f00:	404f      	eors	r7, r1
 8002f02:	0849      	lsrs	r1, r1, #1
 8002f04:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f08:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002f0c:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8002f10:	bf18      	it	ne
 8002f12:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f14:	404e      	eors	r6, r1
 8002f16:	0849      	lsrs	r1, r1, #1
 8002f18:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f1c:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002f20:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8002f24:	bf18      	it	ne
 8002f26:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f28:	404d      	eors	r5, r1
 8002f2a:	0849      	lsrs	r1, r1, #1
 8002f2c:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f30:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002f34:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002f38:	bf18      	it	ne
 8002f3a:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f3c:	404c      	eors	r4, r1
 8002f3e:	0849      	lsrs	r1, r1, #1
 8002f40:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f44:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002f48:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8002f4c:	bf18      	it	ne
 8002f4e:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f50:	ea81 020c 	eor.w	r2, r1, ip
 8002f54:	0849      	lsrs	r1, r1, #1
 8002f56:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f5a:	ea81 0203 	eor.w	r2, r1, r3
 8002f5e:	bf18      	it	ne
 8002f60:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f62:	ea81 0c5c 	eor.w	ip, r1, ip, lsr #1
 8002f66:	0849      	lsrs	r1, r1, #1
 8002f68:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 8002f6c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f70:	ea81 0203 	eor.w	r2, r1, r3
 8002f74:	bf18      	it	ne
 8002f76:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f78:	ea81 0200 	eor.w	r2, r1, r0
 8002f7c:	0849      	lsrs	r1, r1, #1
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:168
    }
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 8002f7e:	0a00      	lsrs	r0, r0, #8
 8002f80:	f012 0f01 	tst.w	r2, #1
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f84:	ea81 0203 	eor.w	r2, r1, r3
 8002f88:	bf18      	it	ne
 8002f8a:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002f8c:	ea81 0e0e 	eor.w	lr, r1, lr
 8002f90:	0849      	lsrs	r1, r1, #1
 8002f92:	f01e 0f01 	tst.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002f96:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002f9a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8002f9e:	bf18      	it	ne
 8002fa0:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002fa2:	404f      	eors	r7, r1
 8002fa4:	0849      	lsrs	r1, r1, #1
 8002fa6:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002faa:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002fae:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8002fb2:	bf18      	it	ne
 8002fb4:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002fb6:	404e      	eors	r6, r1
 8002fb8:	0849      	lsrs	r1, r1, #1
 8002fba:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002fbe:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002fc2:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8002fc6:	bf18      	it	ne
 8002fc8:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002fca:	404d      	eors	r5, r1
 8002fcc:	0849      	lsrs	r1, r1, #1
 8002fce:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002fd2:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002fd6:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8002fda:	bf18      	it	ne
 8002fdc:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002fde:	404c      	eors	r4, r1
 8002fe0:	0849      	lsrs	r1, r1, #1
 8002fe2:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002fe6:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8002fea:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8002fee:	bf18      	it	ne
 8002ff0:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8002ff2:	ea81 020c 	eor.w	r2, r1, ip
 8002ff6:	0849      	lsrs	r1, r1, #1
 8002ff8:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8002ffc:	ea81 0203 	eor.w	r2, r1, r3
 8003000:	bf08      	it	eq
 8003002:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003004:	ea82 0c5c 	eor.w	ip, r2, ip, lsr #1
 8003008:	0851      	lsrs	r1, r2, #1
 800300a:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 800300e:	ea81 0203 	eor.w	r2, r1, r3
 8003012:	bf08      	it	eq
 8003014:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8003016:	0861      	lsrs	r1, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003018:	ea80 0c02 	eor.w	ip, r0, r2
 800301c:	0850      	lsrs	r0, r2, #1
 800301e:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003022:	ea80 0203 	eor.w	r2, r0, r3
 8003026:	bf18      	it	ne
 8003028:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800302a:	ea8e 0e00 	eor.w	lr, lr, r0
 800302e:	0840      	lsrs	r0, r0, #1
 8003030:	f01e 0f01 	tst.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003034:	ea80 0203 	eor.w	r2, r0, r3
 8003038:	bf18      	it	ne
 800303a:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800303c:	4047      	eors	r7, r0
 800303e:	0840      	lsrs	r0, r0, #1
 8003040:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003044:	ea80 0203 	eor.w	r2, r0, r3
 8003048:	bf18      	it	ne
 800304a:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800304c:	4046      	eors	r6, r0
 800304e:	0840      	lsrs	r0, r0, #1
 8003050:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003054:	ea80 0203 	eor.w	r2, r0, r3
 8003058:	bf18      	it	ne
 800305a:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800305c:	4045      	eors	r5, r0
 800305e:	0840      	lsrs	r0, r0, #1
 8003060:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003064:	ea80 0203 	eor.w	r2, r0, r3
 8003068:	bf18      	it	ne
 800306a:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800306c:	4044      	eors	r4, r0
 800306e:	0840      	lsrs	r0, r0, #1
 8003070:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003074:	ea80 0203 	eor.w	r2, r0, r3
 8003078:	bf18      	it	ne
 800307a:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800307c:	ea80 0201 	eor.w	r2, r0, r1
 8003080:	0840      	lsrs	r0, r0, #1
 8003082:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003086:	ea80 0203 	eor.w	r2, r0, r3
 800308a:	bf18      	it	ne
 800308c:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800308e:	ea80 0151 	eor.w	r1, r0, r1, lsr #1
 8003092:	0840      	lsrs	r0, r0, #1
crcu32():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:174
	return crc;
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
 8003094:	f011 0f01 	tst.w	r1, #1
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003098:	ea83 0300 	eor.w	r3, r3, r0
crcu32():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:175
}
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
}
 800309c:	bf18      	it	ne
 800309e:	4618      	movne	r0, r3
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a2:	bf00      	nop

080030a4 <crc16>:
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80030a4:	f24a 0301 	movw	r3, #40961	; 0xa001
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80030a8:	ea81 0200 	eor.w	r2, r1, r0
 80030ac:	0849      	lsrs	r1, r1, #1
 80030ae:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80030b2:	ea81 0203 	eor.w	r2, r1, r3
crc16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:176
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
 80030b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b8:	bf18      	it	ne
 80030ba:	4611      	movne	r1, r2
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 80030bc:	f3c0 0446 	ubfx	r4, r0, #1, #7
crcu16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:168
    }
	return crc;
} 
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
	crc=crcu8( (ee_u8) (newval)				,crc);
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
 80030c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 80030c4:	0867      	lsrs	r7, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80030c6:	404c      	eors	r4, r1
 80030c8:	0849      	lsrs	r1, r1, #1
 80030ca:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 80030ce:	ea4f 0657 	mov.w	r6, r7, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80030d2:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 80030d6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80030da:	ea4f 0556 	mov.w	r5, r6, lsr #1
 80030de:	bf18      	it	ne
 80030e0:	4611      	movne	r1, r2
 80030e2:	086c      	lsrs	r4, r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80030e4:	404f      	eors	r7, r1
 80030e6:	0849      	lsrs	r1, r1, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
		data >>= 1;
 80030e8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80030ec:	ea81 0203 	eor.w	r2, r1, r3
 80030f0:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 80030f4:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80030f8:	bf18      	it	ne
 80030fa:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80030fc:	404e      	eors	r6, r1
 80030fe:	0849      	lsrs	r1, r1, #1
 8003100:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003104:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8003108:	ea4f 0657 	mov.w	r6, r7, lsr #1
 800310c:	bf18      	it	ne
 800310e:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003110:	404d      	eors	r5, r1
 8003112:	0849      	lsrs	r1, r1, #1
 8003114:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003118:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 800311c:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8003120:	bf18      	it	ne
 8003122:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003124:	404c      	eors	r4, r1
 8003126:	0849      	lsrs	r1, r1, #1
 8003128:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 800312c:	ea81 0203 	eor.w	r2, r1, r3
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 8003130:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8003134:	bf18      	it	ne
 8003136:	4611      	movne	r1, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003138:	ea81 020c 	eor.w	r2, r1, ip
 800313c:	0849      	lsrs	r1, r1, #1
 800313e:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003142:	ea81 0203 	eor.w	r2, r1, r3
 8003146:	bf08      	it	eq
 8003148:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800314a:	ea82 0c5c 	eor.w	ip, r2, ip, lsr #1
 800314e:	0851      	lsrs	r1, r2, #1
 8003150:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003154:	ea81 0203 	eor.w	r2, r1, r3
 8003158:	bf08      	it	eq
 800315a:	460a      	moveq	r2, r1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:149
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;
 800315c:	0861      	lsrs	r1, r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 800315e:	ea82 0c00 	eor.w	ip, r2, r0
 8003162:	0850      	lsrs	r0, r2, #1
 8003164:	f01c 0f01 	tst.w	ip, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 8003168:	ea80 0203 	eor.w	r2, r0, r3
 800316c:	bf18      	it	ne
 800316e:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003170:	ea8e 0e00 	eor.w	lr, lr, r0
 8003174:	0840      	lsrs	r0, r0, #1
 8003176:	f01e 0f01 	tst.w	lr, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 800317a:	ea80 0203 	eor.w	r2, r0, r3
 800317e:	bf18      	it	ne
 8003180:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003182:	4047      	eors	r7, r0
 8003184:	0840      	lsrs	r0, r0, #1
 8003186:	f017 0f01 	tst.w	r7, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 800318a:	ea80 0203 	eor.w	r2, r0, r3
 800318e:	bf18      	it	ne
 8003190:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 8003192:	4046      	eors	r6, r0
 8003194:	0840      	lsrs	r0, r0, #1
 8003196:	f016 0f01 	tst.w	r6, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 800319a:	ea80 0203 	eor.w	r2, r0, r3
 800319e:	bf18      	it	ne
 80031a0:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80031a2:	4045      	eors	r5, r0
 80031a4:	0840      	lsrs	r0, r0, #1
 80031a6:	f015 0f01 	tst.w	r5, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80031aa:	ea80 0203 	eor.w	r2, r0, r3
 80031ae:	bf18      	it	ne
 80031b0:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80031b2:	4044      	eors	r4, r0
 80031b4:	0840      	lsrs	r0, r0, #1
 80031b6:	f014 0f01 	tst.w	r4, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80031ba:	ea80 0203 	eor.w	r2, r0, r3
 80031be:	bf18      	it	ne
 80031c0:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80031c2:	ea80 0201 	eor.w	r2, r0, r1
 80031c6:	0840      	lsrs	r0, r0, #1
 80031c8:	f012 0f01 	tst.w	r2, #1
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80031cc:	ea80 0203 	eor.w	r2, r0, r3
 80031d0:	bf18      	it	ne
 80031d2:	4610      	movne	r0, r2
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:148
{
	ee_u8 i=0,x16=0,carry=0;

	for (i = 0; i < 8; i++)
    {
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
 80031d4:	ea80 0151 	eor.w	r1, r0, r1, lsr #1
 80031d8:	0840      	lsrs	r0, r0, #1
crc16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:177
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
	return crcu16((ee_u16)newval, crc);
 80031da:	f011 0f01 	tst.w	r1, #1
crcu8():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:160
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
 80031de:	ea83 0300 	eor.w	r3, r3, r0
crc16():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:178
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
	return crcu16((ee_u16)newval, crc);
}
 80031e2:	bf18      	it	ne
 80031e4:	4618      	movne	r0, r3
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e8 <check_data_types>:
check_data_types():
/Users/lix/Projects/luna/performance/Release/../coremark/core_util.c:210
	}
	if (retval>0) {
		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
	}
	return retval;
}
 80031e8:	2000      	movs	r0, #0
 80031ea:	4770      	bx	lr

080031ec <__errno>:
__errno():
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <__errno+0x8>)
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000078 	.word	0x20000078

080031f8 <_cleanup_r>:
_cleanup_r():
 80031f8:	4901      	ldr	r1, [pc, #4]	; (8003200 <_cleanup_r+0x8>)
 80031fa:	f000 b8a9 	b.w	8003350 <_fwalk_reent>
 80031fe:	bf00      	nop
 8003200:	080038cd 	.word	0x080038cd

08003204 <std.isra.0>:
std.isra.0():
 8003204:	2300      	movs	r3, #0
 8003206:	b510      	push	{r4, lr}
 8003208:	4604      	mov	r4, r0
 800320a:	6003      	str	r3, [r0, #0]
 800320c:	6043      	str	r3, [r0, #4]
 800320e:	6083      	str	r3, [r0, #8]
 8003210:	8181      	strh	r1, [r0, #12]
 8003212:	6643      	str	r3, [r0, #100]	; 0x64
 8003214:	81c2      	strh	r2, [r0, #14]
 8003216:	6103      	str	r3, [r0, #16]
 8003218:	6143      	str	r3, [r0, #20]
 800321a:	6183      	str	r3, [r0, #24]
 800321c:	4619      	mov	r1, r3
 800321e:	2208      	movs	r2, #8
 8003220:	305c      	adds	r0, #92	; 0x5c
 8003222:	f000 f8b3 	bl	800338c <memset>
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <std.isra.0+0x38>)
 8003228:	6263      	str	r3, [r4, #36]	; 0x24
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <std.isra.0+0x3c>)
 800322c:	62a3      	str	r3, [r4, #40]	; 0x28
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <std.isra.0+0x40>)
 8003230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <std.isra.0+0x44>)
 8003234:	6224      	str	r4, [r4, #32]
 8003236:	6323      	str	r3, [r4, #48]	; 0x30
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	08003559 	.word	0x08003559
 8003240:	0800357b 	.word	0x0800357b
 8003244:	080035b3 	.word	0x080035b3
 8003248:	080035d7 	.word	0x080035d7

0800324c <__sfmoreglue>:
__sfmoreglue():
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	2368      	movs	r3, #104	; 0x68
 8003250:	1e4d      	subs	r5, r1, #1
 8003252:	435d      	muls	r5, r3
 8003254:	460e      	mov	r6, r1
 8003256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800325a:	f000 f89f 	bl	800339c <_malloc_r>
 800325e:	4604      	mov	r4, r0
 8003260:	b140      	cbz	r0, 8003274 <__sfmoreglue+0x28>
 8003262:	2100      	movs	r1, #0
 8003264:	e880 0042 	stmia.w	r0, {r1, r6}
 8003268:	300c      	adds	r0, #12
 800326a:	60a0      	str	r0, [r4, #8]
 800326c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003270:	f000 f88c 	bl	800338c <memset>
 8003274:	4620      	mov	r0, r4
 8003276:	bd70      	pop	{r4, r5, r6, pc}

08003278 <__sinit>:
__sinit():
 8003278:	6983      	ldr	r3, [r0, #24]
 800327a:	b510      	push	{r4, lr}
 800327c:	4604      	mov	r4, r0
 800327e:	bb33      	cbnz	r3, 80032ce <__sinit+0x56>
 8003280:	6483      	str	r3, [r0, #72]	; 0x48
 8003282:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003284:	6503      	str	r3, [r0, #80]	; 0x50
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <__sinit+0x58>)
 8003288:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <__sinit+0x5c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6282      	str	r2, [r0, #40]	; 0x28
 800328e:	4298      	cmp	r0, r3
 8003290:	bf04      	itt	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	6183      	streq	r3, [r0, #24]
 8003296:	f000 f81f 	bl	80032d8 <__sfp>
 800329a:	6060      	str	r0, [r4, #4]
 800329c:	4620      	mov	r0, r4
 800329e:	f000 f81b 	bl	80032d8 <__sfp>
 80032a2:	60a0      	str	r0, [r4, #8]
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 f817 	bl	80032d8 <__sfp>
 80032aa:	2200      	movs	r2, #0
 80032ac:	60e0      	str	r0, [r4, #12]
 80032ae:	2104      	movs	r1, #4
 80032b0:	6860      	ldr	r0, [r4, #4]
 80032b2:	f7ff ffa7 	bl	8003204 <std.isra.0>
 80032b6:	2201      	movs	r2, #1
 80032b8:	2109      	movs	r1, #9
 80032ba:	68a0      	ldr	r0, [r4, #8]
 80032bc:	f7ff ffa2 	bl	8003204 <std.isra.0>
 80032c0:	2202      	movs	r2, #2
 80032c2:	2112      	movs	r1, #18
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	f7ff ff9d 	bl	8003204 <std.isra.0>
 80032ca:	2301      	movs	r3, #1
 80032cc:	61a3      	str	r3, [r4, #24]
 80032ce:	bd10      	pop	{r4, pc}
 80032d0:	0800483c 	.word	0x0800483c
 80032d4:	080031f9 	.word	0x080031f9

080032d8 <__sfp>:
__sfp():
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <__sfp+0x74>)
 80032dc:	681e      	ldr	r6, [r3, #0]
 80032de:	69b3      	ldr	r3, [r6, #24]
 80032e0:	4607      	mov	r7, r0
 80032e2:	b913      	cbnz	r3, 80032ea <__sfp+0x12>
 80032e4:	4630      	mov	r0, r6
 80032e6:	f7ff ffc7 	bl	8003278 <__sinit>
 80032ea:	3648      	adds	r6, #72	; 0x48
 80032ec:	68b4      	ldr	r4, [r6, #8]
 80032ee:	6873      	ldr	r3, [r6, #4]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	d404      	bmi.n	80032fe <__sfp+0x26>
 80032f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032f8:	b17d      	cbz	r5, 800331a <__sfp+0x42>
 80032fa:	3468      	adds	r4, #104	; 0x68
 80032fc:	e7f8      	b.n	80032f0 <__sfp+0x18>
 80032fe:	6833      	ldr	r3, [r6, #0]
 8003300:	b10b      	cbz	r3, 8003306 <__sfp+0x2e>
 8003302:	6836      	ldr	r6, [r6, #0]
 8003304:	e7f2      	b.n	80032ec <__sfp+0x14>
 8003306:	2104      	movs	r1, #4
 8003308:	4638      	mov	r0, r7
 800330a:	f7ff ff9f 	bl	800324c <__sfmoreglue>
 800330e:	6030      	str	r0, [r6, #0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d1f6      	bne.n	8003302 <__sfp+0x2a>
 8003314:	230c      	movs	r3, #12
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800331e:	81e3      	strh	r3, [r4, #14]
 8003320:	2301      	movs	r3, #1
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	6665      	str	r5, [r4, #100]	; 0x64
 8003326:	6025      	str	r5, [r4, #0]
 8003328:	60a5      	str	r5, [r4, #8]
 800332a:	6065      	str	r5, [r4, #4]
 800332c:	6125      	str	r5, [r4, #16]
 800332e:	6165      	str	r5, [r4, #20]
 8003330:	61a5      	str	r5, [r4, #24]
 8003332:	2208      	movs	r2, #8
 8003334:	4629      	mov	r1, r5
 8003336:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800333a:	f000 f827 	bl	800338c <memset>
 800333e:	6365      	str	r5, [r4, #52]	; 0x34
 8003340:	63a5      	str	r5, [r4, #56]	; 0x38
 8003342:	64a5      	str	r5, [r4, #72]	; 0x48
 8003344:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003346:	4620      	mov	r0, r4
 8003348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334a:	bf00      	nop
 800334c:	0800483c 	.word	0x0800483c

08003350 <_fwalk_reent>:
_fwalk_reent():
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4680      	mov	r8, r0
 8003356:	4689      	mov	r9, r1
 8003358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800335c:	2600      	movs	r6, #0
 800335e:	b194      	cbz	r4, 8003386 <_fwalk_reent+0x36>
 8003360:	68a5      	ldr	r5, [r4, #8]
 8003362:	6867      	ldr	r7, [r4, #4]
 8003364:	3f01      	subs	r7, #1
 8003366:	d40c      	bmi.n	8003382 <_fwalk_reent+0x32>
 8003368:	89ab      	ldrh	r3, [r5, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d907      	bls.n	800337e <_fwalk_reent+0x2e>
 800336e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003372:	3301      	adds	r3, #1
 8003374:	d003      	beq.n	800337e <_fwalk_reent+0x2e>
 8003376:	4629      	mov	r1, r5
 8003378:	4640      	mov	r0, r8
 800337a:	47c8      	blx	r9
 800337c:	4306      	orrs	r6, r0
 800337e:	3568      	adds	r5, #104	; 0x68
 8003380:	e7f0      	b.n	8003364 <_fwalk_reent+0x14>
 8003382:	6824      	ldr	r4, [r4, #0]
 8003384:	e7eb      	b.n	800335e <_fwalk_reent+0xe>
 8003386:	4630      	mov	r0, r6
 8003388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800338c <memset>:
memset():
 800338c:	4402      	add	r2, r0
 800338e:	4603      	mov	r3, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d002      	beq.n	800339a <memset+0xe>
 8003394:	f803 1b01 	strb.w	r1, [r3], #1
 8003398:	e7fa      	b.n	8003390 <memset+0x4>
 800339a:	4770      	bx	lr

0800339c <_malloc_r>:
_malloc_r():
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	1ccd      	adds	r5, r1, #3
 80033a0:	f025 0503 	bic.w	r5, r5, #3
 80033a4:	3508      	adds	r5, #8
 80033a6:	2d0c      	cmp	r5, #12
 80033a8:	bf38      	it	cc
 80033aa:	250c      	movcc	r5, #12
 80033ac:	2d00      	cmp	r5, #0
 80033ae:	4606      	mov	r6, r0
 80033b0:	da03      	bge.n	80033ba <_malloc_r+0x1e>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
 80033ba:	42a9      	cmp	r1, r5
 80033bc:	d8f9      	bhi.n	80033b2 <_malloc_r+0x16>
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <_malloc_r+0xa0>)
 80033c0:	681c      	ldr	r4, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4621      	mov	r1, r4
 80033c6:	b1a1      	cbz	r1, 80033f2 <_malloc_r+0x56>
 80033c8:	680b      	ldr	r3, [r1, #0]
 80033ca:	1b5b      	subs	r3, r3, r5
 80033cc:	d40e      	bmi.n	80033ec <_malloc_r+0x50>
 80033ce:	2b0b      	cmp	r3, #11
 80033d0:	d903      	bls.n	80033da <_malloc_r+0x3e>
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	18cc      	adds	r4, r1, r3
 80033d6:	50cd      	str	r5, [r1, r3]
 80033d8:	e01e      	b.n	8003418 <_malloc_r+0x7c>
 80033da:	428c      	cmp	r4, r1
 80033dc:	bf0d      	iteet	eq
 80033de:	6863      	ldreq	r3, [r4, #4]
 80033e0:	684b      	ldrne	r3, [r1, #4]
 80033e2:	6063      	strne	r3, [r4, #4]
 80033e4:	6013      	streq	r3, [r2, #0]
 80033e6:	bf18      	it	ne
 80033e8:	460c      	movne	r4, r1
 80033ea:	e015      	b.n	8003418 <_malloc_r+0x7c>
 80033ec:	460c      	mov	r4, r1
 80033ee:	6849      	ldr	r1, [r1, #4]
 80033f0:	e7e9      	b.n	80033c6 <_malloc_r+0x2a>
 80033f2:	4c13      	ldr	r4, [pc, #76]	; (8003440 <_malloc_r+0xa4>)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	b91b      	cbnz	r3, 8003400 <_malloc_r+0x64>
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 f89d 	bl	8003538 <_sbrk_r>
 80033fe:	6020      	str	r0, [r4, #0]
 8003400:	4629      	mov	r1, r5
 8003402:	4630      	mov	r0, r6
 8003404:	f000 f898 	bl	8003538 <_sbrk_r>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d0d2      	beq.n	80033b2 <_malloc_r+0x16>
 800340c:	1cc4      	adds	r4, r0, #3
 800340e:	f024 0403 	bic.w	r4, r4, #3
 8003412:	42a0      	cmp	r0, r4
 8003414:	d10a      	bne.n	800342c <_malloc_r+0x90>
 8003416:	6025      	str	r5, [r4, #0]
 8003418:	f104 000b 	add.w	r0, r4, #11
 800341c:	1d23      	adds	r3, r4, #4
 800341e:	f020 0007 	bic.w	r0, r0, #7
 8003422:	1ac3      	subs	r3, r0, r3
 8003424:	d009      	beq.n	800343a <_malloc_r+0x9e>
 8003426:	425a      	negs	r2, r3
 8003428:	50e2      	str	r2, [r4, r3]
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	1a21      	subs	r1, r4, r0
 800342e:	4630      	mov	r0, r6
 8003430:	f000 f882 	bl	8003538 <_sbrk_r>
 8003434:	3001      	adds	r0, #1
 8003436:	d1ee      	bne.n	8003416 <_malloc_r+0x7a>
 8003438:	e7bb      	b.n	80033b2 <_malloc_r+0x16>
 800343a:	bd70      	pop	{r4, r5, r6, pc}
 800343c:	200001c4 	.word	0x200001c4
 8003440:	200001c0 	.word	0x200001c0

08003444 <iprintf>:
iprintf():
 8003444:	b40f      	push	{r0, r1, r2, r3}
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <iprintf+0x2c>)
 8003448:	b513      	push	{r0, r1, r4, lr}
 800344a:	681c      	ldr	r4, [r3, #0]
 800344c:	b124      	cbz	r4, 8003458 <iprintf+0x14>
 800344e:	69a3      	ldr	r3, [r4, #24]
 8003450:	b913      	cbnz	r3, 8003458 <iprintf+0x14>
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ff10 	bl	8003278 <__sinit>
 8003458:	ab05      	add	r3, sp, #20
 800345a:	9a04      	ldr	r2, [sp, #16]
 800345c:	68a1      	ldr	r1, [r4, #8]
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	4620      	mov	r0, r4
 8003462:	f000 fb3f 	bl	8003ae4 <_vfiprintf_r>
 8003466:	b002      	add	sp, #8
 8003468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346c:	b004      	add	sp, #16
 800346e:	4770      	bx	lr
 8003470:	20000078 	.word	0x20000078

08003474 <_puts_r>:
_puts_r():
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	460e      	mov	r6, r1
 8003478:	4605      	mov	r5, r0
 800347a:	b118      	cbz	r0, 8003484 <_puts_r+0x10>
 800347c:	6983      	ldr	r3, [r0, #24]
 800347e:	b90b      	cbnz	r3, 8003484 <_puts_r+0x10>
 8003480:	f7ff fefa 	bl	8003278 <__sinit>
 8003484:	69ab      	ldr	r3, [r5, #24]
 8003486:	68ac      	ldr	r4, [r5, #8]
 8003488:	b913      	cbnz	r3, 8003490 <_puts_r+0x1c>
 800348a:	4628      	mov	r0, r5
 800348c:	f7ff fef4 	bl	8003278 <__sinit>
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <_puts_r+0xa8>)
 8003492:	429c      	cmp	r4, r3
 8003494:	d101      	bne.n	800349a <_puts_r+0x26>
 8003496:	686c      	ldr	r4, [r5, #4]
 8003498:	e008      	b.n	80034ac <_puts_r+0x38>
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <_puts_r+0xac>)
 800349c:	429c      	cmp	r4, r3
 800349e:	d101      	bne.n	80034a4 <_puts_r+0x30>
 80034a0:	68ac      	ldr	r4, [r5, #8]
 80034a2:	e003      	b.n	80034ac <_puts_r+0x38>
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <_puts_r+0xb0>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	bf08      	it	eq
 80034aa:	68ec      	ldreq	r4, [r5, #12]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	071b      	lsls	r3, r3, #28
 80034b0:	d501      	bpl.n	80034b6 <_puts_r+0x42>
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	b93b      	cbnz	r3, 80034c6 <_puts_r+0x52>
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f901 	bl	80036c0 <__swsetup_r>
 80034be:	b110      	cbz	r0, 80034c6 <_puts_r+0x52>
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	3e01      	subs	r6, #1
 80034c8:	68a3      	ldr	r3, [r4, #8]
 80034ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60a3      	str	r3, [r4, #8]
 80034d2:	b191      	cbz	r1, 80034fa <_puts_r+0x86>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da04      	bge.n	80034e2 <_puts_r+0x6e>
 80034d8:	69a2      	ldr	r2, [r4, #24]
 80034da:	4293      	cmp	r3, r2
 80034dc:	db06      	blt.n	80034ec <_puts_r+0x78>
 80034de:	290a      	cmp	r1, #10
 80034e0:	d004      	beq.n	80034ec <_puts_r+0x78>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	6022      	str	r2, [r4, #0]
 80034e8:	7019      	strb	r1, [r3, #0]
 80034ea:	e7ed      	b.n	80034c8 <_puts_r+0x54>
 80034ec:	4622      	mov	r2, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f880 	bl	80035f4 <__swbuf_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1e7      	bne.n	80034c8 <_puts_r+0x54>
 80034f8:	e7e2      	b.n	80034c0 <_puts_r+0x4c>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da08      	bge.n	8003510 <_puts_r+0x9c>
 80034fe:	4622      	mov	r2, r4
 8003500:	210a      	movs	r1, #10
 8003502:	4628      	mov	r0, r5
 8003504:	f000 f876 	bl	80035f4 <__swbuf_r>
 8003508:	3001      	adds	r0, #1
 800350a:	d0d9      	beq.n	80034c0 <_puts_r+0x4c>
 800350c:	200a      	movs	r0, #10
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	200a      	movs	r0, #10
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	6022      	str	r2, [r4, #0]
 8003518:	7018      	strb	r0, [r3, #0]
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	080047d8 	.word	0x080047d8
 8003520:	080047f8 	.word	0x080047f8
 8003524:	08004818 	.word	0x08004818

08003528 <puts>:
puts():
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <puts+0xc>)
 800352a:	4601      	mov	r1, r0
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	f7ff bfa1 	b.w	8003474 <_puts_r>
 8003532:	bf00      	nop
 8003534:	20000078 	.word	0x20000078

08003538 <_sbrk_r>:
_sbrk_r():
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4c06      	ldr	r4, [pc, #24]	; (8003554 <_sbrk_r+0x1c>)
 800353c:	2300      	movs	r3, #0
 800353e:	4605      	mov	r5, r0
 8003540:	4608      	mov	r0, r1
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	f7fd fca6 	bl	8000e94 <_sbrk>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_sbrk_r+0x1a>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	b103      	cbz	r3, 8003552 <_sbrk_r+0x1a>
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200001c8 	.word	0x200001c8

08003558 <__sread>:
__sread():
 8003558:	b510      	push	{r4, lr}
 800355a:	460c      	mov	r4, r1
 800355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003560:	f000 fd78 	bl	8004054 <_read_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	bfab      	itete	ge
 8003568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800356a:	89a3      	ldrhlt	r3, [r4, #12]
 800356c:	181b      	addge	r3, r3, r0
 800356e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003572:	bfac      	ite	ge
 8003574:	6563      	strge	r3, [r4, #84]	; 0x54
 8003576:	81a3      	strhlt	r3, [r4, #12]
 8003578:	bd10      	pop	{r4, pc}

0800357a <__swrite>:
__swrite():
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	461f      	mov	r7, r3
 8003580:	898b      	ldrh	r3, [r1, #12]
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	4605      	mov	r5, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4616      	mov	r6, r2
 800358a:	d505      	bpl.n	8003598 <__swrite+0x1e>
 800358c:	2302      	movs	r3, #2
 800358e:	2200      	movs	r2, #0
 8003590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003594:	f000 f9c4 	bl	8003920 <_lseek_r>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	4632      	mov	r2, r6
 80035a6:	463b      	mov	r3, r7
 80035a8:	4628      	mov	r0, r5
 80035aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	f000 b875 	b.w	800369c <_write_r>

080035b2 <__sseek>:
__sseek():
 80035b2:	b510      	push	{r4, lr}
 80035b4:	460c      	mov	r4, r1
 80035b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ba:	f000 f9b1 	bl	8003920 <_lseek_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	bf15      	itete	ne
 80035c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ce:	81a3      	strheq	r3, [r4, #12]
 80035d0:	bf18      	it	ne
 80035d2:	81a3      	strhne	r3, [r4, #12]
 80035d4:	bd10      	pop	{r4, pc}

080035d6 <__sclose>:
__sclose():
 80035d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035da:	f000 b8df 	b.w	800379c <_close_r>

080035de <strcmp>:
strcmp():
 80035de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e6:	2a01      	cmp	r2, #1
 80035e8:	bf28      	it	cs
 80035ea:	429a      	cmpcs	r2, r3
 80035ec:	d0f7      	beq.n	80035de <strcmp>
 80035ee:	1ad0      	subs	r0, r2, r3
 80035f0:	4770      	bx	lr
	...

080035f4 <__swbuf_r>:
__swbuf_r():
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	460f      	mov	r7, r1
 80035f8:	4614      	mov	r4, r2
 80035fa:	4606      	mov	r6, r0
 80035fc:	b118      	cbz	r0, 8003606 <__swbuf_r+0x12>
 80035fe:	6983      	ldr	r3, [r0, #24]
 8003600:	b90b      	cbnz	r3, 8003606 <__swbuf_r+0x12>
 8003602:	f7ff fe39 	bl	8003278 <__sinit>
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <__swbuf_r+0x9c>)
 8003608:	429c      	cmp	r4, r3
 800360a:	d101      	bne.n	8003610 <__swbuf_r+0x1c>
 800360c:	6874      	ldr	r4, [r6, #4]
 800360e:	e008      	b.n	8003622 <__swbuf_r+0x2e>
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <__swbuf_r+0xa0>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d101      	bne.n	800361a <__swbuf_r+0x26>
 8003616:	68b4      	ldr	r4, [r6, #8]
 8003618:	e003      	b.n	8003622 <__swbuf_r+0x2e>
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <__swbuf_r+0xa4>)
 800361c:	429c      	cmp	r4, r3
 800361e:	bf08      	it	eq
 8003620:	68f4      	ldreq	r4, [r6, #12]
 8003622:	69a3      	ldr	r3, [r4, #24]
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	071a      	lsls	r2, r3, #28
 800362a:	d509      	bpl.n	8003640 <__swbuf_r+0x4c>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b13b      	cbz	r3, 8003640 <__swbuf_r+0x4c>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	6920      	ldr	r0, [r4, #16]
 8003634:	1a18      	subs	r0, r3, r0
 8003636:	6963      	ldr	r3, [r4, #20]
 8003638:	4298      	cmp	r0, r3
 800363a:	b2fd      	uxtb	r5, r7
 800363c:	db0f      	blt.n	800365e <__swbuf_r+0x6a>
 800363e:	e008      	b.n	8003652 <__swbuf_r+0x5e>
 8003640:	4621      	mov	r1, r4
 8003642:	4630      	mov	r0, r6
 8003644:	f000 f83c 	bl	80036c0 <__swsetup_r>
 8003648:	2800      	cmp	r0, #0
 800364a:	d0f1      	beq.n	8003630 <__swbuf_r+0x3c>
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003652:	4621      	mov	r1, r4
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f939 	bl	80038cc <_fflush_r>
 800365a:	2800      	cmp	r0, #0
 800365c:	d1f6      	bne.n	800364c <__swbuf_r+0x58>
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60a3      	str	r3, [r4, #8]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	701f      	strb	r7, [r3, #0]
 800366c:	6962      	ldr	r2, [r4, #20]
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <__swbuf_r+0x8a>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	07db      	lsls	r3, r3, #31
 8003678:	d507      	bpl.n	800368a <__swbuf_r+0x96>
 800367a:	2d0a      	cmp	r5, #10
 800367c:	d105      	bne.n	800368a <__swbuf_r+0x96>
 800367e:	4621      	mov	r1, r4
 8003680:	4630      	mov	r0, r6
 8003682:	f000 f923 	bl	80038cc <_fflush_r>
 8003686:	2800      	cmp	r0, #0
 8003688:	d1e0      	bne.n	800364c <__swbuf_r+0x58>
 800368a:	4628      	mov	r0, r5
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368e:	bf00      	nop
 8003690:	080047d8 	.word	0x080047d8
 8003694:	080047f8 	.word	0x080047f8
 8003698:	08004818 	.word	0x08004818

0800369c <_write_r>:
_write_r():
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4c07      	ldr	r4, [pc, #28]	; (80036bc <_write_r+0x20>)
 80036a0:	4605      	mov	r5, r0
 80036a2:	4608      	mov	r0, r1
 80036a4:	4611      	mov	r1, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	6022      	str	r2, [r4, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7fd fda8 	bl	8001200 <_write>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_write_r+0x1e>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_write_r+0x1e>
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	200001c8 	.word	0x200001c8

080036c0 <__swsetup_r>:
__swsetup_r():
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <__swsetup_r+0xcc>)
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	4606      	mov	r6, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	b125      	cbz	r5, 80036d6 <__swsetup_r+0x16>
 80036cc:	69ab      	ldr	r3, [r5, #24]
 80036ce:	b913      	cbnz	r3, 80036d6 <__swsetup_r+0x16>
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff fdd1 	bl	8003278 <__sinit>
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <__swsetup_r+0xd0>)
 80036d8:	429c      	cmp	r4, r3
 80036da:	d101      	bne.n	80036e0 <__swsetup_r+0x20>
 80036dc:	686c      	ldr	r4, [r5, #4]
 80036de:	e008      	b.n	80036f2 <__swsetup_r+0x32>
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <__swsetup_r+0xd4>)
 80036e2:	429c      	cmp	r4, r3
 80036e4:	d101      	bne.n	80036ea <__swsetup_r+0x2a>
 80036e6:	68ac      	ldr	r4, [r5, #8]
 80036e8:	e003      	b.n	80036f2 <__swsetup_r+0x32>
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <__swsetup_r+0xd8>)
 80036ec:	429c      	cmp	r4, r3
 80036ee:	bf08      	it	eq
 80036f0:	68ec      	ldreq	r4, [r5, #12]
 80036f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	0715      	lsls	r5, r2, #28
 80036fa:	d41d      	bmi.n	8003738 <__swsetup_r+0x78>
 80036fc:	06d0      	lsls	r0, r2, #27
 80036fe:	d402      	bmi.n	8003706 <__swsetup_r+0x46>
 8003700:	2209      	movs	r2, #9
 8003702:	6032      	str	r2, [r6, #0]
 8003704:	e03a      	b.n	800377c <__swsetup_r+0xbc>
 8003706:	0751      	lsls	r1, r2, #29
 8003708:	d512      	bpl.n	8003730 <__swsetup_r+0x70>
 800370a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370c:	b141      	cbz	r1, 8003720 <__swsetup_r+0x60>
 800370e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003712:	4299      	cmp	r1, r3
 8003714:	d002      	beq.n	800371c <__swsetup_r+0x5c>
 8003716:	4630      	mov	r0, r6
 8003718:	f000 f974 	bl	8003a04 <_free_r>
 800371c:	2300      	movs	r3, #0
 800371e:	6363      	str	r3, [r4, #52]	; 0x34
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	2300      	movs	r3, #0
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f043 0308 	orr.w	r3, r3, #8
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	b94b      	cbnz	r3, 8003750 <__swsetup_r+0x90>
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003746:	d003      	beq.n	8003750 <__swsetup_r+0x90>
 8003748:	4621      	mov	r1, r4
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f91e 	bl	800398c <__smakebuf_r>
 8003750:	89a2      	ldrh	r2, [r4, #12]
 8003752:	f012 0301 	ands.w	r3, r2, #1
 8003756:	d005      	beq.n	8003764 <__swsetup_r+0xa4>
 8003758:	2300      	movs	r3, #0
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	6963      	ldr	r3, [r4, #20]
 800375e:	425b      	negs	r3, r3
 8003760:	61a3      	str	r3, [r4, #24]
 8003762:	e003      	b.n	800376c <__swsetup_r+0xac>
 8003764:	0792      	lsls	r2, r2, #30
 8003766:	bf58      	it	pl
 8003768:	6963      	ldrpl	r3, [r4, #20]
 800376a:	60a3      	str	r3, [r4, #8]
 800376c:	6923      	ldr	r3, [r4, #16]
 800376e:	b95b      	cbnz	r3, 8003788 <__swsetup_r+0xc8>
 8003770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003774:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8003778:	b280      	uxth	r0, r0
 800377a:	b130      	cbz	r0, 800378a <__swsetup_r+0xca>
 800377c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	2000      	movs	r0, #0
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	20000078 	.word	0x20000078
 8003790:	080047d8 	.word	0x080047d8
 8003794:	080047f8 	.word	0x080047f8
 8003798:	08004818 	.word	0x08004818

0800379c <_close_r>:
_close_r():
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4c06      	ldr	r4, [pc, #24]	; (80037b8 <_close_r+0x1c>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	4605      	mov	r5, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	f7fd fd8a 	bl	80012c0 <_close>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_close_r+0x1a>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_close_r+0x1a>
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	200001c8 	.word	0x200001c8

080037bc <__sflush_r>:
__sflush_r():
 80037bc:	898a      	ldrh	r2, [r1, #12]
 80037be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c2:	4605      	mov	r5, r0
 80037c4:	0710      	lsls	r0, r2, #28
 80037c6:	460c      	mov	r4, r1
 80037c8:	d459      	bmi.n	800387e <__sflush_r+0xc2>
 80037ca:	684b      	ldr	r3, [r1, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dc02      	bgt.n	80037d6 <__sflush_r+0x1a>
 80037d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	dd17      	ble.n	8003806 <__sflush_r+0x4a>
 80037d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037d8:	b1ae      	cbz	r6, 8003806 <__sflush_r+0x4a>
 80037da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037de:	2300      	movs	r3, #0
 80037e0:	b292      	uxth	r2, r2
 80037e2:	682f      	ldr	r7, [r5, #0]
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	b10a      	cbz	r2, 80037ec <__sflush_r+0x30>
 80037e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037ea:	e015      	b.n	8003818 <__sflush_r+0x5c>
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	2301      	movs	r3, #1
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b0      	blx	r6
 80037f4:	1c41      	adds	r1, r0, #1
 80037f6:	d10f      	bne.n	8003818 <__sflush_r+0x5c>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b16b      	cbz	r3, 8003818 <__sflush_r+0x5c>
 80037fc:	2b1d      	cmp	r3, #29
 80037fe:	d001      	beq.n	8003804 <__sflush_r+0x48>
 8003800:	2b16      	cmp	r3, #22
 8003802:	d103      	bne.n	800380c <__sflush_r+0x50>
 8003804:	602f      	str	r7, [r5, #0]
 8003806:	2000      	movs	r0, #0
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	075a      	lsls	r2, r3, #29
 800381c:	d505      	bpl.n	800382a <__sflush_r+0x6e>
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	1ac0      	subs	r0, r0, r3
 8003822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003824:	b10b      	cbz	r3, 800382a <__sflush_r+0x6e>
 8003826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003828:	1ac0      	subs	r0, r0, r3
 800382a:	2300      	movs	r3, #0
 800382c:	4602      	mov	r2, r0
 800382e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003830:	6a21      	ldr	r1, [r4, #32]
 8003832:	4628      	mov	r0, r5
 8003834:	47b0      	blx	r6
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	d106      	bne.n	800384a <__sflush_r+0x8e>
 800383c:	6829      	ldr	r1, [r5, #0]
 800383e:	291d      	cmp	r1, #29
 8003840:	d83a      	bhi.n	80038b8 <__sflush_r+0xfc>
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <__sflush_r+0x10c>)
 8003844:	40ca      	lsrs	r2, r1
 8003846:	07d6      	lsls	r6, r2, #31
 8003848:	d536      	bpl.n	80038b8 <__sflush_r+0xfc>
 800384a:	2200      	movs	r2, #0
 800384c:	6062      	str	r2, [r4, #4]
 800384e:	04d9      	lsls	r1, r3, #19
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	d504      	bpl.n	8003860 <__sflush_r+0xa4>
 8003856:	1c42      	adds	r2, r0, #1
 8003858:	d101      	bne.n	800385e <__sflush_r+0xa2>
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	b903      	cbnz	r3, 8003860 <__sflush_r+0xa4>
 800385e:	6560      	str	r0, [r4, #84]	; 0x54
 8003860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003862:	602f      	str	r7, [r5, #0]
 8003864:	2900      	cmp	r1, #0
 8003866:	d0ce      	beq.n	8003806 <__sflush_r+0x4a>
 8003868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800386c:	4299      	cmp	r1, r3
 800386e:	d002      	beq.n	8003876 <__sflush_r+0xba>
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f8c7 	bl	8003a04 <_free_r>
 8003876:	2000      	movs	r0, #0
 8003878:	6360      	str	r0, [r4, #52]	; 0x34
 800387a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800387e:	690f      	ldr	r7, [r1, #16]
 8003880:	2f00      	cmp	r7, #0
 8003882:	d0c0      	beq.n	8003806 <__sflush_r+0x4a>
 8003884:	0793      	lsls	r3, r2, #30
 8003886:	680e      	ldr	r6, [r1, #0]
 8003888:	bf08      	it	eq
 800388a:	694b      	ldreq	r3, [r1, #20]
 800388c:	600f      	str	r7, [r1, #0]
 800388e:	bf18      	it	ne
 8003890:	2300      	movne	r3, #0
 8003892:	ebc7 0806 	rsb	r8, r7, r6
 8003896:	608b      	str	r3, [r1, #8]
 8003898:	e002      	b.n	80038a0 <__sflush_r+0xe4>
 800389a:	4407      	add	r7, r0
 800389c:	ebc0 0808 	rsb	r8, r0, r8
 80038a0:	f1b8 0f00 	cmp.w	r8, #0
 80038a4:	ddaf      	ble.n	8003806 <__sflush_r+0x4a>
 80038a6:	4643      	mov	r3, r8
 80038a8:	463a      	mov	r2, r7
 80038aa:	6a21      	ldr	r1, [r4, #32]
 80038ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b0      	blx	r6
 80038b2:	2800      	cmp	r0, #0
 80038b4:	dcf1      	bgt.n	800389a <__sflush_r+0xde>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038bc:	81a3      	strh	r3, [r4, #12]
 80038be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c6:	bf00      	nop
 80038c8:	20400001 	.word	0x20400001

080038cc <_fflush_r>:
_fflush_r():
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	690b      	ldr	r3, [r1, #16]
 80038d0:	4605      	mov	r5, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	b1db      	cbz	r3, 800390e <_fflush_r+0x42>
 80038d6:	b118      	cbz	r0, 80038e0 <_fflush_r+0x14>
 80038d8:	6983      	ldr	r3, [r0, #24]
 80038da:	b90b      	cbnz	r3, 80038e0 <_fflush_r+0x14>
 80038dc:	f7ff fccc 	bl	8003278 <__sinit>
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <_fflush_r+0x48>)
 80038e2:	429c      	cmp	r4, r3
 80038e4:	d101      	bne.n	80038ea <_fflush_r+0x1e>
 80038e6:	686c      	ldr	r4, [r5, #4]
 80038e8:	e008      	b.n	80038fc <_fflush_r+0x30>
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <_fflush_r+0x4c>)
 80038ec:	429c      	cmp	r4, r3
 80038ee:	d101      	bne.n	80038f4 <_fflush_r+0x28>
 80038f0:	68ac      	ldr	r4, [r5, #8]
 80038f2:	e003      	b.n	80038fc <_fflush_r+0x30>
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <_fflush_r+0x50>)
 80038f6:	429c      	cmp	r4, r3
 80038f8:	bf08      	it	eq
 80038fa:	68ec      	ldreq	r4, [r5, #12]
 80038fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003900:	b12b      	cbz	r3, 800390e <_fflush_r+0x42>
 8003902:	4621      	mov	r1, r4
 8003904:	4628      	mov	r0, r5
 8003906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800390a:	f7ff bf57 	b.w	80037bc <__sflush_r>
 800390e:	2000      	movs	r0, #0
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	bf00      	nop
 8003914:	080047d8 	.word	0x080047d8
 8003918:	080047f8 	.word	0x080047f8
 800391c:	08004818 	.word	0x08004818

08003920 <_lseek_r>:
_lseek_r():
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4c07      	ldr	r4, [pc, #28]	; (8003940 <_lseek_r+0x20>)
 8003924:	4605      	mov	r5, r0
 8003926:	4608      	mov	r0, r1
 8003928:	4611      	mov	r1, r2
 800392a:	2200      	movs	r2, #0
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f7fd fbec 	bl	800110c <_lseek>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_lseek_r+0x1e>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	b103      	cbz	r3, 800393e <_lseek_r+0x1e>
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	200001c8 	.word	0x200001c8

08003944 <__swhatbuf_r>:
__swhatbuf_r():
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	460e      	mov	r6, r1
 8003948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394c:	2900      	cmp	r1, #0
 800394e:	b090      	sub	sp, #64	; 0x40
 8003950:	4614      	mov	r4, r2
 8003952:	461d      	mov	r5, r3
 8003954:	da06      	bge.n	8003964 <__swhatbuf_r+0x20>
 8003956:	2300      	movs	r3, #0
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	89b3      	ldrh	r3, [r6, #12]
 800395c:	061a      	lsls	r2, r3, #24
 800395e:	d50e      	bpl.n	800397e <__swhatbuf_r+0x3a>
 8003960:	2340      	movs	r3, #64	; 0x40
 8003962:	e00e      	b.n	8003982 <__swhatbuf_r+0x3e>
 8003964:	aa01      	add	r2, sp, #4
 8003966:	f000 fb87 	bl	8004078 <_fstat_r>
 800396a:	2800      	cmp	r0, #0
 800396c:	dbf3      	blt.n	8003956 <__swhatbuf_r+0x12>
 800396e:	9a02      	ldr	r2, [sp, #8]
 8003970:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003974:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003978:	425a      	negs	r2, r3
 800397a:	415a      	adcs	r2, r3
 800397c:	602a      	str	r2, [r5, #0]
 800397e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003982:	2000      	movs	r0, #0
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	b010      	add	sp, #64	; 0x40
 8003988:	bd70      	pop	{r4, r5, r6, pc}
	...

0800398c <__smakebuf_r>:
__smakebuf_r():
 800398c:	898b      	ldrh	r3, [r1, #12]
 800398e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003990:	079e      	lsls	r6, r3, #30
 8003992:	4605      	mov	r5, r0
 8003994:	460c      	mov	r4, r1
 8003996:	d410      	bmi.n	80039ba <__smakebuf_r+0x2e>
 8003998:	ab01      	add	r3, sp, #4
 800399a:	466a      	mov	r2, sp
 800399c:	f7ff ffd2 	bl	8003944 <__swhatbuf_r>
 80039a0:	9900      	ldr	r1, [sp, #0]
 80039a2:	4606      	mov	r6, r0
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff fcf9 	bl	800339c <_malloc_r>
 80039aa:	b968      	cbnz	r0, 80039c8 <__smakebuf_r+0x3c>
 80039ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039b0:	059a      	lsls	r2, r3, #22
 80039b2:	d422      	bmi.n	80039fa <__smakebuf_r+0x6e>
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	6123      	str	r3, [r4, #16]
 80039c2:	2301      	movs	r3, #1
 80039c4:	6163      	str	r3, [r4, #20]
 80039c6:	e018      	b.n	80039fa <__smakebuf_r+0x6e>
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <__smakebuf_r+0x74>)
 80039ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	9b00      	ldr	r3, [sp, #0]
 80039d8:	6163      	str	r3, [r4, #20]
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	6120      	str	r0, [r4, #16]
 80039de:	b14b      	cbz	r3, 80039f4 <__smakebuf_r+0x68>
 80039e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fb59 	bl	800409c <_isatty_r>
 80039ea:	b118      	cbz	r0, 80039f4 <__smakebuf_r+0x68>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	89a0      	ldrh	r0, [r4, #12]
 80039f6:	4330      	orrs	r0, r6
 80039f8:	81a0      	strh	r0, [r4, #12]
 80039fa:	b002      	add	sp, #8
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
 80039fe:	bf00      	nop
 8003a00:	080031f9 	.word	0x080031f9

08003a04 <_free_r>:
_free_r():
 8003a04:	b530      	push	{r4, r5, lr}
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d03e      	beq.n	8003a88 <_free_r+0x84>
 8003a0a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8003a0e:	1f0b      	subs	r3, r1, #4
 8003a10:	491e      	ldr	r1, [pc, #120]	; (8003a8c <_free_r+0x88>)
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	bfb8      	it	lt
 8003a16:	189b      	addlt	r3, r3, r2
 8003a18:	680a      	ldr	r2, [r1, #0]
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	b912      	cbnz	r2, 8003a24 <_free_r+0x20>
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	600b      	str	r3, [r1, #0]
 8003a22:	bd30      	pop	{r4, r5, pc}
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d90e      	bls.n	8003a46 <_free_r+0x42>
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	1858      	adds	r0, r3, r1
 8003a2c:	4282      	cmp	r2, r0
 8003a2e:	bf04      	itt	eq
 8003a30:	6810      	ldreq	r0, [r2, #0]
 8003a32:	6852      	ldreq	r2, [r2, #4]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	bf04      	itt	eq
 8003a38:	1809      	addeq	r1, r1, r0
 8003a3a:	6019      	streq	r1, [r3, #0]
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd30      	pop	{r4, r5, pc}
 8003a40:	4299      	cmp	r1, r3
 8003a42:	d803      	bhi.n	8003a4c <_free_r+0x48>
 8003a44:	460a      	mov	r2, r1
 8003a46:	6851      	ldr	r1, [r2, #4]
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d1f9      	bne.n	8003a40 <_free_r+0x3c>
 8003a4c:	6814      	ldr	r4, [r2, #0]
 8003a4e:	1915      	adds	r5, r2, r4
 8003a50:	429d      	cmp	r5, r3
 8003a52:	d10a      	bne.n	8003a6a <_free_r+0x66>
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4423      	add	r3, r4
 8003a58:	18d0      	adds	r0, r2, r3
 8003a5a:	4281      	cmp	r1, r0
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	d113      	bne.n	8003a88 <_free_r+0x84>
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	4403      	add	r3, r0
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	684b      	ldr	r3, [r1, #4]
 8003a68:	e00d      	b.n	8003a86 <_free_r+0x82>
 8003a6a:	d902      	bls.n	8003a72 <_free_r+0x6e>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	6003      	str	r3, [r0, #0]
 8003a70:	bd30      	pop	{r4, r5, pc}
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	181c      	adds	r4, r3, r0
 8003a76:	42a1      	cmp	r1, r4
 8003a78:	bf04      	itt	eq
 8003a7a:	680c      	ldreq	r4, [r1, #0]
 8003a7c:	6849      	ldreq	r1, [r1, #4]
 8003a7e:	6059      	str	r1, [r3, #4]
 8003a80:	bf04      	itt	eq
 8003a82:	1900      	addeq	r0, r0, r4
 8003a84:	6018      	streq	r0, [r3, #0]
 8003a86:	6053      	str	r3, [r2, #4]
 8003a88:	bd30      	pop	{r4, r5, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200001c4 	.word	0x200001c4

08003a90 <__sfputc_r>:
__sfputc_r():
 8003a90:	6893      	ldr	r3, [r2, #8]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	b410      	push	{r4}
 8003a98:	6093      	str	r3, [r2, #8]
 8003a9a:	da09      	bge.n	8003ab0 <__sfputc_r+0x20>
 8003a9c:	6994      	ldr	r4, [r2, #24]
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	db02      	blt.n	8003aa8 <__sfputc_r+0x18>
 8003aa2:	b2cb      	uxtb	r3, r1
 8003aa4:	2b0a      	cmp	r3, #10
 8003aa6:	d103      	bne.n	8003ab0 <__sfputc_r+0x20>
 8003aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aac:	f7ff bda2 	b.w	80035f4 <__swbuf_r>
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	1c58      	adds	r0, r3, #1
 8003ab4:	6010      	str	r0, [r2, #0]
 8003ab6:	7019      	strb	r1, [r3, #0]
 8003ab8:	b2c8      	uxtb	r0, r1
 8003aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <__sfputs_r>:
__sfputs_r():
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	460f      	mov	r7, r1
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	18d5      	adds	r5, r2, r3
 8003aca:	42ac      	cmp	r4, r5
 8003acc:	d008      	beq.n	8003ae0 <__sfputs_r+0x20>
 8003ace:	463a      	mov	r2, r7
 8003ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f7ff ffdb 	bl	8003a90 <__sfputc_r>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	d1f5      	bne.n	8003aca <__sfputs_r+0xa>
 8003ade:	e000      	b.n	8003ae2 <__sfputs_r+0x22>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ae4 <_vfiprintf_r>:
_vfprintf_r():
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	b09d      	sub	sp, #116	; 0x74
 8003aea:	460c      	mov	r4, r1
 8003aec:	4617      	mov	r7, r2
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	4606      	mov	r6, r0
 8003af2:	b118      	cbz	r0, 8003afc <_vfiprintf_r+0x18>
 8003af4:	6983      	ldr	r3, [r0, #24]
 8003af6:	b90b      	cbnz	r3, 8003afc <_vfiprintf_r+0x18>
 8003af8:	f7ff fbbe 	bl	8003278 <__sinit>
 8003afc:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <_vfiprintf_r+0x218>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d101      	bne.n	8003b06 <_vfiprintf_r+0x22>
 8003b02:	6874      	ldr	r4, [r6, #4]
 8003b04:	e008      	b.n	8003b18 <_vfiprintf_r+0x34>
 8003b06:	4b7e      	ldr	r3, [pc, #504]	; (8003d00 <_vfiprintf_r+0x21c>)
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	d101      	bne.n	8003b10 <_vfiprintf_r+0x2c>
 8003b0c:	68b4      	ldr	r4, [r6, #8]
 8003b0e:	e003      	b.n	8003b18 <_vfiprintf_r+0x34>
 8003b10:	4b7c      	ldr	r3, [pc, #496]	; (8003d04 <_vfiprintf_r+0x220>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	bf08      	it	eq
 8003b16:	68f4      	ldreq	r4, [r6, #12]
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	0718      	lsls	r0, r3, #28
 8003b1c:	d50c      	bpl.n	8003b38 <_vfiprintf_r+0x54>
 8003b1e:	6923      	ldr	r3, [r4, #16]
 8003b20:	b153      	cbz	r3, 8003b38 <_vfiprintf_r+0x54>
 8003b22:	2300      	movs	r3, #0
 8003b24:	9309      	str	r3, [sp, #36]	; 0x24
 8003b26:	2320      	movs	r3, #32
 8003b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b2c:	2330      	movs	r3, #48	; 0x30
 8003b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b32:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8003d08 <_vfiprintf_r+0x224>
 8003b36:	e044      	b.n	8003bc2 <_vfiprintf_r+0xde>
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff fdc0 	bl	80036c0 <__swsetup_r>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d0ee      	beq.n	8003b22 <_vfiprintf_r+0x3e>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b48:	e0d5      	b.n	8003cf6 <_vfiprintf_r+0x212>
 8003b4a:	9a03      	ldr	r2, [sp, #12]
 8003b4c:	1d11      	adds	r1, r2, #4
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2a00      	cmp	r2, #0
 8003b54:	f280 808c 	bge.w	8003c70 <_vfiprintf_r+0x18c>
 8003b58:	4252      	negs	r2, r2
 8003b5a:	f043 0002 	orr.w	r0, r3, #2
 8003b5e:	9207      	str	r2, [sp, #28]
 8003b60:	9004      	str	r0, [sp, #16]
 8003b62:	f898 3000 	ldrb.w	r3, [r8]
 8003b66:	2b2e      	cmp	r3, #46	; 0x2e
 8003b68:	f000 8084 	beq.w	8003c74 <_vfiprintf_r+0x190>
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	f898 1000 	ldrb.w	r1, [r8]
 8003b72:	4865      	ldr	r0, [pc, #404]	; (8003d08 <_vfiprintf_r+0x224>)
 8003b74:	f000 faa4 	bl	80040c0 <memchr>
 8003b78:	b148      	cbz	r0, 8003b8e <_vfiprintf_r+0xaa>
 8003b7a:	2340      	movs	r3, #64	; 0x40
 8003b7c:	ebcb 0000 	rsb	r0, fp, r0
 8003b80:	fa03 f000 	lsl.w	r0, r3, r0
 8003b84:	9b04      	ldr	r3, [sp, #16]
 8003b86:	4318      	orrs	r0, r3
 8003b88:	9004      	str	r0, [sp, #16]
 8003b8a:	f108 0801 	add.w	r8, r8, #1
 8003b8e:	f898 1000 	ldrb.w	r1, [r8]
 8003b92:	485e      	ldr	r0, [pc, #376]	; (8003d0c <_vfiprintf_r+0x228>)
 8003b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b98:	2206      	movs	r2, #6
 8003b9a:	f108 0701 	add.w	r7, r8, #1
 8003b9e:	f000 fa8f 	bl	80040c0 <memchr>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f000 8095 	beq.w	8003cd2 <_vfiprintf_r+0x1ee>
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <_vfiprintf_r+0x22c>)
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8088 	bne.w	8003cc0 <_vfiprintf_r+0x1dc>
 8003bb0:	9b03      	ldr	r3, [sp, #12]
 8003bb2:	3307      	adds	r3, #7
 8003bb4:	f023 0307 	bic.w	r3, r3, #7
 8003bb8:	3308      	adds	r3, #8
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bbe:	4453      	add	r3, sl
 8003bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc2:	46b8      	mov	r8, r7
 8003bc4:	4645      	mov	r5, r8
 8003bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bca:	b91b      	cbnz	r3, 8003bd4 <_vfiprintf_r+0xf0>
 8003bcc:	ebb8 0907 	subs.w	r9, r8, r7
 8003bd0:	d00f      	beq.n	8003bf2 <_vfiprintf_r+0x10e>
 8003bd2:	e003      	b.n	8003bdc <_vfiprintf_r+0xf8>
 8003bd4:	2b25      	cmp	r3, #37	; 0x25
 8003bd6:	d0f9      	beq.n	8003bcc <_vfiprintf_r+0xe8>
 8003bd8:	46a8      	mov	r8, r5
 8003bda:	e7f3      	b.n	8003bc4 <_vfiprintf_r+0xe0>
 8003bdc:	464b      	mov	r3, r9
 8003bde:	463a      	mov	r2, r7
 8003be0:	4621      	mov	r1, r4
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ff6c 	bl	8003ac0 <__sfputs_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d07f      	beq.n	8003cec <_vfiprintf_r+0x208>
 8003bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bee:	444b      	add	r3, r9
 8003bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf2:	f898 3000 	ldrb.w	r3, [r8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d078      	beq.n	8003cec <_vfiprintf_r+0x208>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	9307      	str	r3, [sp, #28]
 8003c04:	9205      	str	r2, [sp, #20]
 8003c06:	9306      	str	r3, [sp, #24]
 8003c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0e:	2701      	movs	r7, #1
 8003c10:	2205      	movs	r2, #5
 8003c12:	7829      	ldrb	r1, [r5, #0]
 8003c14:	483f      	ldr	r0, [pc, #252]	; (8003d14 <_vfiprintf_r+0x230>)
 8003c16:	f000 fa53 	bl	80040c0 <memchr>
 8003c1a:	f105 0801 	add.w	r8, r5, #1
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	b138      	cbz	r0, 8003c32 <_vfiprintf_r+0x14e>
 8003c22:	4a3c      	ldr	r2, [pc, #240]	; (8003d14 <_vfiprintf_r+0x230>)
 8003c24:	1a80      	subs	r0, r0, r2
 8003c26:	fa07 f000 	lsl.w	r0, r7, r0
 8003c2a:	4318      	orrs	r0, r3
 8003c2c:	9004      	str	r0, [sp, #16]
 8003c2e:	4645      	mov	r5, r8
 8003c30:	e7ee      	b.n	8003c10 <_vfiprintf_r+0x12c>
 8003c32:	06d9      	lsls	r1, r3, #27
 8003c34:	bf44      	itt	mi
 8003c36:	2220      	movmi	r2, #32
 8003c38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c3c:	071a      	lsls	r2, r3, #28
 8003c3e:	bf44      	itt	mi
 8003c40:	222b      	movmi	r2, #43	; 0x2b
 8003c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c46:	782a      	ldrb	r2, [r5, #0]
 8003c48:	2a2a      	cmp	r2, #42	; 0x2a
 8003c4a:	f43f af7e 	beq.w	8003b4a <_vfiprintf_r+0x66>
 8003c4e:	9a07      	ldr	r2, [sp, #28]
 8003c50:	2100      	movs	r1, #0
 8003c52:	200a      	movs	r0, #10
 8003c54:	46a8      	mov	r8, r5
 8003c56:	3501      	adds	r5, #1
 8003c58:	f898 3000 	ldrb.w	r3, [r8]
 8003c5c:	3b30      	subs	r3, #48	; 0x30
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	d803      	bhi.n	8003c6a <_vfiprintf_r+0x186>
 8003c62:	fb00 3202 	mla	r2, r0, r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	e7f4      	b.n	8003c54 <_vfiprintf_r+0x170>
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	f43f af79 	beq.w	8003b62 <_vfiprintf_r+0x7e>
 8003c70:	9207      	str	r2, [sp, #28]
 8003c72:	e776      	b.n	8003b62 <_vfiprintf_r+0x7e>
 8003c74:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c78:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7a:	d10b      	bne.n	8003c94 <_vfiprintf_r+0x1b0>
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	1d1a      	adds	r2, r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	9203      	str	r2, [sp, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bfb8      	it	lt
 8003c88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c8c:	f108 0802 	add.w	r8, r8, #2
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	e76b      	b.n	8003b6c <_vfiprintf_r+0x88>
 8003c94:	2300      	movs	r3, #0
 8003c96:	9305      	str	r3, [sp, #20]
 8003c98:	f108 0001 	add.w	r0, r8, #1
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	250a      	movs	r5, #10
 8003ca0:	4680      	mov	r8, r0
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f898 2000 	ldrb.w	r2, [r8]
 8003ca8:	3a30      	subs	r2, #48	; 0x30
 8003caa:	2a09      	cmp	r2, #9
 8003cac:	d803      	bhi.n	8003cb6 <_vfiprintf_r+0x1d2>
 8003cae:	fb05 2101 	mla	r1, r5, r1, r2
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e7f4      	b.n	8003ca0 <_vfiprintf_r+0x1bc>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f43f af58 	beq.w	8003b6c <_vfiprintf_r+0x88>
 8003cbc:	9105      	str	r1, [sp, #20]
 8003cbe:	e755      	b.n	8003b6c <_vfiprintf_r+0x88>
 8003cc0:	ab03      	add	r3, sp, #12
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <_vfiprintf_r+0x234>)
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	e007      	b.n	8003ce2 <_vfiprintf_r+0x1fe>
 8003cd2:	ab03      	add	r3, sp, #12
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <_vfiprintf_r+0x234>)
 8003cda:	a904      	add	r1, sp, #16
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f893 	bl	8003e08 <_printf_i>
 8003ce2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ce6:	4682      	mov	sl, r0
 8003ce8:	f47f af68 	bne.w	8003bbc <_vfiprintf_r+0xd8>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	065b      	lsls	r3, r3, #25
 8003cf0:	f53f af28 	bmi.w	8003b44 <_vfiprintf_r+0x60>
 8003cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cf6:	b01d      	add	sp, #116	; 0x74
 8003cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfc:	080047d8 	.word	0x080047d8
 8003d00:	080047f8 	.word	0x080047f8
 8003d04:	08004818 	.word	0x08004818
 8003d08:	08004846 	.word	0x08004846
 8003d0c:	0800484a 	.word	0x0800484a
 8003d10:	00000000 	.word	0x00000000
 8003d14:	08004840 	.word	0x08004840
 8003d18:	08003ac1 	.word	0x08003ac1

08003d1c <_printf_common>:
_printf_common():
 8003d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	4691      	mov	r9, r2
 8003d22:	461f      	mov	r7, r3
 8003d24:	690a      	ldr	r2, [r1, #16]
 8003d26:	688b      	ldr	r3, [r1, #8]
 8003d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	bfb8      	it	lt
 8003d30:	4613      	movlt	r3, r2
 8003d32:	f8c9 3000 	str.w	r3, [r9]
 8003d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	b112      	cbz	r2, 8003d46 <_printf_common+0x2a>
 8003d40:	3301      	adds	r3, #1
 8003d42:	f8c9 3000 	str.w	r3, [r9]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	0699      	lsls	r1, r3, #26
 8003d4a:	bf42      	ittt	mi
 8003d4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d50:	3302      	addmi	r3, #2
 8003d52:	f8c9 3000 	strmi.w	r3, [r9]
 8003d56:	6825      	ldr	r5, [r4, #0]
 8003d58:	f015 0506 	ands.w	r5, r5, #6
 8003d5c:	d110      	bne.n	8003d80 <_printf_common+0x64>
 8003d5e:	f104 0a19 	add.w	sl, r4, #25
 8003d62:	e007      	b.n	8003d74 <_printf_common+0x58>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4652      	mov	r2, sl
 8003d68:	4639      	mov	r1, r7
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	47c0      	blx	r8
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d01a      	beq.n	8003da8 <_printf_common+0x8c>
 8003d72:	3501      	adds	r5, #1
 8003d74:	68e3      	ldr	r3, [r4, #12]
 8003d76:	f8d9 2000 	ldr.w	r2, [r9]
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	429d      	cmp	r5, r3
 8003d7e:	dbf1      	blt.n	8003d64 <_printf_common+0x48>
 8003d80:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	3300      	adds	r3, #0
 8003d88:	bf18      	it	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	0692      	lsls	r2, r2, #26
 8003d8e:	d50f      	bpl.n	8003db0 <_printf_common+0x94>
 8003d90:	18e1      	adds	r1, r4, r3
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	2030      	movs	r0, #48	; 0x30
 8003d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d9a:	4422      	add	r2, r4
 8003d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da4:	3302      	adds	r3, #2
 8003da6:	e003      	b.n	8003db0 <_printf_common+0x94>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db4:	4639      	mov	r1, r7
 8003db6:	4630      	mov	r0, r6
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0f4      	beq.n	8003da8 <_printf_common+0x8c>
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	f8d9 5000 	ldr.w	r5, [r9]
 8003dc4:	68e3      	ldr	r3, [r4, #12]
 8003dc6:	f002 0206 	and.w	r2, r2, #6
 8003dca:	2a04      	cmp	r2, #4
 8003dcc:	bf08      	it	eq
 8003dce:	1b5d      	subeq	r5, r3, r5
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	bf0c      	ite	eq
 8003dd6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dda:	2500      	movne	r5, #0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bfc4      	itt	gt
 8003de0:	1a9b      	subgt	r3, r3, r2
 8003de2:	18ed      	addgt	r5, r5, r3
 8003de4:	f04f 0900 	mov.w	r9, #0
 8003de8:	341a      	adds	r4, #26
 8003dea:	454d      	cmp	r5, r9
 8003dec:	d009      	beq.n	8003e02 <_printf_common+0xe6>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4622      	mov	r2, r4
 8003df2:	4639      	mov	r1, r7
 8003df4:	4630      	mov	r0, r6
 8003df6:	47c0      	blx	r8
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d0d5      	beq.n	8003da8 <_printf_common+0x8c>
 8003dfc:	f109 0901 	add.w	r9, r9, #1
 8003e00:	e7f3      	b.n	8003dea <_printf_common+0xce>
 8003e02:	2000      	movs	r0, #0
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e08 <_printf_i>:
_printf_i():
 8003e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e0c:	4617      	mov	r7, r2
 8003e0e:	7e0a      	ldrb	r2, [r1, #24]
 8003e10:	b085      	sub	sp, #20
 8003e12:	2a6e      	cmp	r2, #110	; 0x6e
 8003e14:	4698      	mov	r8, r3
 8003e16:	4606      	mov	r6, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003e20:	f000 80ae 	beq.w	8003f80 <_printf_i+0x178>
 8003e24:	d811      	bhi.n	8003e4a <_printf_i+0x42>
 8003e26:	2a63      	cmp	r2, #99	; 0x63
 8003e28:	d022      	beq.n	8003e70 <_printf_i+0x68>
 8003e2a:	d809      	bhi.n	8003e40 <_printf_i+0x38>
 8003e2c:	2a00      	cmp	r2, #0
 8003e2e:	f000 80bb 	beq.w	8003fa8 <_printf_i+0x1a0>
 8003e32:	2a58      	cmp	r2, #88	; 0x58
 8003e34:	f040 80ca 	bne.w	8003fcc <_printf_i+0x1c4>
 8003e38:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003e3c:	4983      	ldr	r1, [pc, #524]	; (800404c <_printf_i+0x244>)
 8003e3e:	e055      	b.n	8003eec <_printf_i+0xe4>
 8003e40:	2a64      	cmp	r2, #100	; 0x64
 8003e42:	d01e      	beq.n	8003e82 <_printf_i+0x7a>
 8003e44:	2a69      	cmp	r2, #105	; 0x69
 8003e46:	d01c      	beq.n	8003e82 <_printf_i+0x7a>
 8003e48:	e0c0      	b.n	8003fcc <_printf_i+0x1c4>
 8003e4a:	2a73      	cmp	r2, #115	; 0x73
 8003e4c:	f000 80b0 	beq.w	8003fb0 <_printf_i+0x1a8>
 8003e50:	d809      	bhi.n	8003e66 <_printf_i+0x5e>
 8003e52:	2a6f      	cmp	r2, #111	; 0x6f
 8003e54:	d02e      	beq.n	8003eb4 <_printf_i+0xac>
 8003e56:	2a70      	cmp	r2, #112	; 0x70
 8003e58:	f040 80b8 	bne.w	8003fcc <_printf_i+0x1c4>
 8003e5c:	680a      	ldr	r2, [r1, #0]
 8003e5e:	f042 0220 	orr.w	r2, r2, #32
 8003e62:	600a      	str	r2, [r1, #0]
 8003e64:	e03e      	b.n	8003ee4 <_printf_i+0xdc>
 8003e66:	2a75      	cmp	r2, #117	; 0x75
 8003e68:	d024      	beq.n	8003eb4 <_printf_i+0xac>
 8003e6a:	2a78      	cmp	r2, #120	; 0x78
 8003e6c:	d03a      	beq.n	8003ee4 <_printf_i+0xdc>
 8003e6e:	e0ad      	b.n	8003fcc <_printf_i+0x1c4>
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003e76:	1d11      	adds	r1, r2, #4
 8003e78:	6019      	str	r1, [r3, #0]
 8003e7a:	6813      	ldr	r3, [r2, #0]
 8003e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e80:	e0a8      	b.n	8003fd4 <_printf_i+0x1cc>
 8003e82:	6821      	ldr	r1, [r4, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e8a:	d002      	beq.n	8003e92 <_printf_i+0x8a>
 8003e8c:	1d11      	adds	r1, r2, #4
 8003e8e:	6019      	str	r1, [r3, #0]
 8003e90:	e008      	b.n	8003ea4 <_printf_i+0x9c>
 8003e92:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e96:	f102 0104 	add.w	r1, r2, #4
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	d002      	beq.n	8003ea4 <_printf_i+0x9c>
 8003e9e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ea2:	e000      	b.n	8003ea6 <_printf_i+0x9e>
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da3c      	bge.n	8003f24 <_printf_i+0x11c>
 8003eaa:	222d      	movs	r2, #45	; 0x2d
 8003eac:	425b      	negs	r3, r3
 8003eae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003eb2:	e037      	b.n	8003f24 <_printf_i+0x11c>
 8003eb4:	6821      	ldr	r1, [r4, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ebc:	d002      	beq.n	8003ec4 <_printf_i+0xbc>
 8003ebe:	1d11      	adds	r1, r2, #4
 8003ec0:	6019      	str	r1, [r3, #0]
 8003ec2:	e007      	b.n	8003ed4 <_printf_i+0xcc>
 8003ec4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ec8:	f102 0104 	add.w	r1, r2, #4
 8003ecc:	6019      	str	r1, [r3, #0]
 8003ece:	d001      	beq.n	8003ed4 <_printf_i+0xcc>
 8003ed0:	8813      	ldrh	r3, [r2, #0]
 8003ed2:	e000      	b.n	8003ed6 <_printf_i+0xce>
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	7e22      	ldrb	r2, [r4, #24]
 8003ed8:	495c      	ldr	r1, [pc, #368]	; (800404c <_printf_i+0x244>)
 8003eda:	2a6f      	cmp	r2, #111	; 0x6f
 8003edc:	bf14      	ite	ne
 8003ede:	220a      	movne	r2, #10
 8003ee0:	2208      	moveq	r2, #8
 8003ee2:	e01b      	b.n	8003f1c <_printf_i+0x114>
 8003ee4:	2278      	movs	r2, #120	; 0x78
 8003ee6:	495a      	ldr	r1, [pc, #360]	; (8004050 <_printf_i+0x248>)
 8003ee8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003ef4:	f100 0504 	add.w	r5, r0, #4
 8003ef8:	601d      	str	r5, [r3, #0]
 8003efa:	d103      	bne.n	8003f04 <_printf_i+0xfc>
 8003efc:	0655      	lsls	r5, r2, #25
 8003efe:	d501      	bpl.n	8003f04 <_printf_i+0xfc>
 8003f00:	8803      	ldrh	r3, [r0, #0]
 8003f02:	e000      	b.n	8003f06 <_printf_i+0xfe>
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	07d0      	lsls	r0, r2, #31
 8003f08:	bf44      	itt	mi
 8003f0a:	f042 0220 	orrmi.w	r2, r2, #32
 8003f0e:	6022      	strmi	r2, [r4, #0]
 8003f10:	b91b      	cbnz	r3, 8003f1a <_printf_i+0x112>
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	f022 0220 	bic.w	r2, r2, #32
 8003f18:	6022      	str	r2, [r4, #0]
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f22:	e001      	b.n	8003f28 <_printf_i+0x120>
 8003f24:	4949      	ldr	r1, [pc, #292]	; (800404c <_printf_i+0x244>)
 8003f26:	220a      	movs	r2, #10
 8003f28:	6865      	ldr	r5, [r4, #4]
 8003f2a:	60a5      	str	r5, [r4, #8]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	db08      	blt.n	8003f42 <_printf_i+0x13a>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	f020 0004 	bic.w	r0, r0, #4
 8003f36:	6020      	str	r0, [r4, #0]
 8003f38:	b92b      	cbnz	r3, 8003f46 <_printf_i+0x13e>
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	d17d      	bne.n	800403a <_printf_i+0x232>
 8003f3e:	4675      	mov	r5, lr
 8003f40:	e00c      	b.n	8003f5c <_printf_i+0x154>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d079      	beq.n	800403a <_printf_i+0x232>
 8003f46:	4675      	mov	r5, lr
 8003f48:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f4c:	fb02 3310 	mls	r3, r2, r0, r3
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f56:	4603      	mov	r3, r0
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1f5      	bne.n	8003f48 <_printf_i+0x140>
 8003f5c:	2a08      	cmp	r2, #8
 8003f5e:	d10b      	bne.n	8003f78 <_printf_i+0x170>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	07da      	lsls	r2, r3, #31
 8003f64:	d508      	bpl.n	8003f78 <_printf_i+0x170>
 8003f66:	6923      	ldr	r3, [r4, #16]
 8003f68:	6862      	ldr	r2, [r4, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bfde      	ittt	le
 8003f6e:	2330      	movle	r3, #48	; 0x30
 8003f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f78:	ebc5 030e 	rsb	r3, r5, lr
 8003f7c:	6123      	str	r3, [r4, #16]
 8003f7e:	e02e      	b.n	8003fde <_printf_i+0x1d6>
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	6949      	ldr	r1, [r1, #20]
 8003f86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003f8a:	d003      	beq.n	8003f94 <_printf_i+0x18c>
 8003f8c:	1d10      	adds	r0, r2, #4
 8003f8e:	6018      	str	r0, [r3, #0]
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	e008      	b.n	8003fa6 <_printf_i+0x19e>
 8003f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f98:	f102 0004 	add.w	r0, r2, #4
 8003f9c:	6018      	str	r0, [r3, #0]
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	d001      	beq.n	8003fa6 <_printf_i+0x19e>
 8003fa2:	8019      	strh	r1, [r3, #0]
 8003fa4:	e000      	b.n	8003fa8 <_printf_i+0x1a0>
 8003fa6:	6019      	str	r1, [r3, #0]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	4675      	mov	r5, lr
 8003fae:	e016      	b.n	8003fde <_printf_i+0x1d6>
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	1d11      	adds	r1, r2, #4
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	6815      	ldr	r5, [r2, #0]
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f87f 	bl	80040c0 <memchr>
 8003fc2:	b108      	cbz	r0, 8003fc8 <_printf_i+0x1c0>
 8003fc4:	1b40      	subs	r0, r0, r5
 8003fc6:	6060      	str	r0, [r4, #4]
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	e004      	b.n	8003fd6 <_printf_i+0x1ce>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fde:	f8cd 8000 	str.w	r8, [sp]
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	aa03      	add	r2, sp, #12
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f7ff fe97 	bl	8003d1c <_printf_common>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d102      	bne.n	8003ff8 <_printf_i+0x1f0>
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff6:	e026      	b.n	8004046 <_printf_i+0x23e>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d0f5      	beq.n	8003ff2 <_printf_i+0x1ea>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	079b      	lsls	r3, r3, #30
 800400a:	d510      	bpl.n	800402e <_printf_i+0x226>
 800400c:	2500      	movs	r5, #0
 800400e:	f104 0919 	add.w	r9, r4, #25
 8004012:	e007      	b.n	8004024 <_printf_i+0x21c>
 8004014:	2301      	movs	r3, #1
 8004016:	464a      	mov	r2, r9
 8004018:	4639      	mov	r1, r7
 800401a:	4630      	mov	r0, r6
 800401c:	47c0      	blx	r8
 800401e:	3001      	adds	r0, #1
 8004020:	d0e7      	beq.n	8003ff2 <_printf_i+0x1ea>
 8004022:	3501      	adds	r5, #1
 8004024:	68e3      	ldr	r3, [r4, #12]
 8004026:	9a03      	ldr	r2, [sp, #12]
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	429d      	cmp	r5, r3
 800402c:	dbf2      	blt.n	8004014 <_printf_i+0x20c>
 800402e:	68e0      	ldr	r0, [r4, #12]
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	4298      	cmp	r0, r3
 8004034:	bfb8      	it	lt
 8004036:	4618      	movlt	r0, r3
 8004038:	e005      	b.n	8004046 <_printf_i+0x23e>
 800403a:	780b      	ldrb	r3, [r1, #0]
 800403c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004044:	e78a      	b.n	8003f5c <_printf_i+0x154>
 8004046:	b005      	add	sp, #20
 8004048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404c:	08004851 	.word	0x08004851
 8004050:	08004862 	.word	0x08004862

08004054 <_read_r>:
_read_r():
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4c07      	ldr	r4, [pc, #28]	; (8004074 <_read_r+0x20>)
 8004058:	4605      	mov	r5, r0
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	2200      	movs	r2, #0
 8004060:	6022      	str	r2, [r4, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fd f808 	bl	8001078 <_read>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_read_r+0x1e>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	b103      	cbz	r3, 8004072 <_read_r+0x1e>
 8004070:	602b      	str	r3, [r5, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	200001c8 	.word	0x200001c8

08004078 <_fstat_r>:
_fstat_r():
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4c07      	ldr	r4, [pc, #28]	; (8004098 <_fstat_r+0x20>)
 800407c:	2300      	movs	r3, #0
 800407e:	4605      	mov	r5, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	f7fd f967 	bl	8001358 <_fstat>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d102      	bne.n	8004094 <_fstat_r+0x1c>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	b103      	cbz	r3, 8004094 <_fstat_r+0x1c>
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	bf00      	nop
 8004098:	200001c8 	.word	0x200001c8

0800409c <_isatty_r>:
_isatty_r():
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4c06      	ldr	r4, [pc, #24]	; (80040b8 <_isatty_r+0x1c>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	4605      	mov	r5, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	f7fd f99c 	bl	80013e4 <_isatty>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_isatty_r+0x1a>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_isatty_r+0x1a>
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	200001c8 	.word	0x200001c8
 80040bc:	00000000 	.word	0x00000000

080040c0 <memchr>:
memchr():
 80040c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80040c4:	2a10      	cmp	r2, #16
 80040c6:	db2b      	blt.n	8004120 <memchr+0x60>
 80040c8:	f010 0f07 	tst.w	r0, #7
 80040cc:	d008      	beq.n	80040e0 <memchr+0x20>
 80040ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80040d2:	3a01      	subs	r2, #1
 80040d4:	428b      	cmp	r3, r1
 80040d6:	d02d      	beq.n	8004134 <memchr+0x74>
 80040d8:	f010 0f07 	tst.w	r0, #7
 80040dc:	b342      	cbz	r2, 8004130 <memchr+0x70>
 80040de:	d1f6      	bne.n	80040ce <memchr+0xe>
 80040e0:	b4f0      	push	{r4, r5, r6, r7}
 80040e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80040e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80040ea:	f022 0407 	bic.w	r4, r2, #7
 80040ee:	f07f 0700 	mvns.w	r7, #0
 80040f2:	2300      	movs	r3, #0
 80040f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80040f8:	3c08      	subs	r4, #8
 80040fa:	ea85 0501 	eor.w	r5, r5, r1
 80040fe:	ea86 0601 	eor.w	r6, r6, r1
 8004102:	fa85 f547 	uadd8	r5, r5, r7
 8004106:	faa3 f587 	sel	r5, r3, r7
 800410a:	fa86 f647 	uadd8	r6, r6, r7
 800410e:	faa5 f687 	sel	r6, r5, r7
 8004112:	b98e      	cbnz	r6, 8004138 <memchr+0x78>
 8004114:	d1ee      	bne.n	80040f4 <memchr+0x34>
 8004116:	bcf0      	pop	{r4, r5, r6, r7}
 8004118:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800411c:	f002 0207 	and.w	r2, r2, #7
 8004120:	b132      	cbz	r2, 8004130 <memchr+0x70>
 8004122:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004126:	3a01      	subs	r2, #1
 8004128:	ea83 0301 	eor.w	r3, r3, r1
 800412c:	b113      	cbz	r3, 8004134 <memchr+0x74>
 800412e:	d1f8      	bne.n	8004122 <memchr+0x62>
 8004130:	2000      	movs	r0, #0
 8004132:	4770      	bx	lr
 8004134:	3801      	subs	r0, #1
 8004136:	4770      	bx	lr
 8004138:	2d00      	cmp	r5, #0
 800413a:	bf06      	itte	eq
 800413c:	4635      	moveq	r5, r6
 800413e:	3803      	subeq	r0, #3
 8004140:	3807      	subne	r0, #7
 8004142:	f015 0f01 	tst.w	r5, #1
 8004146:	d107      	bne.n	8004158 <memchr+0x98>
 8004148:	3001      	adds	r0, #1
 800414a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800414e:	bf02      	ittt	eq
 8004150:	3001      	addeq	r0, #1
 8004152:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004156:	3001      	addeq	r0, #1
 8004158:	bcf0      	pop	{r4, r5, r6, r7}
 800415a:	3801      	subs	r0, #1
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <APBAHBPrescTable>:
 8004160:	0000 0000 0201 0403 0201 0403 0706 0908     ................
 8004170:	743a 0074 742f 706d 0000 0000               :tt./tmp....

0800417c <AHBPrescTable>:
	...
 8004184:	0201 0403 0706 0908 7953 7473 6d65 6320     ........System c
 8004194:	6f6c 6b63 203a 6c25 2075 7a48 000a 0000     lock: %lu Hz....
 80041a4:	7552 206e 6874 2065 6f63 6572 616d 6b72     Run the coremark
 80041b4:	3120 302e 6220 6e65 6863 616d 6b72 0000      1.0 benchmark..
 80041c4:	420a 6e65 6863 616d 6b72 6420 6e6f 2e65     .Benchmark done.
 80041d4:	0000 0000 6b36 7020 7265 6f66 6d72 6e61     ....6k performan
 80041e4:	6563 7220 6e75 7020 7261 6d61 7465 7265     ce run parameter
 80041f4:	2073 6f66 2072 6f63 6572 616d 6b72 002e     s for coremark..
 8004204:	6b36 7620 6c61 6469 7461 6f69 206e 7572     6k validation ru
 8004214:	206e 6170 6172 656d 6574 7372 6620 726f     n parameters for
 8004224:	6320 726f 6d65 7261 2e6b 0000 7250 666f      coremark...Prof
 8004234:	6c69 2065 6567 656e 6172 6974 6e6f 7220     ile generation r
 8004244:	6e75 7020 7261 6d61 7465 7265 2073 6f66     un parameters fo
 8004254:	2072 6f63 6572 616d 6b72 002e 4b32 7020     r coremark..2K p
 8004264:	7265 6f66 6d72 6e61 6563 7220 6e75 7020     erformance run p
 8004274:	7261 6d61 7465 7265 2073 6f66 2072 6f63     arameters for co
 8004284:	6572 616d 6b72 002e 4b32 7620 6c61 6469     remark..2K valid
 8004294:	7461 6f69 206e 7572 206e 6170 6172 656d     ation run parame
 80042a4:	6574 7372 6620 726f 6320 726f 6d65 7261     ters for coremar
 80042b4:	2e6b 0000 255b 5d75 5245 4f52 2152 6c20     k...[%u]ERROR! l
 80042c4:	7369 2074 7263 2063 7830 3025 7834 2d20     ist crc 0x%04x -
 80042d4:	7320 6f68 6c75 2064 6562 3020 2578 3430      should be 0x%04
 80042e4:	0a78 0000 255b 5d75 5245 4f52 2152 6d20     x...[%u]ERROR! m
 80042f4:	7461 6972 2078 7263 2063 7830 3025 7834     atrix crc 0x%04x
 8004304:	2d20 7320 6f68 6c75 2064 6562 3020 2578      - should be 0x%
 8004314:	3430 0a78 0000 0000 255b 5d75 5245 4f52     04x.....[%u]ERRO
 8004324:	2152 7320 6174 6574 6320 6372 3020 2578     R! state crc 0x%
 8004334:	3430 2078 202d 6873 756f 646c 6220 2065     04x - should be 
 8004344:	7830 3025 7834 000a 6f43 6572 614d 6b72     0x%04x..CoreMark
 8004354:	5320 7a69 2065 2020 3a20 2520 0a75 0000      Size    : %u...
 8004364:	6f54 6174 206c 6974 6b63 2073 2020 2020     Total ticks     
 8004374:	3a20 2520 0a75 0000 6f54 6174 206c 6974      : %u...Total ti
 8004384:	656d 2820 6573 7363 3a29 2520 0a64 0000     me (secs): %d...
 8004394:	7449 7265 7461 6f69 736e 532f 6365 2020     Iterations/Sec  
 80043a4:	3a20 2520 0a64 0000 5245 4f52 2152 4d20      : %d...ERROR! M
 80043b4:	7375 2074 7865 6365 7475 2065 6f66 2072     ust execute for 
 80043c4:	7461 6c20 6165 7473 3120 2030 6573 7363     at least 10 secs
 80043d4:	6620 726f 6120 7620 6c61 6469 7220 7365      for a valid res
 80043e4:	6c75 2174 0000 0000 7449 7265 7461 6f69     ult!....Iteratio
 80043f4:	736e 2020 2020 2020 3a20 2520 0a75 0000     ns       : %u...
 8004404:	4347 3543 332e 312e 3220 3130 3036 3033     GCC5.3.1 2016030
 8004414:	2037 7228 6c65 6165 6573 2029 415b 4d52     7 (release) [ARM
 8004424:	652f 626d 6465 6564 2d64 2d35 7262 6e61     /embedded-5-bran
 8004434:	6863 7220 7665 7369 6f69 206e 3332 3534     ch revision 2345
 8004444:	3938 005d 6f43 706d 6c69 7265 7620 7265     89].Compiler ver
 8004454:	6973 6e6f 3a20 2520 0a73 0000 5453 4341     sion : %s...STAC
 8004464:	004b 0000 654d 6f6d 7972 6c20 636f 7461     K...Memory locat
 8004474:	6f69 206e 3a20 2520 0a73 0000 6573 6465     ion  : %s...seed
 8004484:	7263 2063 2020 2020 2020 2020 3a20 3020     crc          : 0
 8004494:	2578 3430 0a78 0000 255b 5d64 7263 6c63     x%04x...[%d]crcl
 80044a4:	7369 2074 2020 2020 2020 203a 7830 3025     ist       : 0x%0
 80044b4:	7834 000a 255b 5d64 7263 6d63 7461 6972     4x..[%d]crcmatri
 80044c4:	2078 2020 2020 203a 7830 3025 7834 000a     x     : 0x%04x..
 80044d4:	255b 5d64 7263 7363 6174 6574 2020 2020     [%d]crcstate    
 80044e4:	2020 203a 7830 3025 7834 000a 255b 5d64       : 0x%04x..[%d]
 80044f4:	7263 6663 6e69 6c61 2020 2020 2020 203a     crcfinal      : 
 8004504:	7830 3025 7834 000a 6f43 7272 6365 2074     0x%04x..Correct 
 8004514:	706f 7265 7461 6f69 206e 6176 696c 6164     operation valida
 8004524:	6574 2e64 5320 6565 7220 6165 6d64 2e65     ted. See readme.
 8004534:	7874 2074 6f66 2072 7572 206e 6e61 2064     txt for run and 
 8004544:	6572 6f70 7472 6e69 2067 7572 656c 2e73     reporting rules.
 8004554:	0000 0000 7245 6f72 7372 6420 7465 6365     ....Errors detec
 8004564:	6574 0064 6143 6e6e 746f 7620 6c61 6469     ted.Cannot valid
 8004574:	7461 2065 706f 7265 7461 6f69 206e 6f66     ate operation fo
 8004584:	2072 6874 7365 2065 6573 6465 7620 6c61     r these seed val
 8004594:	6575 2c73 7020 656c 7361 2065 6f63 706d     ues, please comp
 80045a4:	7261 2065 6977 6874 7220 7365 6c75 7374     are with results
 80045b4:	6f20 206e 2061 6e6b 776f 206e 6c70 7461      on a known plat
 80045c4:	6f66 6d72 002e 0000 7453 7461 6369 0000     form....Static..
 80045d4:	6548 7061 0000 0000 7453 6361 006b 0000     Heap....Stack...

080045e4 <intpat>:
 80045e4:	4694 0800 469c 0800 46a4 0800 46ac 0800     .F...F...F...F..

080045f4 <floatpat>:
 80045f4:	4664 0800 4670 0800 467c 0800 4688 0800     dF..pF..|F...F..
 8004604:	3054 332e 2d65 4631 0000 0000 542d 542e     T0.3e-1F....-T.T
 8004614:	2b2b 7154 0000 0000 5431 2e33 6534 7a34     ++Tq....1T3.4e4z
 8004624:	0000 0000 3433 302e 2d65 5e54 0000 0000     ....34.0e-T^....
 8004634:	2e35 3035 6530 332b 0000 0000 2e2d 3231     5.500e+3....-.12
 8004644:	6533 322d 0000 0000 382d 6537 382b 3233     3e-2....-87e+832
 8004654:	0000 0000 302b 362e 2d65 3231 0000 0000     ....+0.6e-12....
 8004664:	3533 352e 3434 3030 0000 0000 312e 3332     35.54400.....123
 8004674:	3534 3030 0000 0000 312d 3031 372e 3030     4500....-110.700
 8004684:	0000 0000 302b 362e 3434 3030 0000 0000     ....+0.64400....
 8004694:	3035 3231 0000 0000 3231 3433 0000 0000     5012....1234....
 80046a4:	382d 3437 0000 0000 312b 3232 0000 0000     -874....+122....

080046b4 <scipat>:
 80046b4:	4634 0800 4640 0800 464c 0800 4658 0800     4F..@F..LF..XF..

080046c4 <errpat>:
 80046c4:	4604 0800 4610 0800 461c 0800 4628 0800     .F...F...F..(F..

080046d4 <_ctype_>:
 80046d4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80046e4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80046f4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8004704:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8004714:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8004724:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8004734:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8004744:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8004754:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080047d8 <__sf_fake_stdin>:
	...

080047f8 <__sf_fake_stdout>:
	...

08004818 <__sf_fake_stderr>:
	...
 8004838:	0043 0000                                   C...

0800483c <_global_impure_ptr>:
 800483c:	0018 2000 2d23 2b30 0020 6c68 004c 6665     ... #-0+ .hlL.ef
 800484c:	4567 4746 3000 3231 3433 3635 3837 4139     gEFG.0123456789A
 800485c:	4342 4544 0046 3130 3332 3534 3736 3938     BCDEF.0123456789
 800486c:	6261 6463 6665 0000                              abcdef.
